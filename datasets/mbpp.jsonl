{"task_id": "MBPP/0001", "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "entry_point": "min_cost", "function_name": "def min_cost(cost, m, n)", "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\n    assert candidate([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\n    assert candidate([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16\n\n"}
{"task_id": "MBPP/0002", "prompt": "Write a function to find the similar elements from the given two tuple lists.", "entry_point": "similar_elements", "function_name": "def similar_elements(test_tup1, test_tup2)", "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n    assert candidate((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\n    assert candidate((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)\n\n"}
{"task_id": "MBPP/0003", "prompt": "Write a python function to identify non-prime numbers.", "entry_point": "is_not_prime", "function_name": "def is_not_prime(n)", "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == False\n    assert candidate(10) == True\n    assert candidate(35) == True\n\n"}
{"task_id": "MBPP/0004", "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "entry_point": "heap_queue_largest", "function_name": "def heap_queue_largest(nums, n)", "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n\n"}
{"task_id": "MBPP/0005", "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "entry_point": "count_ways", "function_name": "def count_ways(n)", "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 3\n    assert candidate(8) == 153\n    assert candidate(12) == 2131\n\n"}
{"task_id": "MBPP/0006", "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.", "entry_point": "is_Power_Of_Two", "function_name": "def is_Power_Of_Two(x)", "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert differ_At_One_Bit_Pos(13,9) == True\n    assert differ_At_One_Bit_Pos(15,8) == False\n    assert differ_At_One_Bit_Pos(2,4) == False\n\n"}
{"task_id": "MBPP/0007", "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "entry_point": "find_char_long", "function_name": "def find_char_long(text)", "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('Please move back to stream') == ['Please', 'move', 'back', 'stream']\n    assert candidate('Jing Eco and Tech') == ['Jing', 'Tech']\n    assert candidate('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']\n\n"}
{"task_id": "MBPP/0008", "prompt": "Write a function to find squares of individual elements in a list using lambda function.", "entry_point": "square_nums", "function_name": "def square_nums(nums)", "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30])==([100,400,900])\n    assert candidate([12,15])==([144,225])\n\n"}
{"task_id": "MBPP/0009", "prompt": "Write a python function to find the minimum number of rotations required to get the same string.", "entry_point": "find_Rotations", "function_name": "def find_Rotations(str)", "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"aaaa\") == 1\n    assert candidate(\"ab\") == 2\n    assert candidate(\"abc\") == 3\n\n"}
{"task_id": "MBPP/0010", "prompt": "Write a function to get the n smallest items from a dataset.", "entry_point": "small_nnum", "function_name": "def small_nnum(list1, n)", "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]\n\n"}
{"task_id": "MBPP/0011", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "entry_point": "remove_Occ", "function_name": "def remove_Occ(s, ch)", "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"hello\",\"l\") == \"heo\"\n    assert candidate(\"abcda\",\"a\") == \"bcd\"\n    assert candidate(\"PHP\",\"P\") == \"H\"\n\n"}
{"task_id": "MBPP/0012", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "entry_point": "sort_matrix", "function_name": "def sort_matrix(M)", "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\n"}
{"task_id": "MBPP/0013", "prompt": "Write a function to count the most common words in a dictionary.", "entry_point": "count_common", "function_name": "def count_common(words)", "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    assert candidate(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n    assert candidate(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n\n"}
{"task_id": "MBPP/0014", "prompt": "Write a python function to find the volume of a triangular prism.", "entry_point": "find_Volume", "function_name": "def find_Volume(l, b, h)", "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,8,6) == 240\n    assert candidate(3,2,2) == 6\n    assert candidate(1,2,1) == 1\n\n"}
{"task_id": "MBPP/0015", "prompt": "Write a function to split a string at lowercase letters.", "entry_point": "split_lowerstring", "function_name": "def split_lowerstring(text)", "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"AbCd\")==['bC','d']\n    assert candidate(\"Python\")==['y', 't', 'h', 'o', 'n']\n    assert candidate(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\n\n"}
{"task_id": "MBPP/0016", "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.", "entry_point": "text_lowercase_underscore", "function_name": "def text_lowercase_underscore(text)", "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"aab_cbbbc\")==('Found a match!')\n    assert candidate(\"aab_Abbbc\")==('Not matched!')\n    assert candidate(\"Aaab_abbbc\")==('Not matched!')\n\n"}
{"task_id": "MBPP/0017", "prompt": "Write a function to find the perimeter of a square.", "entry_point": "square_perimeter", "function_name": "def square_perimeter(a)", "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==40\n    assert candidate(5)==20\n    assert candidate(4)==16\n\n"}
{"task_id": "MBPP/0018", "prompt": "Write a function to remove characters from the first string which are present in the second string.", "entry_point": "str_to_list", "function_name": "def str_to_list(string)", "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n    assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' \n\n"}
{"task_id": "MBPP/0019", "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "entry_point": "test_duplicate", "function_name": "def test_duplicate(arraynums)", "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(([1,2,3,4,5]))==False\n    assert candidate(([1,2,3,4, 4]))==True\n    assert candidate([1,1,2,2,3,3,4,4,5])==True\n\n"}
{"task_id": "MBPP/0020", "prompt": "Write a function to check if the given number is woodball or not.", "entry_point": "is_woodall", "function_name": "def is_woodall(x)", "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(383) == True\n    assert candidate(254) == False\n    assert candidate(200) == False\n\n"}
{"task_id": "MBPP/0021", "prompt": "Write a function to find m number of multiples of n.", "entry_point": "multiples_of_num", "function_name": "def multiples_of_num(m, n)", "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,3)== [3,6,9,12]\n    assert candidate(2,5)== [5,10]\n    assert candidate(9,2)== [2,4,6,8,10,12,14,16,18]\n\n"}
{"task_id": "MBPP/0022", "prompt": "Write a function to find the first duplicate element in a given array of integers.", "entry_point": "find_first_duplicate", "function_name": "def find_first_duplicate(nums)", "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(([1, 2, 3, 4, 4, 5]))==4\n    assert candidate([1, 2, 3, 4])==-1\n    assert candidate([1, 1, 2, 3, 3, 2, 2])==1\n\n"}
{"task_id": "MBPP/0023", "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.", "entry_point": "maximum_Sum", "function_name": "def maximum_Sum(list1)", "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n    assert candidate([[0,1,1],[1,1,2],[3,2,1]]) == 6\n    assert candidate([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19\n\n"}
{"task_id": "MBPP/0024", "prompt": "Write a function to convert the given binary number to its decimal equivalent.", "entry_point": "binary_to_decimal", "function_name": "def binary_to_decimal(binary)", "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(100) == 4\n    assert candidate(1011) == 11\n    assert candidate(1101101) == 109\n\n"}
{"task_id": "MBPP/0025", "prompt": "Write a python function to find the product of non-repeated elements in a given array.", "entry_point": "find_Product", "function_name": "def find_Product(arr, n)", "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,3],4) == 6\n    assert candidate([1,2,3,1,1],5) == 6\n    assert candidate([1,1,4,5,6],5) == 120\n\n"}
{"task_id": "MBPP/0026", "prompt": "Write a function to check if the given tuple list has all k elements.", "entry_point": "check_k_elements", "function_name": "def check_k_elements(test_list, K)", "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n    assert candidate([(7, 7, 7), (7, 7)], 7) == True\n    assert candidate([(9, 9), (9, 9, 9, 9)], 7) == False\n\n"}
{"task_id": "MBPP/0027", "prompt": "Write a python function to remove all digits from a list of strings.", "entry_point": "remove", "function_name": "def remove(list)", "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n    assert candidate(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\n    assert candidate(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']\n\n"}
{"task_id": "MBPP/0028", "prompt": "Write a python function to find binomial co-efficient.", "entry_point": "binomial_Coeff", "function_name": "def binomial_Coeff(n, k)", "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,2) == 10\n    assert candidate(4,3) == 4\n    assert candidate(3,2) == 3\n\n"}
{"task_id": "MBPP/0029", "prompt": "Write a python function to find the element occurring odd number of times.", "entry_point": "get_Odd_Occurrence", "function_name": "def get_Odd_Occurrence(arr, arr_size)", "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,1,2,3,1],7) == 1\n    assert candidate([1,2,3,2,3,1,3],7) == 3\n    assert candidate([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5\n\n"}
{"task_id": "MBPP/0030", "prompt": "Write a python function to count all the substrings starting and ending with same characters.", "entry_point": "check_Equality", "function_name": "def check_Equality(s)", "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert count_Substring_With_Equal_Ends(\"abc\") == 3\n    assert count_Substring_With_Equal_Ends(\"abcda\") == 6\n    assert count_Substring_With_Equal_Ends(\"ab\") == 2\n\n"}
{"task_id": "MBPP/0031", "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "entry_point": "func", "function_name": "def func(nums, k)", "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]\n\n"}
{"task_id": "MBPP/0032", "prompt": "Write a python function to find the largest prime factor of a given number.", "entry_point": "max_Prime_Factors", "function_name": "def max_Prime_Factors(n)", "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(6) == 3\n    assert candidate(2) == 2\n\n"}
{"task_id": "MBPP/0033", "prompt": "Write a python function to convert a decimal number to binary number.", "entry_point": "decimal_To_Binary", "function_name": "def decimal_To_Binary(N)", "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 1010\n    assert candidate(1) == 1\n    assert candidate(20) == 10100\n\n"}
{"task_id": "MBPP/0034", "prompt": "Write a python function to find the missing number in a sorted array.", "entry_point": "find_missing", "function_name": "def find_missing(ar, N)", "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,5],4) == 4\n    assert candidate([1,3,4,5],4) == 2\n    assert candidate([1,2,3,5,6,7],5) == 4\n\n"}
{"task_id": "MBPP/0035", "prompt": "Write a function to find the n-th rectangular number.", "entry_point": "find_rect_num", "function_name": "def find_rect_num(n)", "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4) == 20\n    assert candidate(5) == 30\n    assert candidate(6) == 42\n\n"}
{"task_id": "MBPP/0036", "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "entry_point": "find_Nth_Digit", "function_name": "def find_Nth_Digit(p, q, N)", "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,2,1) == 5\n    assert candidate(3,5,1) == 6\n    assert candidate(5,6,5) == 3\n\n"}
{"task_id": "MBPP/0037", "prompt": "Write a function to sort a given mixed list of integers and strings.", "entry_point": "sort_mixed_list", "function_name": "def sort_mixed_list(mixed_list)", "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\n"}
{"task_id": "MBPP/0038", "prompt": "Write a function to find the division of first even and odd number of a given list.", "entry_point": "div_even_odd", "function_name": "def div_even_odd(list1)", "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==4\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==2\n    assert candidate([1,5,7,9,10])==10\n\n"}
{"task_id": "MBPP/0039", "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "entry_point": "rearange_string", "function_name": "def rearange_string(S)", "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"aab\")==('aba')\n    assert candidate(\"aabb\")==('abab')\n    assert candidate(\"abccdd\")==('cdabcd')\n\n"}
{"task_id": "MBPP/0040", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.", "entry_point": "freq_element", "function_name": "def freq_element(nums)", "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\n    assert candidate([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})\n\n"}
{"task_id": "MBPP/0041", "prompt": "Write a function to filter even numbers using lambda function.", "entry_point": "filter_evennumbers", "function_name": "def filter_evennumbers(nums)", "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    assert candidate([10,20,45,67,84,93])==[10,20,84]\n    assert candidate([5,7,9,8,6,4,3])==[8,6,4]\n\n"}
{"task_id": "MBPP/0042", "prompt": "Write a python function to find the sum of repeated elements in a given array.", "entry_point": "find_Sum", "function_name": "def find_Sum(arr, n)", "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,1,1,4,5,6],8) == 3\n    assert candidate([1,2,3,1,1],5) == 3\n    assert candidate([1,1,2],3) == 2\n\n"}
{"task_id": "MBPP/0043", "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "entry_point": "text_match", "function_name": "def text_match(text)", "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"aab_cbbbc\") == 'Found a match!'\n    assert candidate(\"aab_Abbbc\") == 'Not matched!'\n    assert candidate(\"Aaab_abbbc\") == 'Not matched!'\n\n"}
{"task_id": "MBPP/0044", "prompt": "Write a function that matches a word at the beginning of a string.", "entry_point": "text_match_string", "function_name": "def text_match_string(text)", "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\" python\")==('Not matched!')\n    assert candidate(\"python\")==('Found a match!')\n    assert candidate(\"  lang\")==('Not matched!')\n\n"}
{"task_id": "MBPP/0045", "prompt": "Write a function to find the gcd of the given array elements.", "entry_point": "find_gcd", "function_name": "def find_gcd(x, y)", "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\n    assert get_gcd([1, 2, 3]) == 1\n    assert get_gcd([2, 4, 6, 8]) == 2 \n\n"}
{"task_id": "MBPP/0046", "prompt": "Write a python function to determine whether all the numbers are different from each other are not.", "entry_point": "test_distinct", "function_name": "def test_distinct(data)", "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,5,7,9]) == True\n    assert candidate([2,4,5,5,7,9]) == False\n    assert candidate([1,2,3]) == True\n\n"}
{"task_id": "MBPP/0047", "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.", "entry_point": "compute_Last_Digit", "function_name": "def compute_Last_Digit(A, B)", "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2,4) == 2\n    assert candidate(6,8) == 6\n    assert candidate(1,2) == 2\n\n"}
{"task_id": "MBPP/0048", "prompt": "Write a python function to set all odd bits of a given number.", "entry_point": "odd_bit_set_number", "function_name": "def odd_bit_set_number(n)", "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 15\n    assert candidate(20) == 21\n    assert candidate(30) == 31\n\n"}
{"task_id": "MBPP/0049", "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.", "entry_point": "specified_element", "function_name": "def specified_element(nums, N)", "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]\n\n"}
{"task_id": "MBPP/0050", "prompt": "Write a function to find the list with minimum length using lambda function.", "entry_point": "min_length_list", "function_name": "def min_length_list(input_list)", "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])\n\n"}
{"task_id": "MBPP/0051", "prompt": "Write a function to print check if the triangle is equilateral or not.", "entry_point": "check_equilateral", "function_name": "def check_equilateral(x, y, z)", "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(6,8,12)==False \n    assert candidate(6,6,12)==False\n    assert candidate(6,6,6)==True\n\n"}
{"task_id": "MBPP/0052", "prompt": "Write a function to caluclate area of a parallelogram.", "entry_point": "parallelogram_area", "function_name": "def parallelogram_area(b, h)", "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(15,20)==300\n    assert candidate(8,9)==72\n\n"}
{"task_id": "MBPP/0053", "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.", "entry_point": "check_Equality", "function_name": "def check_Equality(str)", "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abcda\") == \"Equal\"\n    assert candidate(\"ab\") == \"Not Equal\"\n    assert candidate(\"mad\") == \"Not Equal\"\n\n"}
{"task_id": "MBPP/0054", "prompt": "Write a function to sort the given array by using counting sort.", "entry_point": "counting_sort", "function_name": "def counting_sort(my_list)", "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n    assert candidate([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\n    assert candidate([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]\n\n"}
{"task_id": "MBPP/0055", "prompt": "Write a function to find t-nth term of geometric series.", "entry_point": "tn_gp", "function_name": "def tn_gp(a, n, r)", "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,5,2)==16\n    assert candidate(1,5,4)==256\n    assert candidate(2,6,3)==486\n\n"}
{"task_id": "MBPP/0056", "prompt": "Write a python function to check if a given number is one less than twice its reverse.", "entry_point": "rev", "function_name": "def rev(num)", "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert check(70) == False\n    assert check(23) == False\n    assert check(73) == True\n\n"}
{"task_id": "MBPP/0057", "prompt": "Write a python function to find the largest number that can be formed with the given digits.", "entry_point": "find_Max_Num", "function_name": "def find_Max_Num(arr, n)", "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3],3) == 321\n    assert candidate([4,5,6,1],4) == 6541\n    assert candidate([1,2,3,9],4) == 9321\n\n"}
{"task_id": "MBPP/0058", "prompt": "Write a python function to check whether the given two integers have opposite sign or not.", "entry_point": "opposite_Signs", "function_name": "def opposite_Signs(x, y)", "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,-2) == True\n    assert candidate(3,2) == False\n    assert candidate(-10,-10) == False\n\n"}
{"task_id": "MBPP/0059", "prompt": "Write a function to find the nth octagonal number.", "entry_point": "is_octagonal", "function_name": "def is_octagonal(n)", "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == 65\n    assert candidate(10) == 280\n    assert candidate(15) == 645\n\n"}
{"task_id": "MBPP/0060", "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "entry_point": "max_len_sub", "function_name": "def max_len_sub(arr, n)", "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n    assert candidate([-2, -1, 5, -1, 4, 0, 3], 7) == 4\n    assert candidate([9, 11, 13, 15, 18], 5) == 1\n\n"}
{"task_id": "MBPP/0061", "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.", "entry_point": "count_Substrings", "function_name": "def count_Substrings(s, n)", "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('112112',6) == 6\n    assert candidate('111',3) == 6\n    assert candidate('1101112',7) == 12\n\n"}
{"task_id": "MBPP/0062", "prompt": "Write a python function to find smallest number in a list.", "entry_point": "smallest_num", "function_name": "def smallest_num(xs)", "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 1, 45, 99]) == 1\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([45, 46, 50, 60]) == 45\n\n"}
{"task_id": "MBPP/0063", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.", "entry_point": "max_difference", "function_name": "def max_difference(test_list)", "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n\n"}
{"task_id": "MBPP/0064", "prompt": "Write a function to sort a list of tuples using lambda.", "entry_point": "subject_marks", "function_name": "def subject_marks(subjectmarks)", "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert candidate([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n\n"}
{"task_id": "MBPP/0065", "prompt": "Write a function of recursion list sum.", "entry_point": "recursive_list_sum", "function_name": "def recursive_list_sum(data_list)", "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(([1, 2, [3,4],[5,6]]))==21\n    assert candidate(([7, 10, [15,14],[19,41]]))==106\n    assert candidate(([10, 20, [30,40],[50,60]]))==210\n\n"}
{"task_id": "MBPP/0066", "prompt": "Write a python function to count positive numbers in a list.", "entry_point": "pos_count", "function_name": "def pos_count(list)", "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,-2,3,-4]) == 2\n    assert candidate([3,4,5,-1]) == 3\n    assert candidate([1,2,3,4]) == 4\n\n"}
{"task_id": "MBPP/0067", "prompt": "Write a function to find the number of ways to partition a set of bell numbers.", "entry_point": "bell_number", "function_name": "def bell_number(n)", "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2)==2\n    assert candidate(10)==115975\n    assert candidate(56)==6775685320645824322581483068371419745979053216268760300\n\n"}
{"task_id": "MBPP/0068", "prompt": "Write a python function to check whether the given array is monotonic or not.", "entry_point": "is_Monotonic", "function_name": "def is_Monotonic(A)", "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n\n"}
{"task_id": "MBPP/0069", "prompt": "Write a function to check whether a list contains the given sublist or not.", "entry_point": "is_sublist", "function_name": "def is_sublist(l, s)", "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2,4,3,5,7],[3,7])==False\n    assert candidate([2,4,3,5,7],[4,3])==True\n    assert candidate([2,4,3,5,7],[1,6])==False\n\n"}
{"task_id": "MBPP/0070", "prompt": "Write a function to find whether all the given tuples have equal length or not.", "entry_point": "find_equal_tuple", "function_name": "def find_equal_tuple(Input, k)", "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\n    assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'\n\n"}
{"task_id": "MBPP/0071", "prompt": "Write a function to sort a list of elements using comb sort.", "entry_point": "comb_sort", "function_name": "def comb_sort(nums)", "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]\n\n"}
{"task_id": "MBPP/0072", "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "entry_point": "dif_Square", "function_name": "def dif_Square(n)", "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == True\n    assert candidate(10) == False\n    assert candidate(15) == True\n\n"}
{"task_id": "MBPP/0073", "prompt": "Write a function to split the given string with multiple delimiters by using regex.", "entry_point": "multiple_split", "function_name": "def multiple_split(text)", "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert candidate('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n    assert candidate('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\n\n"}
{"task_id": "MBPP/0074", "prompt": "Write a function to check whether it follows the sequence given in the patterns array.", "entry_point": "is_samepatterns", "function_name": "def is_samepatterns(colors, patterns)", "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False \n\n"}
{"task_id": "MBPP/0075", "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "entry_point": "find_tuples", "function_name": "def find_tuples(test_list, K)", "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'\n\n"}
{"task_id": "MBPP/0076", "prompt": "Write a python function to count the number of squares in a rectangle.", "entry_point": "count_Squares", "function_name": "def count_Squares(m, n)", "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,3) == 20\n    assert candidate(2,2) == 5\n    assert candidate(1,1) == 1\n\n"}
{"task_id": "MBPP/0077", "prompt": "Write a python function to find the difference between sum of even and odd digits.", "entry_point": "is_Diff", "function_name": "def is_Diff(n)", "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate (12345) == False\n    assert candidate(1212112) == True\n    assert candidate(1212) == False\n\n"}
{"task_id": "MBPP/0078", "prompt": "Write a python function to find number of integers with odd number of set bits.", "entry_point": "count_With_Odd_SetBits", "function_name": "def count_With_Odd_SetBits(n)", "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == 3\n    assert candidate(10) == 5\n    assert candidate(15) == 8\n\n"}
{"task_id": "MBPP/0079", "prompt": "Write a python function to check whether the length of the word is odd or not.", "entry_point": "word_len", "function_name": "def word_len(s)", "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"Hadoop\") == False\n    assert candidate(\"great\") == True\n    assert candidate(\"structure\") == True\n\n"}
{"task_id": "MBPP/0080", "prompt": "Write a function to find the nth tetrahedral number.", "entry_point": "tetrahedral_number", "function_name": "def tetrahedral_number(n)", "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == 35.0\n    assert candidate(6) == 56.0\n    assert candidate(7) == 84.0\n\n"}
{"task_id": "MBPP/0081", "prompt": "Write a function to zip the two given tuples.", "entry_point": "zip_tuples", "function_name": "def zip_tuples(test_tup1, test_tup2)", "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    assert candidate((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n    assert candidate((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\n\n"}
{"task_id": "MBPP/0082", "prompt": "Write a function to find the volume of a sphere.", "entry_point": "volume_sphere", "function_name": "def volume_sphere(r)", "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==4188.790204786391\n    assert candidate(25)==65449.84694978735\n    assert candidate(20)==33510.32163829113\n\n"}
{"task_id": "MBPP/0083", "prompt": "Write a python function to find the character made by adding all the characters of the given string.", "entry_point": "get_Char", "function_name": "def get_Char(strr)", "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abc\") == \"f\"\n    assert candidate(\"gfg\") == \"t\"\n    assert candidate(\"ab\") == \"c\"\n\n"}
{"task_id": "MBPP/0084", "prompt": "Write a function to find the n-th number in newman conway sequence.", "entry_point": "sequence", "function_name": "def sequence(n)", "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 6\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n\n"}
{"task_id": "MBPP/0085", "prompt": "Write a function to find the surface area of a sphere.", "entry_point": "surfacearea_sphere", "function_name": "def surfacearea_sphere(r)", "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==1256.6370614359173\n    assert candidate(15)==2827.4333882308138\n    assert candidate(20)==5026.548245743669\n\n"}
{"task_id": "MBPP/0086", "prompt": "Write a function to find nth centered hexagonal number.", "entry_point": "centered_hexagonal_number", "function_name": "def centered_hexagonal_number(n)", "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n\n"}
{"task_id": "MBPP/0087", "prompt": "Write a function to merge three dictionaries into a single expression.", "entry_point": "merge_dictionaries_three", "function_name": "def merge_dictionaries_three(dict1, dict2, dict3)", "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n\n"}
{"task_id": "MBPP/0088", "prompt": "Write a function to get the frequency of the elements in a list.", "entry_point": "freq_count", "function_name": "def freq_count(list1)", "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n    assert candidate([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \n    assert candidate([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) \n\n"}
{"task_id": "MBPP/0089", "prompt": "Write a function to find the closest smaller number than n.", "entry_point": "closest_num", "function_name": "def closest_num(N)", "canonical_solution": "def closest_num(N):\r\n  return (N - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(11) == 10\n    assert candidate(7) == 6\n    assert candidate(12) == 11\n\n"}
{"task_id": "MBPP/0090", "prompt": "Write a python function to find the length of the longest word.", "entry_point": "len_log", "function_name": "def len_log(list1)", "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 3\n    assert candidate([\"small\",\"big\",\"tall\"]) == 5\n\n"}
{"task_id": "MBPP/0091", "prompt": "Write a function to check if a substring is present in a given list of string values.", "entry_point": "find_substring", "function_name": "def find_substring(str1, sub_str)", "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n\n"}
{"task_id": "MBPP/0092", "prompt": "Write a function to check whether the given number is undulating or not.", "entry_point": "is_undulating", "function_name": "def is_undulating(n)", "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"1212121\") == True\n    assert candidate(\"1991\") == False\n    assert candidate(\"121\") == True\n\n"}
{"task_id": "MBPP/0093", "prompt": "Write a function to calculate the value of 'a' to the power 'b'.", "entry_point": "power", "function_name": "def power(a, b)", "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3,4) == 81\n    assert candidate(2,3) == 8\n    assert candidate(5,5) == 3125\n\n"}
{"task_id": "MBPP/0094", "prompt": "Write a function to extract the index minimum value record from the given tuples.", "entry_point": "index_minimum", "function_name": "def index_minimum(test_list)", "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n\n"}
{"task_id": "MBPP/0095", "prompt": "Write a python function to find the minimum length of sublist.", "entry_point": "Find_Min_Length", "function_name": "def Find_Min_Length(lst)", "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1],[1,2]]) == 1\n    assert candidate([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert candidate([[3,3,3],[4,4,4,4]]) == 3\n\n"}
{"task_id": "MBPP/0096", "prompt": "Write a python function to find the number of divisors of a given integer.", "entry_point": "divisor", "function_name": "def divisor(n)", "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(15) == 4 \n    assert candidate(12) == 6\n    assert candidate(9) == 3\n\n"}
{"task_id": "MBPP/0097", "prompt": "Write a function to find frequency count of list of lists.", "entry_point": "frequency_lists", "function_name": "def frequency_lists(list1)", "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert candidate([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n\n"}
{"task_id": "MBPP/0098", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "entry_point": "multiply_num", "function_name": "def multiply_num(numbers)", "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((8, 2, 3, -1, 7))==-67.2\n    assert candidate((-10,-20,-30))==-2000.0\n    assert candidate((19,15,18))==1710.0\n\n"}
{"task_id": "MBPP/0099", "prompt": "Write a function to convert the given decimal number to its binary equivalent.", "entry_point": "decimal_to_binary", "function_name": "def decimal_to_binary(n)", "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111' \n\n"}
{"task_id": "MBPP/0100", "prompt": "Write a function to find the next smallest palindrome of a specified number.", "entry_point": "next_smallest_palindrome", "function_name": "def next_smallest_palindrome(num)", "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(99)==101\n    assert candidate(1221)==1331\n    assert candidate(120)==121\n\n"}
{"task_id": "MBPP/0101", "prompt": "Write a function to find the kth element in the given array.", "entry_point": "kth_element", "function_name": "def kth_element(arr, n, k)", "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([12,3,5,7,19], 5, 2) == 3\n    assert candidate([17,24,8,23], 4, 3) == 8\n    assert candidate([16,21,25,36,4], 5, 4) == 36\n\n"}
{"task_id": "MBPP/0102", "prompt": "Write a function to convert snake case string to camel case string.", "entry_point": "snake_to_camel", "function_name": "def snake_to_camel(word)", "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('python_program')=='PythonProgram'\n    assert candidate('python_language')==('PythonLanguage')\n    assert candidate('programming_language')==('ProgrammingLanguage')\n\n"}
{"task_id": "MBPP/0103", "prompt": "Write a function to find eulerian number a(n, m).", "entry_point": "eulerian_num", "function_name": "def eulerian_num(n, m)", "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 1) == 4\n    assert candidate(4, 1) == 11\n    assert candidate(5, 3) == 26\n\n"}
{"task_id": "MBPP/0104", "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "entry_point": "sort_sublists", "function_name": "def sort_sublists(input_list)", "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n\n"}
{"task_id": "MBPP/0105", "prompt": "Write a python function to count true booleans in the given list.", "entry_point": "count", "function_name": "def count(lst)", "canonical_solution": "def count(lst):   \r\n    return sum(lst) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([True,False,True]) == 2\n    assert candidate([False,False]) == 0\n    assert candidate([True,True,True]) == 3\n\n"}
{"task_id": "MBPP/0106", "prompt": "Write a function to add the given list to the given tuples.", "entry_point": "add_lists", "function_name": "def add_lists(test_list, test_tup)", "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n\n"}
{"task_id": "MBPP/0107", "prompt": "Write a python function to count hexadecimal numbers for a given range.", "entry_point": "count_Hexadecimal", "function_name": "def count_Hexadecimal(L, R)", "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,15) == 6\n    assert candidate(2,4) == 0\n    assert candidate(15,16) == 1\n\n"}
{"task_id": "MBPP/0108", "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "entry_point": "merge_sorted_list", "function_name": "def merge_sorted_list(num1, num2, num3)", "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n\n"}
{"task_id": "MBPP/0109", "prompt": "Write a python function to find the count of rotations of a binary string with odd value.", "entry_point": "odd_Equivalent", "function_name": "def odd_Equivalent(s, n)", "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"011001\",6) == 3\n    assert candidate(\"11011\",5) == 4\n    assert candidate(\"1010\",4) == 2\n\n"}
{"task_id": "MBPP/0110", "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "entry_point": "extract_missing", "function_name": "def extract_missing(test_list, strt_val, stop_val)", "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    assert candidate([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n    assert candidate([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]\n\n"}
{"task_id": "MBPP/0111", "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "entry_point": "common_in_nested_lists", "function_name": "def common_in_nested_lists(nestedlist)", "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n    assert candidate([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\n    assert candidate([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]\n\n"}
{"task_id": "MBPP/0112", "prompt": "Write a python function to find the perimeter of a cylinder.", "entry_point": "perimeter", "function_name": "def perimeter(diameter, height)", "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2,4) == 12\n    assert candidate(1,2) == 6\n    assert candidate(3,1) == 8\n\n"}
{"task_id": "MBPP/0113", "prompt": "Write a function to check if a string represents an integer or not.", "entry_point": "check_integer", "function_name": "def check_integer(text)", "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python\")==False\n    assert candidate(\"1\")==True\n    assert candidate(\"12345\")==True\n\n"}
{"task_id": "MBPP/0114", "prompt": "Write a function to assign frequency to each tuple in the given tuple list.", "entry_point": "assign_freq", "function_name": "def assign_freq(test_list)", "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    assert candidate([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\n    assert candidate([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'\n\n"}
{"task_id": "MBPP/0115", "prompt": "Write a function to check whether all dictionaries in a list are empty or not.", "entry_point": "empty_dit", "function_name": "def empty_dit(list1)", "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([{},{},{}])==True\n    assert candidate([{1,2},{},{}])==False\n    assert candidate({})==True\n\n"}
{"task_id": "MBPP/0116", "prompt": "Write a function to convert a given tuple of positive integers into an integer.", "entry_point": "tuple_to_int", "function_name": "def tuple_to_int(nums)", "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1,2,3))==123\n    assert candidate((4,5,6))==456\n    assert candidate((5,6,7))==567\n\n"}
{"task_id": "MBPP/0117", "prompt": "Write a function to convert all possible convertible elements in the list to float.", "entry_point": "list_to_float", "function_name": "def list_to_float(test_list)", "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n    assert candidate( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\n    assert candidate( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'\n\n"}
{"task_id": "MBPP/0118", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "entry_point": "string_to_list", "function_name": "def string_to_list(string)", "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python programming\")==['python','programming']\n    assert candidate(\"lists tuples strings\")==['lists','tuples','strings']\n    assert candidate(\"write a program\")==['write','a','program']\n\n"}
{"task_id": "MBPP/0119", "prompt": "Write a python function to find the element that appears only once in a sorted array.", "entry_point": "search", "function_name": "def search(arr, n)", "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,2,3],5) == 3\n    assert candidate([1,1,3,3,4,4,5,5,7,7,8],11) == 8\n    assert candidate([1,2,2,3,3,4,4],7) == 1\n\n"}
{"task_id": "MBPP/0120", "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.", "entry_point": "max_product_tuple", "function_name": "def max_product_tuple(list1)", "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    assert candidate([(10,20), (15,2), (5,10)] )==200\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==484\n\n"}
{"task_id": "MBPP/0121", "prompt": "Write a function to find the triplet with sum of the given array", "entry_point": "check_triplet", "function_name": "def check_triplet(A, n, sum, count)", "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n    assert candidate([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\n    assert candidate([10, 4, 2, 3, 5], 5, 15, 0) == True\n\n"}
{"task_id": "MBPP/0122", "prompt": "Write a function to find n\u2019th smart number.", "entry_point": "smartNumber", "function_name": "def smartNumber(n)", "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1) == 30\n    assert candidate(50) == 273\n    assert candidate(1000) == 2664\n\n"}
{"task_id": "MBPP/0123", "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.", "entry_point": "amicable_numbers_sum", "function_name": "def amicable_numbers_sum(limit)", "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(999)==504\n    assert candidate(9999)==31626\n    assert candidate(99)==0\n\n"}
{"task_id": "MBPP/0124", "prompt": "Write a function to get the angle of a complex number.", "entry_point": "angle_complex", "function_name": "def angle_complex(a, b)", "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0,1j)==1.5707963267948966 \n    assert candidate(2,1j)==0.4636476090008061\n    assert candidate(0,2j)==1.5707963267948966\n\n"}
{"task_id": "MBPP/0125", "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "entry_point": "find_length", "function_name": "def find_length(string, n)", "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"11000010001\", 11) == 6\n    assert candidate(\"10111\", 5) == 1\n    assert candidate(\"11011101100101\", 14) == 2 \n\n"}
{"task_id": "MBPP/0126", "prompt": "Write a python function to find the sum of common divisors of two given numbers.", "entry_point": "sum", "function_name": "def sum(a, b)", "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,15) == 6\n    assert candidate(100,150) == 93\n    assert candidate(4,6) == 3\n\n"}
{"task_id": "MBPP/0127", "prompt": "Write a function to multiply two integers without using the * operator in python.", "entry_point": "multiply_int", "function_name": "def multiply_int(x, y)", "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(5,10)==50\n    assert candidate(4,8)==32\n\n"}
{"task_id": "MBPP/0128", "prompt": "Write a function to shortlist words that are longer than n from a given list of words.", "entry_point": "long_words", "function_name": "def long_words(n, str)", "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3,\"python is a programming language\")==['python','programming','language']\n    assert candidate(2,\"writing a program\")==['writing','program']\n    assert candidate(5,\"sorting list\")==['sorting']\n\n"}
{"task_id": "MBPP/0129", "prompt": "Write a function to calculate magic square.", "entry_point": "magic_square_test", "function_name": "def magic_square_test(my_matrix)", "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n\n"}
{"task_id": "MBPP/0130", "prompt": "Write a function to find the item with maximum frequency in a given list.", "entry_point": "max_occurrences", "function_name": "def max_occurrences(nums)", "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n    assert candidate([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\n    assert candidate([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)\n\n"}
{"task_id": "MBPP/0131", "prompt": "Write a python function to reverse only the vowels of a given string.", "entry_point": "reverse_vowels", "function_name": "def reverse_vowels(str1)", "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"Python\") == \"Python\"\n    assert candidate(\"USA\") == \"ASU\"\n    assert candidate(\"ab\") == \"ab\"\n\n"}
{"task_id": "MBPP/0132", "prompt": "Write a function to convert tuple to a string.", "entry_point": "tup_string", "function_name": "def tup_string(tup1)", "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    assert candidate(('p','y','t','h','o','n'))==(\"python\")\n    assert candidate(('p','r','o','g','r','a','m'))==(\"program\")\n\n"}
{"task_id": "MBPP/0133", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "entry_point": "sum_negativenum", "function_name": "def sum_negativenum(nums)", "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert candidate([10,15,-14,13,-18,12,-20])==-52\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n\n"}
{"task_id": "MBPP/0134", "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.", "entry_point": "check_last", "function_name": "def check_last(arr, n, p)", "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([5,7,10],3,1) == \"ODD\"\n    assert candidate([2,3],2,3) == \"EVEN\"\n    assert candidate([1,2,3],3,1) == \"ODD\"\n\n"}
{"task_id": "MBPP/0135", "prompt": "Write a function to find the nth hexagonal number.", "entry_point": "hexagonal_num", "function_name": "def hexagonal_num(n)", "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 190\n    assert candidate(5) == 45\n    assert candidate(7) == 91\n\n"}
{"task_id": "MBPP/0136", "prompt": "Write a function to calculate electricity bill.", "entry_point": "cal_electbill", "function_name": "def cal_electbill(units)", "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(75)==246.25\n    assert candidate(265)==1442.75\n    assert candidate(100)==327.5\n\n"}
{"task_id": "MBPP/0137", "prompt": "Write a function to find the ration of zeroes in an array of integers.", "entry_point": "zero_count", "function_name": "def zero_count(nums)", "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00\n\n"}
{"task_id": "MBPP/0138", "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "entry_point": "is_Sum_Of_Powers_Of_Two", "function_name": "def is_Sum_Of_Powers_Of_Two(n)", "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == True\n    assert candidate(7) == False\n    assert candidate(14) == True\n\n"}
{"task_id": "MBPP/0139", "prompt": "Write a function to find the circumference of a circle.", "entry_point": "circle_circumference", "function_name": "def circle_circumference(r)", "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==62.830000000000005\n    assert candidate(5)==31.415000000000003\n    assert candidate(4)==25.132\n\n"}
{"task_id": "MBPP/0140", "prompt": "Write a function to extract elements that occur singly in the given tuple list.", "entry_point": "extract_singly", "function_name": "def extract_singly(test_list)", "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    assert candidate([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\n    assert candidate([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]\n\n"}
{"task_id": "MBPP/0141", "prompt": "Write a function to sort a list of elements using pancake sort.", "entry_point": "pancake_sort", "function_name": "def pancake_sort(nums)", "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\n"}
{"task_id": "MBPP/0142", "prompt": "Write a function to count the same pair in three given lists.", "entry_point": "count_samepair", "function_name": "def count_samepair(list1, list2, list3)", "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert candidate([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n\n"}
{"task_id": "MBPP/0143", "prompt": "Write a function to find number of lists present in the given tuple.", "entry_point": "find_lists", "function_name": "def find_lists(Input)", "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    assert candidate(([1, 2], [3, 4], [5, 6]))  == 3\n    assert candidate(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\n\n"}
{"task_id": "MBPP/0144", "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.", "entry_point": "sum_Pairs", "function_name": "def sum_Pairs(arr, n)", "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,8,9,15,16],5) == 74\n    assert candidate([1,2,3,4],4) == 10\n    assert candidate([1,2,3,4,5,7,9,11,14],9) == 188\n\n"}
{"task_id": "MBPP/0145", "prompt": "Write a python function to find the maximum difference between any two elements in a given array.", "entry_point": "max_Abs_Diff", "function_name": "def max_Abs_Diff(arr, n)", "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((2,1,5,3),4) == 4\n    assert candidate((9,3,2,5,1),5) == 8\n    assert candidate((3,2,1),3) == 2\n\n"}
{"task_id": "MBPP/0146", "prompt": "Write a function to find the ascii value of total characters in a string.", "entry_point": "ascii_value_string", "function_name": "def ascii_value_string(str1)", "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python\")==112\n    assert candidate(\"Program\")==80\n    assert candidate(\"Language\")==76\n\n"}
{"task_id": "MBPP/0147", "prompt": "Write a function to find the maximum total path sum in the given triangle.", "entry_point": "max_path_sum", "function_name": "def max_path_sum(tri, m, n)", "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n    assert candidate([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \n    assert candidate([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53\n\n"}
{"task_id": "MBPP/0148", "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "entry_point": "sum_digits_single", "function_name": "def sum_digits_single(x)", "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert sum_digits_twoparts(35)==17\n    assert sum_digits_twoparts(7)==7\n    assert sum_digits_twoparts(100)==19\n\n"}
{"task_id": "MBPP/0149", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "entry_point": "longest_subseq_with_diff_one", "function_name": "def longest_subseq_with_diff_one(arr, n)", "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 3, 2], 7) == 6\n    assert candidate([10, 9, 4, 5, 4, 8, 6], 7) == 3\n    assert candidate([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7\n\n"}
{"task_id": "MBPP/0150", "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.", "entry_point": "does_Contain_B", "function_name": "def does_Contain_B(a, b, c)", "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,7,3) == True\n    assert candidate(1,-3,5) == False\n    assert candidate(3,2,5) == False\n\n"}
{"task_id": "MBPP/0151", "prompt": "Write a python function to check whether the given number is co-prime or not.", "entry_point": "gcd", "function_name": "def gcd(p, q)", "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert is_coprime(17,13) == True\n    assert is_coprime(15,21) == False\n    assert is_coprime(25,45) == False\n\n"}
{"task_id": "MBPP/0152", "prompt": "Write a function to sort the given array by using merge sort.", "entry_point": "merge", "function_name": "def merge(a, b)", "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n    assert candidate_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\n    assert candidate_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]\n\n"}
{"task_id": "MBPP/0153", "prompt": "Write a function to find the vertex of a parabola.", "entry_point": "parabola_vertex", "function_name": "def parabola_vertex(a, b, c)", "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,3,2)==(-0.3, 1.55)\n    assert candidate(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\n    assert candidate(2,4,6)==(-1.0, 4.0)\n\n"}
{"task_id": "MBPP/0154", "prompt": "Write a function to extract every specified element from a given two dimensional list.", "entry_point": "specified_element", "function_name": "def specified_element(nums, N)", "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]\n\n"}
{"task_id": "MBPP/0155", "prompt": "Write a python function to toggle all even bits of a given number.", "entry_point": "even_bit_toggle_number", "function_name": "def even_bit_toggle_number(n)", "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 0\n    assert candidate(20) == 30\n    assert candidate(30) == 20\n\n"}
{"task_id": "MBPP/0156", "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.", "entry_point": "tuple_int_str", "function_name": "def tuple_int_str(tuple_str)", "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n    assert candidate((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\n    assert candidate((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))\n\n"}
{"task_id": "MBPP/0157", "prompt": "Write a function to reflect the run-length encoding from a list.", "entry_point": "encode_list", "function_name": "def encode_list(list1)", "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    assert candidate('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n    assert candidate('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\n\n"}
{"task_id": "MBPP/0158", "prompt": "Write a python function to find k number of operations required to make all elements equal.", "entry_point": "min_Ops", "function_name": "def min_Ops(arr, n, k)", "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2,2,2,2],4,3) == 0\n    assert candidate([4,2,6,8],4,3) == -1\n    assert candidate([21,33,9,45,63],5,6) == 24\n\n"}
{"task_id": "MBPP/0159", "prompt": "Write a function to print the season for the given month and day.", "entry_point": "month_season", "function_name": "def month_season(month, days)", "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('January',4)==('winter')\n    assert candidate('October',28)==('autumn')\n    assert candidate('June',6)==('spring')\n\n"}
{"task_id": "MBPP/0160", "prompt": "Write a function to find x and y that satisfies ax + by = n.", "entry_point": "solution", "function_name": "def solution(a, b, n)", "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n    assert candidate(4, 2, 7) == 'No candidate'\n    assert candidate(1, 13, 17) == ('x = ', 4, ', y = ', 1)\n\n"}
{"task_id": "MBPP/0161", "prompt": "Write a function to remove all elements from a given list present in another list.", "entry_point": "remove_elements", "function_name": "def remove_elements(list1, list2)", "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]\n\n"}
{"task_id": "MBPP/0162", "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "entry_point": "sum_series", "function_name": "def sum_series(n)", "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(6)==12\n    assert candidate(10)==30\n    assert candidate(9)==25\n\n"}
{"task_id": "MBPP/0163", "prompt": "Write a function to calculate the area of a regular polygon.", "entry_point": "area_polygon", "function_name": "def area_polygon(s, l)", "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,20)==400.00000000000006\n    assert candidate(10,15)==1731.1969896610804\n    assert candidate(9,7)==302.90938549487214\n\n"}
{"task_id": "MBPP/0164", "prompt": "Write a python function to check whether the sum of divisors are same or not.", "entry_point": "divSum", "function_name": "def divSum(n)", "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert areEquivalent(36,57) == False\n    assert areEquivalent(2,4) == False\n    assert areEquivalent(23,47) == True\n\n"}
{"task_id": "MBPP/0165", "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "entry_point": "count_char_position", "function_name": "def count_char_position(str1)", "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"xbcefg\") == 2\n    assert candidate(\"ABcED\") == 3\n    assert candidate(\"AbgdeF\") == 5\n\n"}
{"task_id": "MBPP/0166", "prompt": "Write a python function to count the pairs with xor as an even number.", "entry_point": "find_even_Pair", "function_name": "def find_even_Pair(A, N)", "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([5,4,7,2,1],5) == 4\n    assert candidate([7,2,8,1,0,5,11],7) == 9\n    assert candidate([1,2,3],3) == 1\n\n"}
{"task_id": "MBPP/0167", "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.", "entry_point": "next_Power_Of_2", "function_name": "def next_Power_Of_2(n)", "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == 1\n    assert candidate(5) == 8\n    assert candidate(17) == 32\n\n"}
{"task_id": "MBPP/0168", "prompt": "Write a python function to find the frequency of a number in a given array.", "entry_point": "frequency", "function_name": "def frequency(a, x)", "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3],4) == 0\n    assert candidate([1,2,2,3,3,3,4],3) == 3\n    assert candidate([0,1,2,3,1,2],1) == 2\n\n"}
{"task_id": "MBPP/0169", "prompt": "Write a function to calculate the nth pell number.", "entry_point": "get_pell", "function_name": "def get_pell(n)", "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4) == 12\n    assert candidate(7) == 169\n    assert candidate(8) == 408\n\n"}
{"task_id": "MBPP/0170", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "entry_point": "sum_range_list", "function_name": "def sum_range_list(list1, m, n)", "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\n    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38\n\n"}
{"task_id": "MBPP/0171", "prompt": "Write a function to find the perimeter of a pentagon.", "entry_point": "perimeter_pentagon", "function_name": "def perimeter_pentagon(a)", "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5)==25\n    assert candidate(10)==50\n    assert candidate(15)==75\n\n"}
{"task_id": "MBPP/0172", "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "entry_point": "count_occurance", "function_name": "def count_occurance(s)", "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"letstdlenstdporstd\") == 3\n    assert candidate(\"truststdsolensporsd\") == 1\n    assert candidate(\"makestdsostdworthit\") == 2\n\n"}
{"task_id": "MBPP/0173", "prompt": "Write a function to remove everything except alphanumeric characters from a string.", "entry_point": "remove_splchar", "function_name": "def remove_splchar(text)", "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('python  @#&^%$*program123')==('pythonprogram123')\n    assert candidate('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\n    assert candidate('python   ^%&^()(+_)(_^&67)                  program')==('python67program')\n\n"}
{"task_id": "MBPP/0174", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "entry_point": "group_keyvalue", "function_name": "def group_keyvalue(l)", "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    assert candidate([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\n    assert candidate([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}\n\n"}
{"task_id": "MBPP/0175", "prompt": "Write a function to verify validity of a string of parentheses.", "entry_point": "is_valid_parenthese", "function_name": "def is_valid_parenthese(str1)", "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"(){}[]\")==True\n    assert candidate(\"()[{)}\")==False\n    assert candidate(\"()\")==True\n\n"}
{"task_id": "MBPP/0176", "prompt": "Write a function to find the perimeter of a triangle.", "entry_point": "perimeter_triangle", "function_name": "def perimeter_triangle(a, b, c)", "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20,30)==60\n    assert candidate(3,4,5)==12\n    assert candidate(25,35,45)==105\n\n"}
{"task_id": "MBPP/0177", "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.", "entry_point": "answer", "function_name": "def answer(L, R)", "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3,8) == (3,6)\n    assert candidate(2,6) == (2,4)\n    assert candidate(1,3) == (1,2)\n\n"}
{"task_id": "MBPP/0178", "prompt": "Write a function to search some literals strings in a string.", "entry_point": "string_literals", "function_name": "def string_literals(patterns, text)", "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['language'],'python language')==('Matched!')\n    assert candidate(['program'],'python language')==('Not Matched!')\n    assert candidate(['python'],'programming language')==('Not Matched!')\n\n"}
{"task_id": "MBPP/0179", "prompt": "Write a function to find if the given number is a keith number or not.", "entry_point": "is_num_keith", "function_name": "def is_num_keith(x)", "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(14) == True\n    assert candidate(12) == False\n    assert candidate(197) == True\n\n"}
{"task_id": "MBPP/0180", "prompt": "Write a function to calculate distance between two points using latitude and longitude.", "entry_point": "distance_lat_long", "function_name": "def distance_lat_long(slat, slon, elat, elon)", "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(23.5,67.5,25.5,69.5)==12179.372041317429\n    assert candidate(10.5,20.5,30.5,40.5)==6069.397933300514\n    assert candidate(10,20,30,40)==6783.751974994595\n\n"}
{"task_id": "MBPP/0181", "prompt": "Write a function to find the longest common prefix in the given set of strings.", "entry_point": "common_prefix_util", "function_name": "def common_prefix_util(str1, str2)", "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n    assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\n    assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'\n\n"}
{"task_id": "MBPP/0182", "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "entry_point": "find_character", "function_name": "def find_character(string)", "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n    assert candidate(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n    assert candidate(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])\n\n"}
{"task_id": "MBPP/0183", "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.", "entry_point": "count_pairs", "function_name": "def count_pairs(arr, n, k)", "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 5, 3, 4, 2], 5, 3) == 2\n    assert candidate([8, 12, 16, 4, 0, 20], 6, 4) == 5\n    assert candidate([2, 4, 1, 3, 4], 5, 2) == 3\n\n"}
{"task_id": "MBPP/0184", "prompt": "Write a function to find all the values in a list that are greater than a specified number.", "entry_point": "greater_specificnum", "function_name": "def greater_specificnum(list, num)", "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([220, 330, 500],200)==True\n    assert candidate([12, 17, 21],20)==False\n    assert candidate([1,2,3,4],10)==False\n\n"}
{"task_id": "MBPP/0185", "prompt": "Write a function to find the focus of a parabola.", "entry_point": "parabola_focus", "function_name": "def parabola_focus(a, b, c)", "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,3,2)==(-0.3, 1.6)\n    assert candidate(9,8,4)==(-0.4444444444444444, 2.25)\n    assert candidate(2,4,6)==(-1.0, 4.125)\n\n"}
{"task_id": "MBPP/0186", "prompt": "Write a function to search some literals strings in a string by using regex.", "entry_point": "check_literals", "function_name": "def check_literals(text, patterns)", "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n    assert candidate('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\n    assert candidate('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'\n\n"}
{"task_id": "MBPP/0187", "prompt": "Write a function to find the longest common subsequence for the given two sequences.", "entry_point": "longest_common_subsequence", "function_name": "def longest_common_subsequence(X, Y, m, n)", "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n    assert candidate(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\n    assert candidate(\"AXYT\" , \"AYZX\", 4, 4) == 2\n\n"}
{"task_id": "MBPP/0188", "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.", "entry_point": "prod_Square", "function_name": "def prod_Square(n)", "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(25) == False\n    assert candidate(30) == False\n    assert candidate(16) == True\n\n"}
{"task_id": "MBPP/0189", "prompt": "Write a python function to find the first missing positive number.", "entry_point": "first_Missing_Positive", "function_name": "def first_Missing_Positive(arr, n)", "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,-1,5],5) == 4\n    assert candidate([0,-1,-2,1,5,8],6) == 2\n    assert candidate([0,1,2,5,-8],5) == 3\n\n"}
{"task_id": "MBPP/0190", "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.", "entry_point": "count_Intgral_Points", "function_name": "def count_Intgral_Points(x1, y1, x2, y2)", "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,1,4,4) == 4\n    assert candidate(1,2,1,2) == 1\n    assert candidate(4,2,6,4) == 1\n\n"}
{"task_id": "MBPP/0191", "prompt": "Write a function to check whether the given month name contains 30 days or not.", "entry_point": "check_monthnumber", "function_name": "def check_monthnumber(monthname3)", "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"February\")==False\n    assert candidate(\"June\")==True\n    assert candidate(\"April\")==True\n\n"}
{"task_id": "MBPP/0192", "prompt": "Write a python function to check whether a string has atleast one letter and one number.", "entry_point": "check_String", "function_name": "def check_String(str)", "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('thishasboth29') == True\n    assert candidate('python') == False\n    assert candidate ('string') == False\n\n"}
{"task_id": "MBPP/0193", "prompt": "Write a function to remove the duplicates from the given tuple.", "entry_point": "remove_tuple", "function_name": "def remove_tuple(test_tup)", "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\n    assert candidate((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)\n\n"}
{"task_id": "MBPP/0194", "prompt": "Write a python function to convert octal number to decimal number.", "entry_point": "octal_To_Decimal", "function_name": "def octal_To_Decimal(n)", "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(25) == 21\n    assert candidate(30) == 24\n    assert candidate(40) == 32\n\n"}
{"task_id": "MBPP/0195", "prompt": "Write a python function to find the first position of an element in a sorted array.", "entry_point": "first", "function_name": "def first(arr, x, n)", "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,6],6,6) == 5\n    assert candidate([1,2,2,2,3,2,2,4,2],2,9) == 1\n    assert candidate([1,2,3],1,3) == 0\n\n"}
{"task_id": "MBPP/0196", "prompt": "Write a function to remove all the tuples with length k.", "entry_point": "remove_tuples", "function_name": "def remove_tuples(test_list, K)", "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert candidate([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\n    assert candidate([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]\n\n"}
{"task_id": "MBPP/0197", "prompt": "Write a function to perform the exponentiation of the given two tuples.", "entry_point": "find_exponentio", "function_name": "def find_exponentio(test_tup1, test_tup2)", "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)\n\n"}
{"task_id": "MBPP/0198", "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "entry_point": "largest_triangle", "function_name": "def largest_triangle(a, b)", "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,2)==10.392304845413264\n    assert candidate(5,7)==4.639421805988064\n    assert candidate(9,1)==105.2220865598093\n\n"}
{"task_id": "MBPP/0199", "prompt": "Write a python function to find highest power of 2 less than or equal to given number.", "entry_point": "highest_Power_of_2", "function_name": "def highest_Power_of_2(n)", "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n\n"}
{"task_id": "MBPP/0200", "prompt": "Write a function to find all index positions of the maximum values in a given list.", "entry_point": "position_max", "function_name": "def position_max(list1)", "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==[11]\n\n"}
{"task_id": "MBPP/0201", "prompt": "Write a python function to check whether the elements in a list are same or not.", "entry_point": "chkList", "function_name": "def chkList(lst)", "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['one','one','one']) == True\n    assert candidate(['one','Two','Three']) == False\n    assert candidate(['bigdata','python','Django']) == False\n\n"}
{"task_id": "MBPP/0202", "prompt": "Write a function to remove even characters in a string.", "entry_point": "remove_even", "function_name": "def remove_even(str1)", "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python\")==(\"pto\")\n    assert candidate(\"program\")==(\"porm\")\n    assert candidate(\"language\")==(\"lnug\")\n\n"}
{"task_id": "MBPP/0203", "prompt": "Write a python function to find the hamming distance between given two integers.", "entry_point": "hamming_Distance", "function_name": "def hamming_Distance(n1, n2)", "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,8) == 2\n    assert candidate(2,4) == 2\n    assert candidate(1,2) == 2\n\n"}
{"task_id": "MBPP/0204", "prompt": "Write a python function to count the occurrence of a given character in a string.", "entry_point": "count", "function_name": "def count(s, c)", "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abcc\",\"c\") == 2\n    assert candidate(\"ababca\",\"a\") == 3\n    assert candidate(\"mnmm0pm\",\"m\") == 4\n\n"}
{"task_id": "MBPP/0205", "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.", "entry_point": "inversion_elements", "function_name": "def inversion_elements(test_tup)", "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n    assert candidate((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\n    assert candidate((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)\n\n"}
{"task_id": "MBPP/0206", "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.", "entry_point": "concatenate_elements", "function_name": "def concatenate_elements(test_tup)", "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert candidate((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n    assert candidate((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')\n\n"}
{"task_id": "MBPP/0207", "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "entry_point": "find_longest_repeating_subseq", "function_name": "def find_longest_repeating_subseq(str)", "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"AABEBCDD\") == 3\n    assert candidate(\"aabb\") == 2\n    assert candidate(\"aab\") == 1\n\n"}
{"task_id": "MBPP/0208", "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.", "entry_point": "is_decimal", "function_name": "def is_decimal(num)", "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('123.11') == True\n    assert candidate('0.21') == True\n    assert candidate('123.1214') == False\n\n"}
{"task_id": "MBPP/0209", "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.", "entry_point": "heap_replace", "function_name": "def heap_replace(heap, a)", "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n    assert candidate([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\n    assert candidate([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]\n\n"}
{"task_id": "MBPP/0210", "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "entry_point": "is_allowed_specific_char", "function_name": "def is_allowed_specific_char(string)", "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"ABCDEFabcdef123450\") == True\n    assert candidate(\"*&%@#!}{\") == False\n    assert candidate(\"HELLOhowareyou98765\") == True\n\n"}
{"task_id": "MBPP/0211", "prompt": "Write a python function to count numbers whose oth and nth bits are set.", "entry_point": "count_Num", "function_name": "def count_Num(n)", "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n    assert candidate(1) == 1\n\n"}
{"task_id": "MBPP/0212", "prompt": "Write a python function to find the sum of fourth power of n natural numbers.", "entry_point": "fourth_Power_Sum", "function_name": "def fourth_Power_Sum(n)", "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 17\n    assert candidate(4) == 354\n    assert candidate(6) == 2275\n\n"}
{"task_id": "MBPP/0213", "prompt": "Write a function to perform the concatenation of two string tuples.", "entry_point": "concatenate_strings", "function_name": "def concatenate_strings(test_tup1, test_tup2)", "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    assert candidate((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n    assert candidate((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')\n\n"}
{"task_id": "MBPP/0214", "prompt": "Write a function to convert radians to degrees.", "entry_point": "degree_radian", "function_name": "def degree_radian(radian)", "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(90)==5156.620156177409\n    assert candidate(60)==3437.746770784939\n    assert candidate(120)==6875.493541569878\n\n"}
{"task_id": "MBPP/0215", "prompt": "Write a function to decode a run-length encoded given list.", "entry_point": "decode_list", "function_name": "def decode_list(alist)", "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n    assert candidate(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']\n\n"}
{"task_id": "MBPP/0216", "prompt": "Write a function to check if a nested list is a subset of another nested list.", "entry_point": "check_subset_list", "function_name": "def check_subset_list(list1, list2)", "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n    assert candidate([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\n    assert candidate([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False\n\n"}
{"task_id": "MBPP/0217", "prompt": "Write a python function to find the first repeated character in a given string.", "entry_point": "first_Repeated_Char", "function_name": "def first_Repeated_Char(str)", "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"Google\") == \"o\"\n    assert candidate(\"data\") == \"a\"\n    assert candidate(\"python\") == '\\0'\n\n"}
{"task_id": "MBPP/0218", "prompt": "Write a python function to find the minimum operations required to make two numbers equal.", "entry_point": "min_Operations", "function_name": "def min_Operations(A, B)", "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2,4) == 1\n    assert candidate(4,10) == 4\n    assert candidate(1,4) == 3\n\n"}
{"task_id": "MBPP/0219", "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.", "entry_point": "extract_min_max", "function_name": "def extract_min_max(test_tup, K)", "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n    assert candidate((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\n    assert candidate((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)\n\n"}
{"task_id": "MBPP/0220", "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "entry_point": "replace_max_specialchar", "function_name": "def replace_max_specialchar(text, n)", "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('Python language, Programming language.',2)==('Python:language: Programming language.')\n    assert candidate('a b c,d e f',3)==('a:b:c:d e f')\n    assert candidate('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')\n\n"}
{"task_id": "MBPP/0221", "prompt": "Write a python function to find the first even number in a given list of numbers.", "entry_point": "first_even", "function_name": "def first_even(nums)", "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    assert candidate([2, 3, 4]) == 2\n    assert candidate([5, 6, 7]) == 6\n\n"}
{"task_id": "MBPP/0222", "prompt": "Write a function to check if all the elements in tuple have same data type or not.", "entry_point": "check_type", "function_name": "def check_type(test_tuple)", "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6) ) == True\n    assert candidate((1, 2, \"4\") ) == False\n    assert candidate((3, 2, 1, 4, 5) ) == True\n\n"}
{"task_id": "MBPP/0223", "prompt": "Write a function to check for majority element in the given sorted array.", "entry_point": "is_majority", "function_name": "def is_majority(arr, n, x)", "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n\n"}
{"task_id": "MBPP/0224", "prompt": "Write a python function to count set bits of a given number.", "entry_point": "count_Set_Bits", "function_name": "def count_Set_Bits(n)", "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 1\n    assert candidate(6) == 2\n\n"}
{"task_id": "MBPP/0225", "prompt": "Write a python function to find the minimum element in a sorted and rotated array.", "entry_point": "find_Min", "function_name": "def find_Min(arr, low, high)", "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],0,4) == 1\n    assert candidate([4,6,8],0,2) == 4\n    assert candidate([2,3,5,7,9],0,4) == 2\n\n"}
{"task_id": "MBPP/0226", "prompt": "Write a python function to remove the characters which have odd index values of a given string.", "entry_point": "odd_values_string", "function_name": "def odd_values_string(str)", "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('abcdef') == 'ace'\n    assert candidate('python') == 'pto'\n    assert candidate('data') == 'dt'\n\n"}
{"task_id": "MBPP/0227", "prompt": "Write a function to find minimum of three numbers.", "entry_point": "min_of_three", "function_name": "def min_of_three(a, b, c)", "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20,0)==0\n    assert candidate(19,15,18)==15\n    assert candidate(-10,-20,-30)==-30\n\n"}
{"task_id": "MBPP/0228", "prompt": "Write a python function to check whether all the bits are unset in the given range or not.", "entry_point": "all_Bits_Set_In_The_Given_Range", "function_name": "def all_Bits_Set_In_The_Given_Range(n, l, r)", "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,1,2) == True\n    assert candidate(17,2,4) == True\n    assert candidate(39,4,6) == False\n\n"}
{"task_id": "MBPP/0229", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "entry_point": "re_arrange_array", "function_name": "def re_arrange_array(arr, n)", "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert candidate([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n    assert candidate([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n\n"}
{"task_id": "MBPP/0230", "prompt": "Write a function to replace blank spaces with any character in a string.", "entry_point": "replace_blank", "function_name": "def replace_blank(str1, char)", "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"hello people\",'@')==(\"hello@people\")\n    assert candidate(\"python program language\",'$')==(\"python$program$language\")\n    assert candidate(\"blank space\",\"-\")==(\"blank-space\")\n\n"}
{"task_id": "MBPP/0231", "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.", "entry_point": "max_sum", "function_name": "def max_sum(tri, n)", "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1], [2,1], [3,3,2]], 3) == 6\n    assert candidate([[1], [1, 2], [4, 1, 12]], 3) == 15 \n    assert candidate([[2], [3,2], [13,23,12]], 3) == 28\n\n"}
{"task_id": "MBPP/0232", "prompt": "Write a function to get the n largest items from a dataset.", "entry_point": "larg_nnum", "function_name": "def larg_nnum(list1, n)", "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]\n\n"}
{"task_id": "MBPP/0233", "prompt": "Write a function to find the lateral surface area of a cylinder.", "entry_point": "lateralsuface_cylinder", "function_name": "def lateralsuface_cylinder(r, h)", "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,5)==314.15000000000003\n    assert candidate(4,5)==125.66000000000001\n    assert candidate(4,10)==251.32000000000002\n\n"}
{"task_id": "MBPP/0234", "prompt": "Write a function to find the volume of a cube.", "entry_point": "volume_cube", "function_name": "def volume_cube(l)", "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3)==27\n    assert candidate(2)==8\n    assert candidate(5)==125\n\n"}
{"task_id": "MBPP/0235", "prompt": "Write a python function to set all even bits of a given number.", "entry_point": "even_bit_set_number", "function_name": "def even_bit_set_number(n)", "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 10\n    assert candidate(20) == 30\n    assert candidate(30) == 30\n\n"}
{"task_id": "MBPP/0236", "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "entry_point": "No_of_Triangle", "function_name": "def No_of_Triangle(N, K)", "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,2) == 7\n    assert candidate(4,3) == 3\n    assert candidate(1,3) == -1\n\n"}
{"task_id": "MBPP/0237", "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "entry_point": "check_occurences", "function_name": "def check_occurences(test_list)", "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n\n"}
{"task_id": "MBPP/0238", "prompt": "Write a python function to count number of non-empty substrings of a given string.", "entry_point": "number_of_substrings", "function_name": "def number_of_substrings(str)", "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abc\") == 6\n    assert candidate(\"abcd\") == 10\n    assert candidate(\"abcde\") == 15\n\n"}
{"task_id": "MBPP/0239", "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "entry_point": "get_total_number_of_sequences", "function_name": "def get_total_number_of_sequences(m, n)", "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10, 4) == 4\n    assert candidate(5, 2) == 6\n    assert candidate(16, 3) == 84\n\n"}
{"task_id": "MBPP/0240", "prompt": "Write a function to replace the last element of the list with another list.", "entry_point": "replace_list", "function_name": "def replace_list(list1, list2)", "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert candidate([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n    assert candidate([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n\n"}
{"task_id": "MBPP/0241", "prompt": "Write a function to generate a 3d array having each element as '*'.", "entry_point": "array_3d", "function_name": "def array_3d(m, n, o)", "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n    assert candidate(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\n    assert candidate(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]\n\n"}
{"task_id": "MBPP/0242", "prompt": "Write a function to count total characters in a string.", "entry_point": "count_charac", "function_name": "def count_charac(str1)", "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python programming\")==18\n    assert candidate(\"language\")==8\n    assert candidate(\"words\")==5\n\n"}
{"task_id": "MBPP/0243", "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.", "entry_point": "sort_on_occurence", "function_name": "def sort_on_occurence(lst)", "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    assert candidate([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n    assert candidate([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\n\n"}
{"task_id": "MBPP/0244", "prompt": "Write a python function to find the next perfect square greater than a given number.", "entry_point": "next_Perfect_Square", "function_name": "def next_Perfect_Square(N)", "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(35) == 36\n    assert candidate(6) == 9\n    assert candidate(9) == 16\n\n"}
{"task_id": "MBPP/0245", "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "entry_point": "max_sum", "function_name": "def max_sum(arr, n)", "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n    assert candidate([80, 60, 30, 40, 20, 10], 6) == 210\n    assert candidate([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138\n\n"}
{"task_id": "MBPP/0246", "prompt": "Write a function for computing square roots using the babylonian method.", "entry_point": "babylonian_squareroot", "function_name": "def babylonian_squareroot(number)", "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==3.162277660168379\n    assert candidate(2)==1.414213562373095\n    assert candidate(9)==3.0\n\n"}
{"task_id": "MBPP/0247", "prompt": "Write a function to find the longest palindromic subsequence in the given string.", "entry_point": "lps", "function_name": "def lps(str)", "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"TENS FOR TENS\") == 5 \n    assert candidate(\"CARDIO FOR CARDS\") == 7\n    assert candidate(\"PART OF THE JOURNEY IS PART\") == 9 \n\n"}
{"task_id": "MBPP/0248", "prompt": "Write a function to calculate the harmonic sum of n-1.", "entry_point": "harmonic_sum", "function_name": "def harmonic_sum(n)", "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(7) == 2.5928571428571425\n    assert candidate(4) == 2.083333333333333\n    assert candidate(19) == 3.547739657143682\n\n"}
{"task_id": "MBPP/0249", "prompt": "Write a function to find the intersection of two arrays using lambda function.", "entry_point": "intersection_array", "function_name": "def intersection_array(array_nums1, array_nums2)", "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]\n\n"}
{"task_id": "MBPP/0250", "prompt": "Write a python function to count the occcurences of an element in a tuple.", "entry_point": "count_X", "function_name": "def count_X(tup, x)", "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n\n"}
{"task_id": "MBPP/0251", "prompt": "Write a function to insert an element before each element of a list.", "entry_point": "insert_element", "function_name": "def insert_element(list, element)", "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n    assert candidate(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \n    assert candidate(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] \n\n"}
{"task_id": "MBPP/0252", "prompt": "Write a python function to convert complex numbers to polar coordinates.", "entry_point": "convert", "function_name": "def convert(numbers)", "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0,0.0)\n    assert candidate(5) == (5.0,0.0)\n\n"}
{"task_id": "MBPP/0253", "prompt": "Write a python function to count integers from a given list.", "entry_point": "count_integer", "function_name": "def count_integer(list1)", "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,'abc',1.2]) == 2\n    assert candidate([1,2,3]) == 3\n    assert candidate([1,1.2,4,5.1]) == 2\n\n"}
{"task_id": "MBPP/0254", "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.", "entry_point": "words_ae", "function_name": "def words_ae(text)", "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python programe\")==['ame']\n    assert candidate(\"python programe language\")==['ame','anguage']\n    assert candidate(\"assert statement\")==['assert', 'atement']\n\n"}
{"task_id": "MBPP/0255", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "entry_point": "combinations_colors", "function_name": "def combinations_colors(l, n)", "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n\n"}
{"task_id": "MBPP/0256", "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.", "entry_point": "count_Primes_nums", "function_name": "def count_Primes_nums(n)", "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n\n"}
{"task_id": "MBPP/0257", "prompt": "Write a function to swap two numbers.", "entry_point": "swap_numbers", "function_name": "def swap_numbers(a, b)", "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20)==(20,10)\n    assert candidate(15,17)==(17,15)\n    assert candidate(100,200)==(200,100)\n\n"}
{"task_id": "MBPP/0258", "prompt": "Write a function to find number of odd elements in the given list using lambda function.", "entry_point": "count_odd", "function_name": "def count_odd(array_nums)", "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 10])==4\n    assert candidate([10,15,14,13,-18,12,-20])==2\n    assert candidate([1, 2, 4, 8, 9])==2\n\n"}
{"task_id": "MBPP/0259", "prompt": "Write a function to maximize the given two tuples.", "entry_point": "maximize_elements", "function_name": "def maximize_elements(test_tup1, test_tup2)", "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n\n"}
{"task_id": "MBPP/0260", "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "entry_point": "newman_prime", "function_name": "def newman_prime(n)", "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 7 \n    assert candidate(4) == 17\n    assert candidate(5) == 41\n\n"}
{"task_id": "MBPP/0261", "prompt": "Write a function to perform mathematical division operation across the given tuples.", "entry_point": "division_elements", "function_name": "def division_elements(test_tup1, test_tup2)", "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert candidate((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n\n"}
{"task_id": "MBPP/0262", "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "entry_point": "split_two_parts", "function_name": "def split_two_parts(list1, L)", "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n\n"}
{"task_id": "MBPP/0263", "prompt": "Write a function to merge two dictionaries.", "entry_point": "merge_dict", "function_name": "def merge_dict(d1, d2)", "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n    assert candidate({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\n    assert candidate({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}\n\n"}
{"task_id": "MBPP/0264", "prompt": "Write a function to calculate a dog's age in dog's years.", "entry_point": "dog_age", "function_name": "def dog_age(h_age)", "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12)==61\n    assert candidate(15)==73\n    assert candidate(24)==109\n\n"}
{"task_id": "MBPP/0265", "prompt": "Write a function to split a list for every nth element.", "entry_point": "list_split", "function_name": "def list_split(S, step)", "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n    assert candidate([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \n    assert candidate(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] \n\n"}
{"task_id": "MBPP/0266", "prompt": "Write a function to find the lateral surface area of a cube.", "entry_point": "lateralsurface_cube", "function_name": "def lateralsurface_cube(l)", "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5)==100\n    assert candidate(9)==324\n    assert candidate(10)==400\n\n"}
{"task_id": "MBPP/0267", "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.", "entry_point": "square_Sum", "function_name": "def square_Sum(n)", "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 10\n    assert candidate(3) == 35\n    assert candidate(4) == 84\n\n"}
{"task_id": "MBPP/0268", "prompt": "Write a function to find the n'th star number.", "entry_point": "find_star_num", "function_name": "def find_star_num(n)", "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 37\n    assert candidate(4) == 73\n    assert candidate(5) == 121\n\n"}
{"task_id": "MBPP/0269", "prompt": "Write a function to find the ascii value of a character.", "entry_point": "ascii_value", "function_name": "def ascii_value(k)", "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('A')==65\n    assert candidate('R')==82\n    assert candidate('S')==83\n\n"}
{"task_id": "MBPP/0270", "prompt": "Write a python function to find the sum of even numbers at even positions.", "entry_point": "sum_even_and_even_index", "function_name": "def sum_even_and_even_index(arr, n)", "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8],6) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\n    assert candidate([5, 6, 12, 1],4) == 12\n\n"}
{"task_id": "MBPP/0271", "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.", "entry_point": "even_Power_Sum", "function_name": "def even_Power_Sum(n)", "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 1056\n    assert candidate(3) == 8832\n    assert candidate(1) == 32\n\n"}
{"task_id": "MBPP/0272", "prompt": "Write a function to perfom the rear element extraction from list of tuples records.", "entry_point": "rear_extract", "function_name": "def rear_extract(test_list)", "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n\n"}
{"task_id": "MBPP/0273", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "entry_point": "substract_elements", "function_name": "def substract_elements(test_tup1, test_tup2)", "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\n"}
{"task_id": "MBPP/0274", "prompt": "Write a python function to find sum of even index binomial coefficients.", "entry_point": "even_binomial_Coeff_Sum", "function_name": "def even_binomial_Coeff_Sum(n)", "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4) == 8\n    assert candidate(6) == 32\n    assert candidate(2) == 2\n\n"}
{"task_id": "MBPP/0275", "prompt": "Write a python function to find the position of the last removed element from the given array.", "entry_point": "get_Position", "function_name": "def get_Position(a, n, m)", "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2,5,4],3,2) == 2\n    assert candidate([4,3],2,2) == 2\n    assert candidate([1,2,3,4],4,1) == 4\n\n"}
{"task_id": "MBPP/0276", "prompt": "Write a function to find the volume of a cylinder.", "entry_point": "volume_cylinder", "function_name": "def volume_cylinder(r, h)", "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,5)==1570.7500000000002\n    assert candidate(4,5)==251.32000000000002\n    assert candidate(4,10)==502.64000000000004\n\n"}
{"task_id": "MBPP/0277", "prompt": "Write a function to filter a dictionary based on values.", "entry_point": "dict_filter", "function_name": "def dict_filter(dict, n)", "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n\n"}
{"task_id": "MBPP/0278", "prompt": "Write a function to find the element count that occurs before the record in the given tuple.", "entry_point": "count_first_elements", "function_name": "def count_first_elements(test_tup)", "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10) ) == 3\n    assert candidate((2, 9, (5, 7), 11) ) == 2\n    assert candidate((11, 15, 5, 8, (2, 3), 8) ) == 4\n\n"}
{"task_id": "MBPP/0279", "prompt": "Write a function to find the nth decagonal number.", "entry_point": "is_num_decagonal", "function_name": "def is_num_decagonal(n)", "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 27\n    assert candidate(7) == 175\n    assert candidate(10) == 370\n\n"}
{"task_id": "MBPP/0280", "prompt": "Write a function to search an element in the given array by using sequential search.", "entry_point": "sequential_search", "function_name": "def sequential_search(dlist, item)", "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n\n"}
{"task_id": "MBPP/0281", "prompt": "Write a python function to check if the elements of a given list are unique or not.", "entry_point": "all_unique", "function_name": "def all_unique(test_list)", "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == True\n    assert candidate([1,2,1,2]) == False\n    assert candidate([1,2,3,4,5]) == True\n\n"}
{"task_id": "MBPP/0282", "prompt": "Write a function to substaract two lists using map and lambda function.", "entry_point": "sub_list", "function_name": "def sub_list(nums1, nums2)", "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert candidate([1,2],[3,4])==[-2,-2]\n    assert candidate([90,120],[50,70])==[40,50]\n\n"}
{"task_id": "MBPP/0283", "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "entry_point": "validate", "function_name": "def validate(n)", "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n\n"}
{"task_id": "MBPP/0284", "prompt": "Write a function to check whether all items of a list are equal to a given string.", "entry_point": "check_element", "function_name": "def check_element(list, element)", "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n    assert candidate([1,2,3,4],7)==False\n    assert candidate([\"green\", \"green\", \"green\", \"green\"],'green')==True\n\n"}
{"task_id": "MBPP/0285", "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.", "entry_point": "text_match_two_three", "function_name": "def text_match_two_three(text)", "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abbbba\")==('Found a match!')\n\n"}
{"task_id": "MBPP/0286", "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "entry_point": "max_sub_array_sum_repeated", "function_name": "def max_sub_array_sum_repeated(a, n, k)", "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n\n"}
{"task_id": "MBPP/0287", "prompt": "Write a python function to find the sum of squares of first n even natural numbers.", "entry_point": "square_Sum", "function_name": "def square_Sum(n)", "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 20\n    assert candidate(3) == 56\n    assert candidate(4) == 120\n\n"}
{"task_id": "MBPP/0288", "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "entry_point": "modular_inverse", "function_name": "def modular_inverse(arr, N, P)", "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([ 1, 6, 4, 5 ], 4, 7) == 2\n    assert candidate([1, 3, 8, 12, 12], 5, 13) == 3\n    assert candidate([2, 3, 4, 5], 4, 6) == 1\n\n"}
{"task_id": "MBPP/0289", "prompt": "Write a python function to calculate the number of odd days in a given year.", "entry_point": "odd_Days", "function_name": "def odd_Days(N)", "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(100) == 5\n    assert candidate(50) ==6\n    assert candidate(75) == 2\n\n"}
{"task_id": "MBPP/0290", "prompt": "Write a function to find the list of lists with maximum length.", "entry_point": "max_length", "function_name": "def max_length(list1)", "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n    assert candidate([[5], [15,20,25]])==(3, [15,20,25])\n\n"}
{"task_id": "MBPP/0291", "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "entry_point": "count_no_of_ways", "function_name": "def count_no_of_ways(n, k)", "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2, 4) == 16\n    assert candidate(3, 2) == 6\n    assert candidate(4, 4) == 228\n\n"}
{"task_id": "MBPP/0292", "prompt": "Write a python function to find quotient of two numbers.", "entry_point": "find", "function_name": "def find(n, m)", "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,3) == 3\n    assert candidate(4,2) == 2\n    assert candidate(20,5) == 4\n\n"}
{"task_id": "MBPP/0293", "prompt": "Write a function to find the third side of a right angled triangle.", "entry_point": "otherside_rightangle", "function_name": "def otherside_rightangle(w, h)", "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(7,8)==10.63014581273465\n    assert candidate(3,4)==5\n    assert candidate(7,15)==16.55294535724685\n\n"}
{"task_id": "MBPP/0294", "prompt": "Write a function to find the maximum value in a given heterogeneous list.", "entry_point": "max_val", "function_name": "def max_val(listval)", "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==5\n    assert candidate(['Python', 15, 20, 25])==25\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==50\n\n"}
{"task_id": "MBPP/0295", "prompt": "Write a function to return the sum of all divisors of a number.", "entry_point": "sum_div", "function_name": "def sum_div(number)", "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(8)==7\n    assert candidate(12)==16\n    assert candidate(7)==1\n\n"}
{"task_id": "MBPP/0296", "prompt": "Write a python function to count inversions in an array.", "entry_point": "get_Inv_Count", "function_name": "def get_Inv_Count(arr, n)", "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,20,6,4,5],5) == 5\n    assert candidate([1,2,1],3) == 1\n    assert candidate([1,2,5,6,1],5) == 3\n\n"}
{"task_id": "MBPP/0297", "prompt": "Write a function to flatten a given nested list structure.", "entry_point": "flatten_list", "function_name": "def flatten_list(list1)", "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\n"}
{"task_id": "MBPP/0298", "prompt": "Write a function to find the nested list elements which are present in another list.", "entry_point": "intersection_nested_lists", "function_name": "def intersection_nested_lists(l1, l2)", "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n    assert candidate([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\n    assert candidate(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]\n\n"}
{"task_id": "MBPP/0299", "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.", "entry_point": "max_aggregate", "function_name": "def max_aggregate(stdata)", "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert candidate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n    assert candidate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n\n"}
{"task_id": "MBPP/0300", "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "entry_point": "count_binary_seq", "function_name": "def count_binary_seq(n)", "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1) == 2.0\n    assert candidate(2) == 6.0\n    assert candidate(3) == 20.0\n\n"}
{"task_id": "MBPP/0301", "prompt": "Write a function to find the depth of a dictionary.", "entry_point": "dict_depth", "function_name": "def dict_depth(d)", "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert candidate({'a':1, 'b': {'c':'python'}})==2\n    assert candidate({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n\n"}
{"task_id": "MBPP/0302", "prompt": "Write a python function to find the most significant bit number which is also a set bit.", "entry_point": "set_Bit_Number", "function_name": "def set_Bit_Number(n)", "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(6) == 4\n    assert candidate(10) == 8\n    assert candidate(18) == 16\n\n"}
{"task_id": "MBPP/0303", "prompt": "Write a python function to check whether the count of inversion of two types are same or not.", "entry_point": "solve", "function_name": "def solve(a, n)", "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,0,2],3) == True\n    assert candidate([1,2,0],3) == False\n    assert candidate([1,2,1],3) == True\n\n"}
{"task_id": "MBPP/0304", "prompt": "Write a python function to find element at a given index after number of rotations.", "entry_point": "find_Element", "function_name": "def find_Element(arr, ranges, rotations, index)", "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert candidate([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert candidate([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n\n"}
{"task_id": "MBPP/0305", "prompt": "Write a function to match two words from a list of words starting with letter 'p'.", "entry_point": "start_withp", "function_name": "def start_withp(words)", "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    assert candidate([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n    assert candidate([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n\n"}
{"task_id": "MBPP/0306", "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "entry_point": "max_sum_increasing_subseq", "function_name": "def max_sum_increasing_subseq(a, n, index, k)", "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n\n"}
{"task_id": "MBPP/0307", "prompt": "Write a function to get a colon of a tuple.", "entry_point": "colon_tuplex", "function_name": "def colon_tuplex(tuplex, m, n)", "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n    assert candidate((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n    assert candidate((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\n\n"}
{"task_id": "MBPP/0308", "prompt": "Write a function to find the specified number of largest products from two given lists.", "entry_point": "large_product", "function_name": "def large_product(nums1, nums2, N)", "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n\n"}
{"task_id": "MBPP/0309", "prompt": "Write a python function to find the maximum of two numbers.", "entry_point": "maximum", "function_name": "def maximum(a, b)", "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,10) == 10\n    assert candidate(-1,-2) == -1\n    assert candidate(9,7) == 9\n\n"}
{"task_id": "MBPP/0310", "prompt": "Write a function to convert a given string to a tuple.", "entry_point": "string_to_tuple", "function_name": "def string_to_tuple(str1)", "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert candidate(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert candidate(\"15.10\")==('1', '5', '.', '1', '0')\n\n"}
{"task_id": "MBPP/0311", "prompt": "Write a python function to set the left most unset bit.", "entry_point": "set_left_most_unset_bit", "function_name": "def set_left_most_unset_bit(n)", "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 14\n    assert candidate(12) == 14\n    assert candidate(15) == 15\n\n"}
{"task_id": "MBPP/0312", "prompt": "Write a function to find the volume of a cone.", "entry_point": "volume_cone", "function_name": "def volume_cone(r, h)", "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,12)==314.15926535897927\n    assert candidate(10,15)==1570.7963267948965\n    assert candidate(19,17)==6426.651371693521\n\n"}
{"task_id": "MBPP/0313", "prompt": "Write a python function to print positive numbers in a list.", "entry_point": "pos_nos", "function_name": "def pos_nos(list1)", "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([-1,-2,1,2]) == 1,2\n    assert candidate([3,4,-5]) == 3,4\n    assert candidate([-2,-3,1]) == 1\n\n"}
{"task_id": "MBPP/0314", "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "entry_point": "max_sum_rectangular_grid", "function_name": "def max_sum_rectangular_grid(grid, n)", "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n    assert candidate([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\n    assert candidate([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81\n\n"}
{"task_id": "MBPP/0315", "prompt": "Write a python function to find the first maximum length of even word.", "entry_point": "find_Max_Len_Even", "function_name": "def find_Max_Len_Even(str)", "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python language\") == \"language\"\n    assert candidate(\"maximum even length\") == \"length\"\n    assert candidate(\"eve\") == \"-1\"\n\n"}
{"task_id": "MBPP/0316", "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "entry_point": "find_last_occurrence", "function_name": "def find_last_occurrence(A, x)", "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n    assert candidate([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\n    assert candidate([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6\n\n"}
{"task_id": "MBPP/0317", "prompt": "Write a function to reflect the modified run-length encoding from a list.", "entry_point": "modified_encode", "function_name": "def modified_encode(alist)", "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n    assert candidate('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n    assert candidate('python')==['p', 'y', 't', 'h', 'o', 'n']\n\n"}
{"task_id": "MBPP/0318", "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.", "entry_point": "max_volume", "function_name": "def max_volume(s)", "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(8) == 18\n    assert candidate(4) == 2\n    assert candidate(1) == 0\n\n"}
{"task_id": "MBPP/0319", "prompt": "Write a function to find all five characters long word in the given string by using regex.", "entry_point": "find_long_word", "function_name": "def find_long_word(text)", "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('Please move back to strem') == ['strem']\n    assert candidate('4K Ultra HD streaming player') == ['Ultra']\n    assert candidate('Streaming Media Player') == ['Media']\n\n"}
{"task_id": "MBPP/0320", "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "entry_point": "sum_difference", "function_name": "def sum_difference(n)", "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12)==5434\n    assert candidate(20)==41230\n    assert candidate(54)==2151270\n\n"}
{"task_id": "MBPP/0321", "prompt": "Write a function to find the demlo number for the given number.", "entry_point": "find_demlo", "function_name": "def find_demlo(s)", "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"111111\") == '12345654321'\n    assert candidate(\"1111\") == '1234321'\n    assert candidate(\"13333122222\") == '123456789101110987654321'\n\n"}
{"task_id": "MBPP/0322", "prompt": "Write a function to find all index positions of the minimum values in a given list.", "entry_point": "position_min", "function_name": "def position_min(list1)", "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==[0]\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==[1]\n\n"}
{"task_id": "MBPP/0323", "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.", "entry_point": "right_rotate", "function_name": "def right_rotate(arr, n, out_of_place, cur)", "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n    assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\n    assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]\n\n"}
{"task_id": "MBPP/0324", "prompt": "Write a function to extract the sum of alternate chains of tuples.", "entry_point": "sum_of_alternates", "function_name": "def sum_of_alternates(test_tuple)", "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((5, 6, 3, 6, 10, 34)) == (46, 18)\n    assert candidate((1, 2, 3, 4, 5)) == (6, 9)\n    assert candidate((6, 7, 8, 9, 4, 5)) == (21, 18)\n\n"}
{"task_id": "MBPP/0325", "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.", "entry_point": "get_Min_Squares", "function_name": "def get_Min_Squares(n)", "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(6) == 3\n    assert candidate(2) == 2\n    assert candidate(4) == 1\n\n"}
{"task_id": "MBPP/0326", "prompt": "Write a function to get the word with most number of occurrences in the given strings list.", "entry_point": "most_occurrences", "function_name": "def most_occurrences(test_list)", "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n    assert candidate([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\n    assert candidate([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'\n\n"}
{"task_id": "MBPP/0327", "prompt": "Write a function to print check if the triangle is isosceles or not.", "entry_point": "check_isosceles", "function_name": "def check_isosceles(x, y, z)", "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(6,8,12)==False \n    assert candidate(6,6,12)==True\n    assert candidate(6,16,20)==False\n\n"}
{"task_id": "MBPP/0328", "prompt": "Write a function to rotate a given list by specified number of items to the left direction.", "entry_point": "rotate_left", "function_name": "def rotate_left(list1, m, n)", "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]\n\n"}
{"task_id": "MBPP/0329", "prompt": "Write a python function to count negative numbers in a list.", "entry_point": "neg_count", "function_name": "def neg_count(list)", "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([-1,-2,3,-4,-5]) == 4\n    assert candidate([1,2,3]) == 0\n    assert candidate([1,2,-3,-10,20]) == 2\n\n"}
{"task_id": "MBPP/0330", "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.", "entry_point": "find_char", "function_name": "def find_char(text)", "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    assert candidate('Certain service are subject to change MSR') == ['are', 'MSR']\n    assert candidate('Third party legal desclaimers') == ['Third', 'party', 'legal']\n\n"}
{"task_id": "MBPP/0331", "prompt": "Write a python function to count unset bits of a given number.", "entry_point": "count_unset_bits", "function_name": "def count_unset_bits(n)", "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 2\n    assert candidate(6) == 1\n\n"}
{"task_id": "MBPP/0332", "prompt": "Write a function to count character frequency of a given string.", "entry_point": "char_frequency", "function_name": "def char_frequency(str1)", "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert candidate('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n    assert candidate('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\n\n"}
{"task_id": "MBPP/0333", "prompt": "Write a python function to sort a list according to the second element in sublist.", "entry_point": "Sort", "function_name": "def Sort(sub_li)", "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    assert candidate([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n    assert candidate([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\n\n"}
{"task_id": "MBPP/0334", "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.", "entry_point": "check_Validity", "function_name": "def check_Validity(a, b, c)", "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,2,3) == False\n    assert candidate(2,3,5) == False\n    assert candidate(7,10,5) == True\n\n"}
{"task_id": "MBPP/0335", "prompt": "Write a function to find the sum of arithmetic progression.", "entry_point": "ap_sum", "function_name": "def ap_sum(a, n, d)", "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,5,2)==25\n    assert candidate(2,6,4)==72\n    assert candidate(1,4,5)==34\n\n"}
{"task_id": "MBPP/0336", "prompt": "Write a function to check whether the given month name contains 28 days or not.", "entry_point": "check_monthnum", "function_name": "def check_monthnum(monthname1)", "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"February\")==True\n    assert candidate(\"January\")==False\n    assert candidate(\"March\")==False\n\n"}
{"task_id": "MBPP/0337", "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.", "entry_point": "text_match_word", "function_name": "def text_match_word(text)", "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python.\")==('Found a match!')\n    assert candidate(\"python.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n\n"}
{"task_id": "MBPP/0338", "prompt": "Write a python function to count the number of substrings with same first and last characters.", "entry_point": "check_Equality", "function_name": "def check_Equality(s)", "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert count_Substring_With_Equal_Ends('aba') == 4\n    assert count_Substring_With_Equal_Ends('abcab') == 7\n    assert count_Substring_With_Equal_Ends('abc') == 3\n\n"}
{"task_id": "MBPP/0339", "prompt": "Write a python function to find the maximum occuring divisor in an interval.", "entry_point": "find_Divisor", "function_name": "def find_Divisor(x, y)", "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2,2) == 2\n    assert candidate(2,5) == 2\n    assert candidate(5,10) == 2\n\n"}
{"task_id": "MBPP/0340", "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.", "entry_point": "sum_three_smallest_nums", "function_name": "def sum_three_smallest_nums(lst)", "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10,20,30,40,50,60,7]) == 37\n    assert candidate([1,2,3,4,5]) == 6\n    assert candidate([0,1,2,3,4,5]) == 6\n\n"}
{"task_id": "MBPP/0341", "prompt": "Write a function to convert the given set into ordered tuples.", "entry_point": "set_to_tuple", "function_name": "def set_to_tuple(s)", "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    assert candidate({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\n    assert candidate({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)\n\n"}
{"task_id": "MBPP/0342", "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "entry_point": "__init__", "function_name": "def __init__(self, value, list_num, index)", "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\n    assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)\n\n"}
{"task_id": "MBPP/0343", "prompt": "Write a function to calculate the number of digits and letters in a string.", "entry_point": "dig_let", "function_name": "def dig_let(s)", "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python\")==(6,0)\n    assert candidate(\"program\")==(7,0)\n    assert candidate(\"python3.0\")==(6,2)\n\n"}
{"task_id": "MBPP/0344", "prompt": "Write a python function to find number of elements with odd factors in a given range.", "entry_point": "count_Odd_Squares", "function_name": "def count_Odd_Squares(n, m)", "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,100) == 8\n    assert candidate(8,65) == 6\n    assert candidate(2,5) == 1\n\n"}
{"task_id": "MBPP/0345", "prompt": "Write a function to find the difference between two consecutive numbers in a given list.", "entry_point": "diff_consecutivenums", "function_name": "def diff_consecutivenums(nums)", "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n    assert candidate([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\n    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]\n\n"}
{"task_id": "MBPP/0346", "prompt": "Write a function to find entringer number e(n, k).", "entry_point": "zigzag", "function_name": "def zigzag(n, k)", "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4, 3) == 5\n    assert candidate(4, 2) == 4\n    assert candidate(3, 1) == 1\n\n"}
{"task_id": "MBPP/0347", "prompt": "Write a python function to count the number of squares in a rectangle.", "entry_point": "count_Squares", "function_name": "def count_Squares(m, n)", "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,3) == 20\n    assert candidate(1,2) == 2\n    assert candidate(2,2) == 5\n\n"}
{"task_id": "MBPP/0348", "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "entry_point": "bin_coff", "function_name": "def bin_coff(n, r)", "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert find_ways(4) == 2\n    assert find_ways(6) == 5\n    assert find_ways(8) == 14\n\n"}
{"task_id": "MBPP/0349", "prompt": "Write a python function to check whether the given string is a binary string or not.", "entry_point": "check", "function_name": "def check(string)", "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"01010101010\") == \"Yes\"\n    assert candidate(\"name0\") == \"No\"\n    assert candidate(\"101\") == \"Yes\"\n\n"}
{"task_id": "MBPP/0350", "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.", "entry_point": "minimum_Length", "function_name": "def minimum_Length(s)", "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"mnm\") == 1\n    assert candidate(\"abcda\") == 3\n    assert candidate(\"abcb\") == 2\n\n"}
{"task_id": "MBPP/0351", "prompt": "Write a python function to find the first element occurring k times in a given array.", "entry_point": "first_Element", "function_name": "def first_Element(arr, n, k)", "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0,1,2,3,4,5],6,1) == 0\n    assert candidate([1,2,1,3,4],5,2) == 1\n    assert candidate([2,3,4,3,5,7,1,2,3,5],10,2) == 2\n\n"}
{"task_id": "MBPP/0352", "prompt": "Write a python function to check whether all the characters in a given string are unique.", "entry_point": "unique_Characters", "function_name": "def unique_Characters(str)", "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('aba') == False\n    assert candidate('abc') == True\n    assert candidate('abab') == False\n\n"}
{"task_id": "MBPP/0353", "prompt": "Write a function to remove a specified column from a given nested list.", "entry_point": "remove_column", "function_name": "def remove_column(list1, n)", "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]\n\n"}
{"task_id": "MBPP/0354", "prompt": "Write a function to find t-nth term of arithemetic progression.", "entry_point": "tn_ap", "function_name": "def tn_ap(a, n, d)", "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,5,2)==9\n    assert candidate(2,6,4)==22\n    assert candidate(1,4,5)==16\n\n"}
{"task_id": "MBPP/0355", "prompt": "Write a python function to count the number of rectangles in a circle of radius r.", "entry_point": "count_Rectangles", "function_name": "def count_Rectangles(radius)", "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 8\n    assert candidate(1) == 1\n    assert candidate(0) == 0\n\n"}
{"task_id": "MBPP/0356", "prompt": "Write a function to find the third angle of a triangle using two angles.", "entry_point": "find_angle", "function_name": "def find_angle(a, b)", "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(47,89)==44\n    assert candidate(45,95)==40\n    assert candidate(50,40)==90\n\n"}
{"task_id": "MBPP/0357", "prompt": "Write a function to find the maximum element of all the given tuple records.", "entry_point": "find_max", "function_name": "def find_max(test_list)", "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12\n\n"}
{"task_id": "MBPP/0358", "prompt": "Write a function to find modulo division of two lists using map and lambda function.", "entry_point": "moddiv_list", "function_name": "def moddiv_list(nums1, nums2)", "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([4,5,6],[1, 2, 3])==[0, 1, 0]\n    assert candidate([3,2],[1,4])==[0, 2]\n    assert candidate([90,120],[50,70])==[40, 50]\n\n"}
{"task_id": "MBPP/0359", "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.", "entry_point": "Check_Solution", "function_name": "def Check_Solution(a, b, c)", "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,3,2) == \"Yes\"\n    assert candidate(1,2,3) == \"No\"\n    assert candidate(1,-5,6) == \"No\"\n\n"}
{"task_id": "MBPP/0360", "prompt": "Write a function to find the n\u2019th carol number.", "entry_point": "get_carol", "function_name": "def get_carol(n)", "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 7\n    assert candidate(4) == 223\n    assert candidate(5) == 959\n\n"}
{"task_id": "MBPP/0361", "prompt": "Write a function to remove empty lists from a given list of lists.", "entry_point": "remove_empty", "function_name": "def remove_empty(list1)", "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n    assert candidate([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\n    assert candidate([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']\n\n"}
{"task_id": "MBPP/0362", "prompt": "Write a python function to find the item with maximum occurrences in a given list.", "entry_point": "max_occurrences", "function_name": "def max_occurrences(nums)", "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,1,2,3,12,4,2]) ==  2\n    assert candidate([1,2,6,7,0,1,0,1,0]) == 1,0\n    assert candidate([1,2,3,1,2,4,1]) == 1\n\n"}
{"task_id": "MBPP/0363", "prompt": "Write a function to add the k elements to each element in the tuple.", "entry_point": "add_K_element", "function_name": "def add_K_element(test_list, K)", "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    assert candidate([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n    assert candidate([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n\n"}
{"task_id": "MBPP/0364", "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "entry_point": "make_flip", "function_name": "def make_flip(ch)", "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert min_flip_to_make_string_alternate(\"0001010111\") == 2\n    assert min_flip_to_make_string_alternate(\"001\") == 1\n    assert min_flip_to_make_string_alternate(\"010111011\") == 2 \n\n"}
{"task_id": "MBPP/0365", "prompt": "Write a python function to count the number of digits of a given number.", "entry_point": "count_Digit", "function_name": "def count_Digit(n)", "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12345) == 5\n    assert candidate(11223305) == 8\n    assert candidate(4123459) == 7\n\n"}
{"task_id": "MBPP/0366", "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.", "entry_point": "adjacent_num_product", "function_name": "def adjacent_num_product(list_nums)", "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6]) == 30\n    assert candidate([1,2,3,4,5]) == 20\n    assert candidate([2,3]) == 6\n\n"}
{"task_id": "MBPP/0367", "prompt": "Write a function to check if a binary tree is balanced or not.", "entry_point": "__init__", "function_name": "def __init__(self, data)", "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert is_tree_balanced(root) == False\n    assert is_tree_balanced(root1) == True\n    assert is_tree_balanced(root2) == False \n\n"}
{"task_id": "MBPP/0368", "prompt": "Write a function to repeat the given tuple n times.", "entry_point": "repeat_tuples", "function_name": "def repeat_tuples(test_tup, N)", "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    assert candidate((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\n    assert candidate((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n\n"}
{"task_id": "MBPP/0369", "prompt": "Write a function to find the lateral surface area of cuboid", "entry_point": "lateralsurface_cuboid", "function_name": "def lateralsurface_cuboid(l, w, h)", "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(8,5,6)==156\n    assert candidate(7,9,10)==320\n    assert candidate(10,20,30)==1800\n\n"}
{"task_id": "MBPP/0370", "prompt": "Write a function to sort a tuple by its float element.", "entry_point": "float_sort", "function_name": "def float_sort(price)", "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n    assert candidate([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \n    assert candidate([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] \n\n"}
{"task_id": "MBPP/0371", "prompt": "Write a function to find the smallest missing element in a sorted array.", "entry_point": "smallest_missing", "function_name": "def smallest_missing(A, left_element, right_element)", "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert candidate([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\n    assert candidate([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0\n\n"}
{"task_id": "MBPP/0372", "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "entry_point": "heap_assending", "function_name": "def heap_assending(nums)", "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n"}
{"task_id": "MBPP/0373", "prompt": "Write a function to find the volume of a cuboid.", "entry_point": "volume_cuboid", "function_name": "def volume_cuboid(l, w, h)", "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,2,3)==6\n    assert candidate(5,7,9)==315\n    assert candidate(10,15,21)==3150\n\n"}
{"task_id": "MBPP/0374", "prompt": "Write a function to print all permutations of a given string including duplicates.", "entry_point": "permute_string", "function_name": "def permute_string(str)", "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('ab')==['ab', 'ba']\n    assert candidate('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    assert candidate('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n\n"}
{"task_id": "MBPP/0375", "prompt": "Write a function to round the given number to the nearest multiple of a specific number.", "entry_point": "round_num", "function_name": "def round_num(n, m)", "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4722,10)==4720\n    assert candidate(1111,5)==1110\n    assert candidate(219,2)==218\n\n"}
{"task_id": "MBPP/0376", "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "entry_point": "remove_replica", "function_name": "def remove_replica(test_tup)", "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n    assert candidate((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n\n"}
{"task_id": "MBPP/0377", "prompt": "Write a python function to remove all occurrences of a character in a given string.", "entry_point": "remove_Char", "function_name": "def remove_Char(s, c)", "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"aba\",'a') == \"b\"\n    assert candidate(\"toggle\",'g') == \"tole\"\n    assert candidate(\"aabbc\",'b') == \"aac\"\n\n"}
{"task_id": "MBPP/0378", "prompt": "Write a python function to shift last element to first position in the given list.", "entry_point": "move_first", "function_name": "def move_first(test_list)", "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4]) == [4,1,2,3]\n    assert candidate([0,1,2,3]) == [3,0,1,2]\n    assert candidate([9,8,7,1]) == [1,9,8,7]\n\n"}
{"task_id": "MBPP/0379", "prompt": "Write a function to find the surface area of a cuboid.", "entry_point": "surfacearea_cuboid", "function_name": "def surfacearea_cuboid(l, w, h)", "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,2,3)==22\n    assert candidate(5,7,9)==286\n    assert candidate(10,15,21)==1350\n\n"}
{"task_id": "MBPP/0380", "prompt": "Write a function to generate a two-dimensional array.", "entry_point": "multi_list", "function_name": "def multi_list(rownum, colnum)", "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n    assert candidate(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n    assert candidate(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n\n"}
{"task_id": "MBPP/0381", "prompt": "Write a function to sort a list of lists by a given index of the inner list.", "entry_point": "index_on_inner_list", "function_name": "def index_on_inner_list(list_data, index_no)", "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n\n"}
{"task_id": "MBPP/0382", "prompt": "Write a function to find the number of rotations in a circularly sorted array.", "entry_point": "find_rotation_count", "function_name": "def find_rotation_count(A)", "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n    assert candidate([8, 9, 10,2, 5, 6]) == 3\n    assert candidate([2, 5, 6, 8, 9, 10]) == 0\n\n"}
{"task_id": "MBPP/0383", "prompt": "Write a python function to toggle all odd bits of a given number.", "entry_point": "even_bit_toggle_number", "function_name": "def even_bit_toggle_number(n)", "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 15\n    assert candidate(20) == 1\n    assert candidate(30) == 11\n\n"}
{"task_id": "MBPP/0384", "prompt": "Write a python function to find the frequency of the smallest value in a given array.", "entry_point": "frequency_Of_Smallest", "function_name": "def frequency_Of_Smallest(n, arr)", "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,[1,2,3,4,3]) == 1\n    assert candidate(7,[3,1,2,5,6,2,3]) == 1\n    assert candidate(7,[3,3,6,3,7,4,9]) == 3\n\n"}
{"task_id": "MBPP/0385", "prompt": "Write a function to find the n'th perrin number using recursion.", "entry_point": "get_perrin", "function_name": "def get_perrin(n)", "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(9) == 12\n    assert candidate(4) == 2\n    assert candidate(6) == 5\n\n"}
{"task_id": "MBPP/0386", "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "entry_point": "swap_count", "function_name": "def swap_count(s)", "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"[]][][\") == 2\n    assert candidate(\"[[][]]\") == 0\n    assert candidate(\"[[][]]][\") == 1\n\n"}
{"task_id": "MBPP/0387", "prompt": "Write a python function to check whether the hexadecimal number is even or odd.", "entry_point": "even_or_odd", "function_name": "def even_or_odd(N)", "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"AB3454D\") ==\"Odd\"\n    assert candidate(\"ABC\") == \"Even\"\n    assert candidate(\"AAD\") == \"Odd\"\n\n"}
{"task_id": "MBPP/0388", "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.", "entry_point": "highest_Power_of_2", "function_name": "def highest_Power_of_2(n)", "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n\n"}
{"task_id": "MBPP/0389", "prompt": "Write a function to find the n'th lucas number.", "entry_point": "find_lucas", "function_name": "def find_lucas(n)", "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n\n"}
{"task_id": "MBPP/0390", "prompt": "Write a function to insert a given string at the beginning of all items in a list.", "entry_point": "add_string", "function_name": "def add_string(list, string)", "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert candidate(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n\n"}
{"task_id": "MBPP/0391", "prompt": "Write a function to convert more than one list to nested dictionary.", "entry_point": "convert_list_dictionary", "function_name": "def convert_list_dictionary(l1, l2, l3)", "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert candidate([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n    assert candidate([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n\n"}
{"task_id": "MBPP/0392", "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "entry_point": "get_max_sum", "function_name": "def get_max_sum(n)", "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(60) == 106\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n\n"}
{"task_id": "MBPP/0393", "prompt": "Write a function to find the list with maximum length using lambda function.", "entry_point": "max_length_list", "function_name": "def max_length_list(input_list)", "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n\n"}
{"task_id": "MBPP/0394", "prompt": "Write a function to check if given tuple is distinct or not.", "entry_point": "check_distinct", "function_name": "def check_distinct(test_tup)", "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 4, 5, 6, 1, 4)) == False\n    assert candidate((1, 4, 5, 6)) == True\n    assert candidate((2, 3, 4, 5, 6)) == True\n\n"}
{"task_id": "MBPP/0395", "prompt": "Write a python function to find the first non-repeated character in a given string.", "entry_point": "first_non_repeating_character", "function_name": "def first_non_repeating_character(str1)", "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abcabc\") == None\n    assert candidate(\"abc\") == \"a\"\n    assert candidate(\"ababc\") == \"c\"\n\n"}
{"task_id": "MBPP/0396", "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "entry_point": "check_char", "function_name": "def check_char(string)", "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abba\") == \"Valid\"\n    assert candidate(\"a\") == \"Valid\"\n    assert candidate(\"abcd\") == \"Invalid\"\n\n"}
{"task_id": "MBPP/0397", "prompt": "Write a function to find the median of three specific numbers.", "entry_point": "median_numbers", "function_name": "def median_numbers(a, b, c)", "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(25,55,65)==55.0\n    assert candidate(20,10,30)==20.0\n    assert candidate(15,45,75)==45.0\n\n"}
{"task_id": "MBPP/0398", "prompt": "Write a function to compute the sum of digits of each number of a given list.", "entry_point": "sum_of_digits", "function_name": "def sum_of_digits(nums)", "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10,2,56])==14\n    assert candidate([[10,20,4,5,'b',70,'a']])==19\n    assert candidate([10,20,-4,5,-70])==19\n\n"}
{"task_id": "MBPP/0399", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "entry_point": "bitwise_xor", "function_name": "def bitwise_xor(test_tup1, test_tup2)", "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n\n"}
{"task_id": "MBPP/0400", "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "entry_point": "extract_freq", "function_name": "def extract_freq(test_list)", "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\n\n"}
{"task_id": "MBPP/0401", "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "entry_point": "add_nested_tuples", "function_name": "def add_nested_tuples(test_tup1, test_tup2)", "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\n"}
{"task_id": "MBPP/0402", "prompt": "Write a function to compute the value of ncr%p.", "entry_point": "ncr_modp", "function_name": "def ncr_modp(n, r, p)", "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,2,13)==6\n    assert candidate(15,12,43)==25\n    assert candidate(17,9,18)==10\n\n"}
{"task_id": "MBPP/0403", "prompt": "Write a function to check if a url is valid or not using regex.", "entry_point": "is_valid_URL", "function_name": "def is_valid_URL(str)", "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"https://www.google.com\") == True\n    assert candidate(\"https:/www.gmail.com\") == False\n    assert candidate(\"https:// www.redit.com\") == False\n\n"}
{"task_id": "MBPP/0404", "prompt": "Write a python function to find the minimum of two numbers.", "entry_point": "minimum", "function_name": "def minimum(a, b)", "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(-5,-4) == -5\n    assert candidate(0,0) == 0\n\n"}
{"task_id": "MBPP/0405", "prompt": "Write a function to check whether an element exists within a tuple.", "entry_point": "check_tuplex", "function_name": "def check_tuplex(tuplex, tuple1)", "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n\n"}
{"task_id": "MBPP/0406", "prompt": "Write a python function to find the parity of a given number.", "entry_point": "find_Parity", "function_name": "def find_Parity(x)", "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12) == \"Even Parity\"\n    assert candidate(7) == \"Odd Parity\"\n    assert candidate(10) == \"Even Parity\"\n\n"}
{"task_id": "MBPP/0407", "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.", "entry_point": "rearrange_bigger", "function_name": "def rearrange_bigger(n)", "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12)==21\n    assert candidate(10)==False\n    assert candidate(102)==120\n\n"}
{"task_id": "MBPP/0408", "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "entry_point": "k_smallest_pairs", "function_name": "def k_smallest_pairs(nums1, nums2, k)", "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert candidate([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert candidate([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\n"}
{"task_id": "MBPP/0409", "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.", "entry_point": "min_product_tuple", "function_name": "def min_product_tuple(list1)", "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert candidate([(10,20), (15,2), (5,10)] )==30\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==100\n\n"}
{"task_id": "MBPP/0410", "prompt": "Write a function to find the minimum value in a given heterogeneous list.", "entry_point": "min_val", "function_name": "def min_val(listval)", "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==2\n    assert candidate(['Python', 15, 20, 25])==15\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==20\n\n"}
{"task_id": "MBPP/0411", "prompt": "Write a function to convert the given snake case string to camel case string by using regex.", "entry_point": "snake_to_camel", "function_name": "def snake_to_camel(word)", "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('android_tv') == 'AndroidTv'\n    assert candidate('google_pixel') == 'GooglePixel'\n    assert candidate('apple_watch') == 'AppleWatch'\n\n"}
{"task_id": "MBPP/0412", "prompt": "Write a python function to remove odd numbers from a given list.", "entry_point": "remove_odd", "function_name": "def remove_odd(l)", "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == [2]\n    assert candidate([2,4,6]) == [2,4,6]\n    assert candidate([10,20,3]) == [10,20]\n\n"}
{"task_id": "MBPP/0413", "prompt": "Write a function to extract the nth element from a given list of tuples.", "entry_point": "extract_nth_element", "function_name": "def extract_nth_element(list1, n)", "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n\n"}
{"task_id": "MBPP/0414", "prompt": "Write a python function to check whether the value exists in a sequence or not.", "entry_point": "overlapping", "function_name": "def overlapping(list1, list2)", "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[6,7,8,9]) == False\n    assert candidate([1,2,3],[4,5,6]) == False\n    assert candidate([1,4,5],[1,4,5]) == True\n\n"}
{"task_id": "MBPP/0415", "prompt": "Write a python function to find a pair with highest product from a given array of integers.", "entry_point": "max_Product", "function_name": "def max_Product(arr)", "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,7,0,8,4]) == (7,8)\n    assert candidate([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    assert candidate([1,2,3]) == (2,3)\n\n"}
{"task_id": "MBPP/0416", "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "entry_point": "breakSum", "function_name": "def breakSum(n)", "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12) == 13\n    assert candidate(24) == 27\n    assert candidate(23) == 23\n\n"}
{"task_id": "MBPP/0417", "prompt": "Write a function to find common first element in given list of tuple.", "entry_point": "group_tuples", "function_name": "def group_tuples(Input)", "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert candidate([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert candidate([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n\n"}
{"task_id": "MBPP/0418", "prompt": "Write a python function to find the sublist having maximum length.", "entry_point": "Find_Max", "function_name": "def Find_Max(lst)", "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert candidate([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert candidate([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n\n"}
{"task_id": "MBPP/0419", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "entry_point": "round_and_sum", "function_name": "def round_and_sum(list1)", "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    assert candidate([5,2,9,24.3,29])==345\n    assert candidate([25.0,56.7,89.2])==513\n\n"}
{"task_id": "MBPP/0420", "prompt": "Write a python function to find the cube sum of first n even natural numbers.", "entry_point": "cube_Sum", "function_name": "def cube_Sum(n)", "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 72\n    assert candidate(3) == 288\n    assert candidate(4) == 800\n\n"}
{"task_id": "MBPP/0421", "prompt": "Write a function to concatenate each element of tuple by the delimiter.", "entry_point": "concatenate_tuple", "function_name": "def concatenate_tuple(test_tup)", "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    assert candidate((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n    assert candidate((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n\n"}
{"task_id": "MBPP/0422", "prompt": "Write a python function to find the average of cubes of first n natural numbers.", "entry_point": "find_Average_Of_Cube", "function_name": "def find_Average_Of_Cube(n)", "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n\n"}
{"task_id": "MBPP/0423", "prompt": "Write a function to solve gold mine problem.", "entry_point": "get_maxgold", "function_name": "def get_maxgold(gold, m, n)", "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n    assert candidate([[10,20],[30,40]],2,2)==70\n    assert candidate([[4,9],[3,7]],2,2)==13\n\n"}
{"task_id": "MBPP/0424", "prompt": "Write a function to extract only the rear index element of each string in the given tuple.", "entry_point": "extract_rear", "function_name": "def extract_rear(test_tuple)", "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n\n"}
{"task_id": "MBPP/0425", "prompt": "Write a function to count the number of sublists containing a particular element.", "entry_point": "count_element_in_list", "function_name": "def count_element_in_list(list1, x)", "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n\n"}
{"task_id": "MBPP/0426", "prompt": "Write a function to filter odd numbers using lambda function.", "entry_point": "filter_oddnumbers", "function_name": "def filter_oddnumbers(nums)", "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert candidate([10,20,45,67,84,93])==[45,67,93]\n    assert candidate([5,7,9,8,6,4,3])==[5,7,9,3]\n\n"}
{"task_id": "MBPP/0427", "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "entry_point": "change_date_format", "function_name": "def change_date_format(dt)", "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"2026-01-02\") == '02-01-2026'\n    assert candidate(\"2020-11-13\") == '13-11-2020'\n    assert candidate(\"2021-04-26\") == '26-04-2021'\n\n"}
{"task_id": "MBPP/0428", "prompt": "Write a function to sort the given array by using shell sort.", "entry_point": "shell_sort", "function_name": "def shell_sort(my_list)", "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n\n"}
{"task_id": "MBPP/0429", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.", "entry_point": "and_tuples", "function_name": "def and_tuples(test_tup1, test_tup2)", "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n\n"}
{"task_id": "MBPP/0430", "prompt": "Write a function to find the directrix of a parabola.", "entry_point": "parabola_directrix", "function_name": "def parabola_directrix(a, b, c)", "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,3,2)==-198\n    assert candidate(9,8,4)==-2336\n    assert candidate(2,4,6)==-130\n\n"}
{"task_id": "MBPP/0431", "prompt": "Write a function that takes two lists and returns true if they have at least one common element.", "entry_point": "common_element", "function_name": "def common_element(list1, list2)", "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5], [5,6,7,8,9])==True\n    assert candidate([1,2,3,4,5], [6,7,8,9])==None\n    assert candidate(['a','b','c'], ['d','b','e'])==True\n\n"}
{"task_id": "MBPP/0432", "prompt": "Write a function to find the median of a trapezium.", "entry_point": "median_trapezium", "function_name": "def median_trapezium(base1, base2, height)", "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(15,25,35)==20\n    assert candidate(10,20,30)==15\n    assert candidate(6,9,4)==7.5\n\n"}
{"task_id": "MBPP/0433", "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.", "entry_point": "check_greater", "function_name": "def check_greater(arr, number)", "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    assert candidate([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'\n\n"}
{"task_id": "MBPP/0434", "prompt": "Write a function that matches a string that has an a followed by one or more b's.", "entry_point": "text_match_one", "function_name": "def text_match_one(text)", "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abba\")==('Found a match!')\n\n"}
{"task_id": "MBPP/0435", "prompt": "Write a python function to find the last digit of a given number.", "entry_point": "last_Digit", "function_name": "def last_Digit(n)", "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n\n"}
{"task_id": "MBPP/0436", "prompt": "Write a python function to print negative numbers in a list.", "entry_point": "neg_nos", "function_name": "def neg_nos(list1)", "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([-1,4,5,-6]) == -1,-6\n    assert candidate([-1,-2,3,4]) == -1,-2\n    assert candidate([-7,-6,8,9]) == -7,-6\n\n"}
{"task_id": "MBPP/0437", "prompt": "Write a function to remove odd characters in a string.", "entry_point": "remove_odd", "function_name": "def remove_odd(str1)", "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python\")==(\"yhn\")\n    assert candidate(\"program\")==(\"rga\")\n    assert candidate(\"language\")==(\"agae\")\n\n"}
{"task_id": "MBPP/0438", "prompt": "Write a function to count bidirectional tuple pairs.", "entry_point": "count_bidirectional", "function_name": "def count_bidirectional(test_list)", "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'\n\n"}
{"task_id": "MBPP/0439", "prompt": "Write a function to convert a list of multiple integers into a single integer.", "entry_point": "multiple_to_single", "function_name": "def multiple_to_single(L)", "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([11, 33, 50])==113350\n    assert candidate([-1,2,3,4,5,6])==-123456\n    assert candidate([10,15,20,25])==10152025\n\n"}
{"task_id": "MBPP/0440", "prompt": "Write a function to find all adverbs and their positions in a given sentence.", "entry_point": "find_adverb_position", "function_name": "def find_adverb_position(text)", "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert candidate(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n    assert candidate(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n\n"}
{"task_id": "MBPP/0441", "prompt": "Write a function to find the surface area of a cube.", "entry_point": "surfacearea_cube", "function_name": "def surfacearea_cube(l)", "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5)==150\n    assert candidate(3)==54\n    assert candidate(10)==600\n\n"}
{"task_id": "MBPP/0442", "prompt": "Write a function to find the ration of positive numbers in an array of integers.", "entry_point": "positive_count", "function_name": "def positive_count(nums)", "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n\n"}
{"task_id": "MBPP/0443", "prompt": "Write a python function to find the largest negative number from the given list.", "entry_point": "largest_neg", "function_name": "def largest_neg(list1)", "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,-4,-6]) == -6\n    assert candidate([1,2,3,-8,-9]) == -9\n    assert candidate([1,2,3,4,-1]) == -1\n\n"}
{"task_id": "MBPP/0444", "prompt": "Write a function to trim each tuple by k in the given tuple list.", "entry_point": "trim_tuple", "function_name": "def trim_tuple(test_list, K)", "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    assert candidate([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n\n"}
{"task_id": "MBPP/0445", "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "entry_point": "index_multiplication", "function_name": "def index_multiplication(test_tup1, test_tup2)", "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n\n"}
{"task_id": "MBPP/0446", "prompt": "Write a python function to count the occurence of all elements of list in a tuple.", "entry_point": "count_Occurrence", "function_name": "def count_Occurrence(tup, lst)", "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert candidate((1,2,3,4,5,6),[1,2]) == 2\n\n"}
{"task_id": "MBPP/0447", "prompt": "Write a function to find cubes of individual elements in a list using lambda function.", "entry_point": "cube_nums", "function_name": "def cube_nums(nums)", "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10,20,30])==([1000, 8000, 27000])\n    assert candidate([12,15])==([1728, 3375])\n\n"}
{"task_id": "MBPP/0448", "prompt": "Write a function to calculate the sum of perrin numbers.", "entry_point": "cal_sum", "function_name": "def cal_sum(n)", "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(9) == 49\n    assert candidate(10) == 66\n    assert candidate(11) == 88\n\n"}
{"task_id": "MBPP/0449", "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.", "entry_point": "check_Triangle", "function_name": "def check_Triangle(x1, y1, x2, y2, x3, y3)", "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,5,2,5,4,6) == 'Yes'\n    assert candidate(1,1,1,4,1,5) == 'No'\n    assert candidate(1,1,1,1,1,1) == 'No'\n\n"}
{"task_id": "MBPP/0450", "prompt": "Write a function to extract specified size of strings from a give list of string values.", "entry_point": "extract_string", "function_name": "def extract_string(str, l)", "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n\n"}
{"task_id": "MBPP/0451", "prompt": "Write a function to remove all whitespaces from the given string using regex.", "entry_point": "remove_whitespaces", "function_name": "def remove_whitespaces(text1)", "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(' Google    Flutter ') == 'GoogleFlutter'\n    assert candidate(' Google    Dart ') == 'GoogleDart'\n    assert candidate(' iOS    Swift ') == 'iOSSwift'\n\n"}
{"task_id": "MBPP/0452", "prompt": "Write a function that gives loss amount if the given amount has loss else return none.", "entry_point": "loss_amount", "function_name": "def loss_amount(actual_cost, sale_amount)", "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1500,1200)==None\n    assert candidate(100,200)==100\n    assert candidate(2000,5000)==3000\n\n"}
{"task_id": "MBPP/0453", "prompt": "Write a python function to find the sum of even factors of a number.", "entry_point": "sumofFactors", "function_name": "def sumofFactors(n)", "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(18) == 26\n    assert candidate(30) == 48\n    assert candidate(6) == 8\n\n"}
{"task_id": "MBPP/0454", "prompt": "Write a function that matches a word containing 'z'.", "entry_point": "text_match_wordz", "function_name": "def text_match_wordz(text)", "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"pythonz.\")==('Found a match!')\n    assert candidate(\"xyz.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n\n"}
{"task_id": "MBPP/0455", "prompt": "Write a function to check whether the given month number contains 31 days or not.", "entry_point": "check_monthnumb_number", "function_name": "def check_monthnumb_number(monthnum2)", "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5)==True\n    assert candidate(2)==False\n    assert candidate(6)==False\n\n"}
{"task_id": "MBPP/0456", "prompt": "Write a function to reverse strings in a given list of string values.", "entry_point": "reverse_string_list", "function_name": "def reverse_string_list(stringlist)", "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert candidate(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert candidate(['jack','john','mary'])==['kcaj','nhoj','yram']\n\n"}
{"task_id": "MBPP/0457", "prompt": "Write a python function to find the sublist having minimum length.", "entry_point": "Find_Min", "function_name": "def Find_Min(lst)", "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1],[1,2],[1,2,3]]) == [1]\n    assert candidate([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert candidate([['x'],['x','y'],['x','y','z']]) == ['x']\n\n"}
{"task_id": "MBPP/0458", "prompt": "Write a function to find the area of a rectangle.", "entry_point": "rectangle_area", "function_name": "def rectangle_area(l, b)", "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(10,5)==50\n    assert candidate(4,2)==8\n\n"}
{"task_id": "MBPP/0459", "prompt": "Write a function to remove uppercase substrings from a given string by using regex.", "entry_point": "remove_uppercase", "function_name": "def remove_uppercase(str1)", "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n\n"}
{"task_id": "MBPP/0460", "prompt": "Write a python function to get the first element of each sublist.", "entry_point": "Extract", "function_name": "def Extract(lst)", "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1,2,3],[4, 5]]) == [1,4]\n    assert candidate([[9,8,1],[1,2]]) == [9,1]\n\n"}
{"task_id": "MBPP/0461", "prompt": "Write a python function to count the upper case characters in a given string.", "entry_point": "upper_ctr", "function_name": "def upper_ctr(str)", "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('PYthon') == 1\n    assert candidate('BigData') == 1\n    assert candidate('program') == 0\n\n"}
{"task_id": "MBPP/0462", "prompt": "Write a function to find all possible combinations of the elements of a given list.", "entry_point": "combinations_list", "function_name": "def combinations_list(list1)", "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n\n"}
{"task_id": "MBPP/0463", "prompt": "Write a function to find the maximum product subarray of the given array.", "entry_point": "max_subarray_product", "function_name": "def max_subarray_product(arr)", "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180 \n    assert candidate([-2, -40, 0, -2, -3]) == 80\n\n"}
{"task_id": "MBPP/0464", "prompt": "Write a function to check if all values are same in a dictionary.", "entry_point": "check_value", "function_name": "def check_value(dict, n)", "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n\n"}
{"task_id": "MBPP/0465", "prompt": "Write a function to drop empty items from a given dictionary.", "entry_point": "drop_empty", "function_name": "def drop_empty(dict1)", "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert candidate({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert candidate({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n\n"}
{"task_id": "MBPP/0466", "prompt": "Write a function to find the peak element in the given array.", "entry_point": "find_peak_util", "function_name": "def find_peak_util(arr, low, high, n)", "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n    assert find_peak([2, 3, 4, 5, 6], 5) == 4\n    assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 \n\n"}
{"task_id": "MBPP/0467", "prompt": "Write a python function to convert decimal number to octal number.", "entry_point": "decimal_to_Octal", "function_name": "def decimal_to_Octal(deciNum)", "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n    assert candidate(33) == 41\n\n"}
{"task_id": "MBPP/0468", "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "entry_point": "max_product", "function_name": "def max_product(arr, n)", "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([3, 100, 4, 5, 150, 6], 6) == 45000 \n    assert candidate([4, 42, 55, 68, 80], 5) == 50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 \n\n"}
{"task_id": "MBPP/0469", "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "entry_point": "max_profit", "function_name": "def max_profit(price, k)", "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n    assert candidate([2, 4, 7, 5, 4, 3, 5], 2) == 7\n    assert candidate([10, 6, 8, 4, 2], 2) == 2\n\n"}
{"task_id": "MBPP/0470", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.", "entry_point": "add_pairwise", "function_name": "def add_pairwise(test_tup)", "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n\n"}
{"task_id": "MBPP/0471", "prompt": "Write a python function to find remainder of array multiplication divided by n.", "entry_point": "find_remainder", "function_name": "def find_remainder(arr, lens, n)", "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n    assert candidate([1,1,1],3,1) == 0\n    assert candidate([1,2,1],3,2) == 0\n\n"}
{"task_id": "MBPP/0472", "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.", "entry_point": "check_Consecutive", "function_name": "def check_Consecutive(l)", "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5]) == True\n    assert candidate([1,2,3,5,6]) == False\n    assert candidate([1,2,1]) == False\n\n"}
{"task_id": "MBPP/0473", "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "entry_point": "tuple_intersection", "function_name": "def tuple_intersection(test_list1, test_list2)", "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert candidate([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert candidate([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n\n"}
{"task_id": "MBPP/0474", "prompt": "Write a function to replace characters in a string.", "entry_point": "replace_char", "function_name": "def replace_char(str1, ch, newch)", "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"polygon\",'y','l')==(\"pollgon\")\n    assert candidate(\"character\",'c','a')==(\"aharaater\")\n    assert candidate(\"python\",'l','a')==(\"python\")\n\n"}
{"task_id": "MBPP/0475", "prompt": "Write a function to sort counter by value.", "entry_point": "sort_counter", "function_name": "def sort_counter(dict1)", "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert candidate({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\n"}
{"task_id": "MBPP/0476", "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.", "entry_point": "big_sum", "function_name": "def big_sum(nums)", "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == 4\n    assert candidate([-1,2,3,4]) == 3\n    assert candidate([2,3,6]) == 8\n\n"}
{"task_id": "MBPP/0477", "prompt": "Write a python function to convert the given string to lower case.", "entry_point": "is_lower", "function_name": "def is_lower(string)", "canonical_solution": "def is_lower(string):\r\n  return (string.lower())", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"InValid\") == \"invalid\"\n    assert candidate(\"TruE\") == \"true\"\n    assert candidate(\"SenTenCE\") == \"sentence\"\n\n"}
{"task_id": "MBPP/0478", "prompt": "Write a function to remove lowercase substrings from a given string.", "entry_point": "remove_lowercase", "function_name": "def remove_lowercase(str1)", "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"PYTHon\")==('PYTH')\n    assert candidate(\"FInD\")==('FID')\n    assert candidate(\"STRinG\")==('STRG')\n\n"}
{"task_id": "MBPP/0479", "prompt": "Write a python function to find the first digit of a given number.", "entry_point": "first_Digit", "function_name": "def first_Digit(n)", "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(123) == 1\n    assert candidate(456) == 4\n    assert candidate(12) == 1\n\n"}
{"task_id": "MBPP/0480", "prompt": "Write a python function to find the maximum occurring character in a given string.", "entry_point": "get_max_occuring_char", "function_name": "def get_max_occuring_char(str1)", "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"data\") == \"a\"\n    assert candidate(\"create\") == \"e\"\n    assert candidate(\"brilliant girl\") == \"i\"\n\n"}
{"task_id": "MBPP/0481", "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "entry_point": "is_subset_sum", "function_name": "def is_subset_sum(set, n, sum)", "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 30) == False\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 15) == True\n\n"}
{"task_id": "MBPP/0482", "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "entry_point": "match", "function_name": "def match(text)", "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"Geeks\") == 'Yes'\n    assert candidate(\"geeksforGeeks\") == 'Yes'\n    assert candidate(\"geeks\") == 'No'\n\n"}
{"task_id": "MBPP/0483", "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.", "entry_point": "first_Factorial_Divisible_Number", "function_name": "def first_Factorial_Divisible_Number(x)", "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 5\n    assert candidate(15) == 5\n    assert candidate(5) == 4\n\n"}
{"task_id": "MBPP/0484", "prompt": "Write a function to remove the matching tuples from the given two tuples.", "entry_point": "remove_matching_tuple", "function_name": "def remove_matching_tuple(test_list1, test_list2)", "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n    assert candidate([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n    assert candidate([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]\n\n"}
{"task_id": "MBPP/0485", "prompt": "Write a function to find the largest palindromic number in the given array.", "entry_point": "is_palindrome", "function_name": "def is_palindrome(n)", "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n    assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\n    assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9\n\n"}
{"task_id": "MBPP/0486", "prompt": "Write a function to compute binomial probability for the given number.", "entry_point": "nCr", "function_name": "def nCr(n, r)", "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(11, 6, 2.0/4) == 0.2255859375\n    assert binomial_probability(12, 7, 3.0/5) == 0.227030335488\n\n"}
{"task_id": "MBPP/0487", "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "entry_point": "sort_tuple", "function_name": "def sort_tuple(tup)", "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n    assert candidate([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\n    assert candidate([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]\n\n"}
{"task_id": "MBPP/0488", "prompt": "Write a function to find the area of a pentagon.", "entry_point": "area_pentagon", "function_name": "def area_pentagon(a)", "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5)==43.01193501472417\n    assert candidate(10)==172.0477400588967\n    assert candidate(15)==387.10741513251753\n\n"}
{"task_id": "MBPP/0489", "prompt": "Write a python function to find the frequency of the largest value in a given array.", "entry_point": "frequency_Of_Largest", "function_name": "def frequency_Of_Largest(n, arr)", "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,[1,2,3,4,4]) == 2\n    assert candidate(3,[5,6,5]) == 1\n    assert candidate(4,[2,7,7,7]) == 3\n\n"}
{"task_id": "MBPP/0490", "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "entry_point": "extract_symmetric", "function_name": "def extract_symmetric(test_list)", "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n    assert candidate([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\n    assert candidate([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}\n\n"}
{"task_id": "MBPP/0491", "prompt": "Write a function to find the sum of geometric progression series.", "entry_point": "sum_gp", "function_name": "def sum_gp(a, n, r)", "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,5,2)==31\n    assert candidate(1,5,4)==341\n    assert candidate(2,6,3)==728\n\n"}
{"task_id": "MBPP/0492", "prompt": "Write a function to search an element in the given array by using binary search.", "entry_point": "binary_search", "function_name": "def binary_search(item_list, item)", "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,5,8], 6) == False\n    assert candidate([7, 8, 9, 10, 13], 10) == True\n    assert candidate([11, 13, 14, 19, 22, 36], 23) == False\n\n"}
{"task_id": "MBPP/0493", "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "entry_point": "calculate_polygons", "function_name": "def calculate_polygons(startx, starty, endx, endy, radius)", "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n    assert candidate(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n    assert candidate(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]\n\n"}
{"task_id": "MBPP/0494", "prompt": "Write a function to convert the given binary tuple to integer.", "entry_point": "binary_to_integer", "function_name": "def binary_to_integer(test_tup)", "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 1, 0, 1, 0, 0, 1)) == '105'\n    assert candidate((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\n    assert candidate((1, 1, 0, 1, 0, 1)) == '53'\n\n"}
{"task_id": "MBPP/0495", "prompt": "Write a function to remove lowercase substrings from a given string by using regex.", "entry_point": "remove_lowercase", "function_name": "def remove_lowercase(str1)", "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert candidate('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\n    assert candidate('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'\n\n"}
{"task_id": "MBPP/0496", "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "entry_point": "heap_queue_smallest", "function_name": "def heap_queue_smallest(nums, n)", "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]\n\n"}
{"task_id": "MBPP/0497", "prompt": "Write a function to find the surface area of a cone.", "entry_point": "surfacearea_cone", "function_name": "def surfacearea_cone(r, h)", "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,12)==282.7433388230814\n    assert candidate(10,15)==880.5179353159282\n    assert candidate(19,17)==2655.923961165254\n\n"}
{"task_id": "MBPP/0498", "prompt": "Write a python function to find gcd of two positive integers.", "entry_point": "gcd", "function_name": "def gcd(x, y)", "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12, 17) == 1\n    assert candidate(4,6) == 2\n    assert candidate(2,9) == 1\n\n"}
{"task_id": "MBPP/0499", "prompt": "Write a function to find the diameter of a circle.", "entry_point": "diameter_circle", "function_name": "def diameter_circle(r)", "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==20\n    assert candidate(40)==80\n    assert candidate(15)==30\n\n"}
{"task_id": "MBPP/0500", "prompt": "Write a function to concatenate all elements of the given list into a string.", "entry_point": "concatenate_elements", "function_name": "def concatenate_elements(list)", "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n    assert candidate([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\n    assert candidate([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'\n\n"}
{"task_id": "MBPP/0501", "prompt": "Write a python function to find common divisor between two numbers in a given pair.", "entry_point": "ngcd", "function_name": "def ngcd(x, y)", "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert num_comm_div(2,4) == 2\n    assert num_comm_div(2,8) == 2\n    assert num_comm_div(12,24) == 6\n\n"}
{"task_id": "MBPP/0502", "prompt": "Write a python function to find remainder of two numbers.", "entry_point": "find", "function_name": "def find(n, m)", "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3,3) == 0\n    assert candidate(10,3) == 1\n    assert candidate(16,5) == 1\n\n"}
{"task_id": "MBPP/0503", "prompt": "Write a function to add consecutive numbers of a given list.", "entry_point": "add_consecutive_nums", "function_name": "def add_consecutive_nums(nums)", "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n    assert candidate([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]\n\n"}
{"task_id": "MBPP/0504", "prompt": "Write a python function to find the cube sum of first n natural numbers.", "entry_point": "sum_Of_Series", "function_name": "def sum_Of_Series(n)", "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == 225\n    assert candidate(2) == 9\n    assert candidate(3) == 36\n\n"}
{"task_id": "MBPP/0505", "prompt": "Write a function to move all zeroes to the end of the given array.", "entry_point": "re_order", "function_name": "def re_order(A)", "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    assert candidate([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\n    assert candidate([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]\n\n"}
{"task_id": "MBPP/0506", "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).", "entry_point": "permutation_coefficient", "function_name": "def permutation_coefficient(n, k)", "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10, 2) == 90\n    assert candidate(10, 3) == 720\n    assert candidate(10, 1) == 10\n\n"}
{"task_id": "MBPP/0507", "prompt": "Write a function to remove specific words from a given list.", "entry_point": "remove_words", "function_name": "def remove_words(list1, removewords)", "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']\n\n"}
{"task_id": "MBPP/0508", "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.", "entry_point": "same_order", "function_name": "def same_order(l1, l2)", "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n    assert candidate([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\n    assert candidate([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\n"}
{"task_id": "MBPP/0509", "prompt": "Write a python function to find the average of odd numbers till a given odd number.", "entry_point": "average_Odd", "function_name": "def average_Odd(n)", "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(9) == 5\n    assert candidate(5) == 3\n    assert candidate(11) == 6\n\n"}
{"task_id": "MBPP/0510", "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "entry_point": "no_of_subsequences", "function_name": "def no_of_subsequences(arr, k)", "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4], 10) == 11\n    assert candidate([4,8,7,2], 50) == 9\n    assert candidate([5,6,7,8], 15) == 4\n\n"}
{"task_id": "MBPP/0511", "prompt": "Write a python function to find minimum sum of factors of a given number.", "entry_point": "find_Min_Sum", "function_name": "def find_Min_Sum(num)", "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12) == 7\n    assert candidate(105) == 15\n    assert candidate(2) == 2\n\n"}
{"task_id": "MBPP/0512", "prompt": "Write a function to count the element frequency in the mixed nested tuple.", "entry_point": "flatten", "function_name": "def flatten(test_tuple)", "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n    assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n    assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n\n"}
{"task_id": "MBPP/0513", "prompt": "Write a function to convert tuple into list by adding the given string after every element.", "entry_point": "add_str", "function_name": "def add_str(test_tup, K)", "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n    assert candidate((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n    assert candidate((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']\n\n"}
{"task_id": "MBPP/0514", "prompt": "Write a function to find the summation of tuple elements in the given tuple list.", "entry_point": "sum_elements", "function_name": "def sum_elements(test_tup)", "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((7, 8, 9, 1, 10, 7)) == 42\n    assert candidate((1, 2, 3, 4, 5, 6)) == 21\n    assert candidate((11, 12 ,13 ,45, 14)) == 95\n\n"}
{"task_id": "MBPP/0515", "prompt": "Write a function to check if there is a subset with sum divisible by m.", "entry_point": "modular_sum", "function_name": "def modular_sum(arr, n, m)", "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 7, 5], 4, 6) == True\n    assert candidate([1, 7], 2, 5) == False\n    assert candidate([1, 6], 2, 5) == False\n\n"}
{"task_id": "MBPP/0516", "prompt": "Write a function to sort a list of elements using radix sort.", "entry_point": "radix_sort", "function_name": "def radix_sort(nums)", "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\n    assert candidate([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\n    assert candidate([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]\n\n"}
{"task_id": "MBPP/0517", "prompt": "Write a python function to find the largest postive number from the given list.", "entry_point": "largest_pos", "function_name": "def largest_pos(list1)", "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,-1]) == 4\n    assert candidate([0,1,2,-5,-1,6]) == 6\n    assert candidate([0,0,1,0]) == 1\n\n"}
{"task_id": "MBPP/0518", "prompt": "Write a function to find the square root of a perfect number.", "entry_point": "sqrt_root", "function_name": "def sqrt_root(num)", "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4)==2\n    assert candidate(16)==4\n    assert candidate(400)==20\n\n"}
{"task_id": "MBPP/0519", "prompt": "Write a function to calculate volume of a tetrahedron.", "entry_point": "volume_tetrahedron", "function_name": "def volume_tetrahedron(num)", "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==117.85\n    assert candidate(15)==397.75\n    assert candidate(20)==942.81\n\n"}
{"task_id": "MBPP/0520", "prompt": "Write a function to find the lcm of the given array elements.", "entry_point": "find_lcm", "function_name": "def find_lcm(num1, num2)", "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert get_lcm([2, 7, 3, 9, 4]) == 252\n    assert get_lcm([1, 2, 8, 3]) == 24\n    assert get_lcm([3, 8, 4, 10, 5]) == 120\n\n"}
{"task_id": "MBPP/0521", "prompt": "Write a function to print check if the triangle is scalene or not.", "entry_point": "check_isosceles", "function_name": "def check_isosceles(x, y, z)", "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(6,8,12)==True\n    assert candidate(6,6,12)==False\n    assert candidate(6,15,20)==True\n\n"}
{"task_id": "MBPP/0522", "prompt": "Write a function to find the longest bitonic subsequence for the given array.", "entry_point": "lbs", "function_name": "def lbs(arr)", "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\n    assert candidate([1, 11, 2, 10, 4, 5, 2, 1]) == 6\n    assert candidate([80, 60, 30, 40, 20, 10]) == 5\n\n"}
{"task_id": "MBPP/0523", "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "entry_point": "check_string", "function_name": "def check_string(str1)", "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\n    assert candidate('123python')==['String must have 1 upper case character.']\n    assert candidate('123Python')==['Valid string.']\n\n"}
{"task_id": "MBPP/0524", "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.", "entry_point": "max_sum_increasing_subsequence", "function_name": "def max_sum_increasing_subsequence(arr, n)", "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7) == 106\n    assert candidate([3, 4, 5, 10], 4) == 22\n    assert candidate([10, 5, 4, 3], 4) == 10\n\n"}
{"task_id": "MBPP/0525", "prompt": "Write a python function to check whether two given lines are parallel or not.", "entry_point": "parallel_lines", "function_name": "def parallel_lines(line1, line2)", "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2,3,4], [2,3,8]) == True\n    assert candidate([2,3,4], [4,-3,8]) == False\n    assert candidate([3,3],[5,5]) == True\n\n"}
{"task_id": "MBPP/0526", "prompt": "Write a python function to capitalize first and last letters of each word of a given string.", "entry_point": "capitalize_first_last_letters", "function_name": "def capitalize_first_last_letters(str1)", "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python\") == \"PythoN\"\n    assert candidate(\"bigdata\") == \"BigdatA\"\n    assert candidate(\"Hadoop\") == \"HadooP\"\n\n"}
{"task_id": "MBPP/0527", "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.", "entry_point": "get_pairs_count", "function_name": "def get_pairs_count(arr, n, sum)", "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 5, 7, -1, 5], 5, 6) == 3\n    assert candidate([1, 5, 7, -1], 4, 6) == 2\n    assert candidate([1, 1, 1, 1], 4, 2) == 6\n\n"}
{"task_id": "MBPP/0528", "prompt": "Write a function to find the list of lists with minimum length.", "entry_point": "min_length", "function_name": "def min_length(list1)", "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\n    assert candidate([[5], [15,20,25]])==(1, [5])\n\n"}
{"task_id": "MBPP/0529", "prompt": "Write a function to find the nth jacobsthal-lucas number.", "entry_point": "jacobsthal_lucas", "function_name": "def jacobsthal_lucas(n)", "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == 31\n    assert candidate(2) == 5\n    assert candidate(4) == 17\n\n"}
{"task_id": "MBPP/0530", "prompt": "Write a function to find the ration of negative numbers in an array of integers.", "entry_point": "negative_count", "function_name": "def negative_count(nums)", "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44\n\n"}
{"task_id": "MBPP/0531", "prompt": "Write a function to find minimum number of coins that make a given value.", "entry_point": "min_coins", "function_name": "def min_coins(coins, m, V)", "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([9, 6, 5, 1] ,4,11)==2\n    assert candidate([4,5,6,7,8,9],6,9)==1\n    assert candidate([1, 2, 3],3,4)==2\n\n"}
{"task_id": "MBPP/0532", "prompt": "Write a function to check if the two given strings are permutations of each other.", "entry_point": "check_permutation", "function_name": "def check_permutation(str1, str2)", "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abc\", \"cba\") == True\n    assert candidate(\"test\", \"ttew\") == False\n    assert candidate(\"xxyz\", \"yxzx\") == True\n\n"}
{"task_id": "MBPP/0533", "prompt": "Write a function to remove particular data type elements from the given tuple.", "entry_point": "remove_datatype", "function_name": "def remove_datatype(test_tuple, data_type)", "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\n    assert candidate((7, 8, 9, \"SR\"), str) == [7, 8, 9]\n    assert candidate((7, 1.1, 2, 2.2), float) == [7, 2]\n\n"}
{"task_id": "MBPP/0534", "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "entry_point": "search_literal", "function_name": "def search_literal(pattern, text)", "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('python','python programming language')==(0,6)\n    assert candidate('programming','python programming language')==(7,18)\n    assert candidate('language','python programming language')==(19,27)\n\n"}
{"task_id": "MBPP/0535", "prompt": "Write a function to find the top or bottom surface area of a cylinder.", "entry_point": "topbottom_surfacearea", "function_name": "def topbottom_surfacearea(r)", "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==314.15000000000003\n    assert candidate(5)==78.53750000000001\n    assert candidate(4)==50.264\n\n"}
{"task_id": "MBPP/0536", "prompt": "Write a function to select the nth items of a list.", "entry_point": "nth_items", "function_name": "def nth_items(list, n)", "canonical_solution": "def nth_items(list,n):\r\n return list[::n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \n    assert candidate([10,15,19,17,16,18],3)==[10,17] \n    assert candidate([14,16,19,15,17],4)==[14,17]\n\n"}
{"task_id": "MBPP/0537", "prompt": "Write a python function to find the first repeated word in a given string.", "entry_point": "first_repeated_word", "function_name": "def first_repeated_word(str1)", "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"ab ca bc ab\") == \"ab\"\n    assert candidate(\"ab ca bc\") == 'None'\n    assert candidate(\"ab ca bc ca ab bc\") == \"ca\"\n\n"}
{"task_id": "MBPP/0538", "prompt": "Write a python function to convert a given string list to a tuple.", "entry_point": "string_list_to_tuple", "function_name": "def string_list_to_tuple(str1)", "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert candidate((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\n    assert candidate((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')\n\n"}
{"task_id": "MBPP/0539", "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.", "entry_point": "basesnum_coresspondingnum", "function_name": "def basesnum_coresspondingnum(bases_num, index)", "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n    assert candidate([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\n\n"}
{"task_id": "MBPP/0540", "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.", "entry_point": "find_Diff", "function_name": "def find_Diff(arr, n)", "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,2,7,8,4,5,1,4],10) == 2\n    assert candidate([1,7,9,2,3,3,1,3,3],9) == 3\n    assert candidate([1,2,1,2],4) == 0\n\n"}
{"task_id": "MBPP/0541", "prompt": "Write a function to find if the given number is abundant or not.", "entry_point": "get_sum", "function_name": "def get_sum(n)", "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert check_abundant(12) == True\n    assert check_abundant(15) == False\n    assert check_abundant(18) == True\n\n"}
{"task_id": "MBPP/0542", "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "entry_point": "fill_spaces", "function_name": "def fill_spaces(text)", "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\n    assert candidate('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\n    assert candidate('Probass Curve Audio') == 'Probass:Curve:Audio'\n\n"}
{"task_id": "MBPP/0543", "prompt": "Write a function to add two numbers and print number of digits of sum.", "entry_point": "count_digits", "function_name": "def count_digits(num1, num2)", "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(9875,10)==(4)\n    assert candidate(98759853034,100)==(11)\n    assert candidate(1234567,500)==(7)\n\n"}
{"task_id": "MBPP/0544", "prompt": "Write a function to flatten the tuple list to a string.", "entry_point": "flatten_tuple", "function_name": "def flatten_tuple(test_list)", "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\n    assert candidate([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\n    assert candidate([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'\n\n"}
{"task_id": "MBPP/0545", "prompt": "Write a python function to toggle only first and last bits of a given number.", "entry_point": "take_L_and_F_set_bits", "function_name": "def take_L_and_F_set_bits(n)", "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert toggle_F_and_L_bits(10) == 3\n    assert toggle_F_and_L_bits(15) == 6\n    assert toggle_F_and_L_bits(20) == 5\n\n"}
{"task_id": "MBPP/0546", "prompt": "Write a function to find the last occurrence of a character in a string.", "entry_point": "last_occurence_char", "function_name": "def last_occurence_char(string, char)", "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"hello world\",'l')==10\n    assert candidate(\"language\",'g')==7\n    assert candidate(\"little\",'y')==None\n\n"}
{"task_id": "MBPP/0547", "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.", "entry_point": "Total_Hamming_Distance", "function_name": "def Total_Hamming_Distance(n)", "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4) == 7\n    assert candidate(2) == 3\n    assert candidate(5) == 8\n\n"}
{"task_id": "MBPP/0548", "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.", "entry_point": "longest_increasing_subsequence", "function_name": "def longest_increasing_subsequence(arr)", "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 5\n    assert candidate([3, 10, 2, 1, 20]) == 3\n    assert candidate([50, 3, 10, 7, 40, 80]) == 4 \n\n"}
{"task_id": "MBPP/0549", "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.", "entry_point": "odd_Num_Sum", "function_name": "def odd_Num_Sum(n)", "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(2) == 244\n    assert candidate(3) == 3369\n\n"}
{"task_id": "MBPP/0550", "prompt": "Write a python function to find the maximum element in a sorted and rotated array.", "entry_point": "find_Max", "function_name": "def find_Max(arr, low, high)", "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2,3,5,6,9],0,4) == 9\n    assert candidate([3,4,5,2,1],0,4) == 5\n    assert candidate([1,2,3],0,2) == 3\n\n"}
{"task_id": "MBPP/0551", "prompt": "Write a function to extract a specified column from a given nested list.", "entry_point": "extract_column", "function_name": "def extract_column(list1, n)", "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]\n\n"}
{"task_id": "MBPP/0552", "prompt": "Write a python function to check whether a given sequence is linear or not.", "entry_point": "Seq_Linear", "function_name": "def Seq_Linear(seq_nums)", "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\"", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0,2,4,6,8,10]) == \"Linear Sequence\"\n    assert candidate([1,2,3]) == \"Linear Sequence\"\n    assert candidate([1,5,2]) == \"Non Linear Sequence\"\n\n"}
{"task_id": "MBPP/0553", "prompt": "Write a function to convert the given tuple to a floating-point number.", "entry_point": "tuple_to_float", "function_name": "def tuple_to_float(test_tup)", "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((4, 56)) == 4.56\n    assert candidate((7, 256)) == 7.256\n    assert candidate((8, 123)) == 8.123\n\n"}
{"task_id": "MBPP/0554", "prompt": "Write a python function to find odd numbers from a mixed list.", "entry_point": "Split", "function_name": "def Split(list)", "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6]) == [1,3,5]\n    assert candidate([10,11,12,13]) == [11,13]\n    assert candidate([7,8,9,1]) == [7,9,1]\n\n"}
{"task_id": "MBPP/0555", "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "entry_point": "difference", "function_name": "def difference(n)", "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 30\n    assert candidate(5) == 210\n    assert candidate(2) == 6\n\n"}
{"task_id": "MBPP/0556", "prompt": "Write a python function to count the pairs with xor as an odd number.", "entry_point": "find_Odd_Pair", "function_name": "def find_Odd_Pair(A, N)", "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([5,4,7,2,1],5) == 6\n    assert candidate([7,2,8,1,0,5,11],7) == 12\n    assert candidate([1,2,3],3) == 2\n\n"}
{"task_id": "MBPP/0557", "prompt": "Write a function to toggle characters case in a string.", "entry_point": "toggle_string", "function_name": "def toggle_string(string)", "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"Python\")==(\"pYTHON\")\n    assert candidate(\"Pangram\")==(\"pANGRAM\")\n    assert candidate(\"LIttLE\")==(\"liTTle\")\n\n"}
{"task_id": "MBPP/0558", "prompt": "Write a python function to find the digit distance between two integers.", "entry_point": "digit_distance_nums", "function_name": "def digit_distance_nums(n1, n2)", "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(23,56) == 6\n    assert candidate(123,256) == 7\n\n"}
{"task_id": "MBPP/0559", "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.", "entry_point": "max_sub_array_sum", "function_name": "def max_sub_array_sum(a, size)", "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n\n"}
{"task_id": "MBPP/0560", "prompt": "Write a function to find the union of elements of the given tuples.", "entry_point": "union_elements", "function_name": "def union_elements(test_tup1, test_tup2)", "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n    assert candidate((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\n    assert candidate((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n\n"}
{"task_id": "MBPP/0561", "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "entry_point": "assign_elements", "function_name": "def assign_elements(test_list)", "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\n    assert candidate([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\n    assert candidate([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}\n\n"}
{"task_id": "MBPP/0562", "prompt": "Write a python function to find the maximum length of sublist.", "entry_point": "Find_Max_Length", "function_name": "def Find_Max_Length(lst)", "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1],[1,4],[5,6,7,8]]) == 4\n    assert candidate([[0,1],[2,2,],[3,2,1]]) == 3\n    assert candidate([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n\n"}
{"task_id": "MBPP/0563", "prompt": "Write a function to extract values between quotation marks of a string.", "entry_point": "extract_values", "function_name": "def extract_values(text)", "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n    assert candidate('\"python\",\"program\",\"language\"')==['python','program','language']\n    assert candidate('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n\n"}
{"task_id": "MBPP/0564", "prompt": "Write a python function to count unequal element pairs from the given array.", "entry_point": "count_Pairs", "function_name": "def count_Pairs(arr, n)", "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,1],3) == 2\n    assert candidate([1,1,1,1],4) == 0\n    assert candidate([1,2,3,4,5],5) == 10\n\n"}
{"task_id": "MBPP/0565", "prompt": "Write a python function to split a string into characters.", "entry_point": "split", "function_name": "def split(word)", "canonical_solution": "def split(word): \r\n    return [char for char in word] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('python') == ['p','y','t','h','o','n']\n    assert candidate('Name') == ['N','a','m','e']\n    assert candidate('program') == ['p','r','o','g','r','a','m']\n\n"}
{"task_id": "MBPP/0566", "prompt": "Write a function to get the sum of a non-negative integer.", "entry_point": "sum_digits", "function_name": "def sum_digits(n)", "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(345)==12\n    assert candidate(12)==3\n    assert candidate(97)==16\n\n"}
{"task_id": "MBPP/0567", "prompt": "Write a function to check whether a specified list is sorted or not.", "entry_point": "issort_list", "function_name": "def issort_list(list1)", "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,4,6,8,10,12,14,16,17])==True\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n    assert candidate([1, 2, 4, 6, 8, 10,15,14,20])==False\n\n"}
{"task_id": "MBPP/0568", "prompt": "Write a function to create a list of empty dictionaries.", "entry_point": "empty_list", "function_name": "def empty_list(length)", "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5)==[{},{},{},{},{}]\n    assert candidate(6)==[{},{},{},{},{},{}]\n    assert candidate(7)==[{},{},{},{},{},{},{}]\n\n"}
{"task_id": "MBPP/0569", "prompt": "Write a function to sort each sublist of strings in a given list of lists.", "entry_point": "sort_sublists", "function_name": "def sort_sublists(list1)", "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert candidate([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n\n"}
{"task_id": "MBPP/0570", "prompt": "Write a function to remove words from a given list of strings containing a character or string.", "entry_point": "remove_words", "function_name": "def remove_words(list1, charlist)", "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\n    assert candidate(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\n    assert candidate(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']\n\n"}
{"task_id": "MBPP/0571", "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "entry_point": "max_sum_pair_diff_lessthan_K", "function_name": "def max_sum_pair_diff_lessthan_K(arr, N, K)", "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\n    assert candidate([5, 15, 10, 300], 4, 12) == 25\n    assert candidate([1, 2, 3, 4, 5, 6], 6, 6) == 21\n\n"}
{"task_id": "MBPP/0572", "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.", "entry_point": "two_unique_nums", "function_name": "def two_unique_nums(nums)", "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,2,3,4,5]) == [1, 4, 5]\n    assert candidate([1,2,3,2,4,5]) == [1, 3, 4, 5]\n    assert candidate([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n\n"}
{"task_id": "MBPP/0573", "prompt": "Write a python function to calculate the product of the unique numbers of a given list.", "entry_point": "unique_product", "function_name": "def unique_product(list_data)", "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n    assert candidate([1, 2, 3, 1,]) == 6\n    assert candidate([7, 8, 9, 0, 1, 1]) == 0\n\n"}
{"task_id": "MBPP/0574", "prompt": "Write a function to find the surface area of a cylinder.", "entry_point": "surfacearea_cylinder", "function_name": "def surfacearea_cylinder(r, h)", "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,5)==942.45\n    assert candidate(4,5)==226.18800000000002\n    assert candidate(4,10)==351.848\n\n"}
{"task_id": "MBPP/0575", "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.", "entry_point": "count_no", "function_name": "def count_no(A, N, L, R)", "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2,3,1,10) == 5\n    assert candidate(3,6,4,20) == 11\n    assert candidate(5,10,4,20) == 16\n\n"}
{"task_id": "MBPP/0576", "prompt": "Write a python function to check whether an array is subarray of another or not.", "entry_point": "is_Sub_Array", "function_name": "def is_Sub_Array(A, B, n, m)", "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,4,3,5],[1,2],4,2) == False\n    assert candidate([1,2,1],[1,2,1],3,3) == True\n    assert candidate([1,0,2,2],[2,2,0],4,3) ==False\n\n"}
{"task_id": "MBPP/0577", "prompt": "Write a python function to find the last digit in factorial of a given number.", "entry_point": "last_Digit_Factorial", "function_name": "def last_Digit_Factorial(n)", "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4) == 4\n    assert candidate(21) == 0\n    assert candidate(30) == 0\n\n"}
{"task_id": "MBPP/0578", "prompt": "Write a function to interleave lists of the same length.", "entry_point": "interleave_lists", "function_name": "def interleave_lists(list1, list2, list3)", "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert candidate([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\n    assert candidate([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n\n"}
{"task_id": "MBPP/0579", "prompt": "Write a function to find the dissimilar elements in the given two tuples.", "entry_point": "find_dissimilar", "function_name": "def find_dissimilar(test_tup1, test_tup2)", "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n    assert candidate((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n    assert candidate((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n\n"}
{"task_id": "MBPP/0580", "prompt": "Write a function to extract the even elements in the nested mixed tuple.", "entry_point": "even_ele", "function_name": "def even_ele(test_tuple, even_fnc)", "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n    assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n    assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n\n"}
{"task_id": "MBPP/0581", "prompt": "Write a python function to find the surface area of the square pyramid.", "entry_point": "surface_Area", "function_name": "def surface_Area(b, s)", "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3,4) == 33\n    assert candidate(4,5) == 56\n    assert candidate(1,2) == 5\n\n"}
{"task_id": "MBPP/0582", "prompt": "Write a function to check if a dictionary is empty or not.", "entry_point": "my_dict", "function_name": "def my_dict(dict1)", "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({10})==False\n    assert candidate({11})==False\n    assert candidate({})==True\n\n"}
{"task_id": "MBPP/0583", "prompt": "Write a function for nth catalan number.", "entry_point": "catalan_number", "function_name": "def catalan_number(num)", "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==16796\n    assert candidate(9)==4862\n    assert candidate(7)==429\n\n"}
{"task_id": "MBPP/0584", "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "entry_point": "find_adverbs", "function_name": "def find_adverbs(text)", "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n    assert candidate(\"Please handle the situation carefuly\") == '28-36: carefuly'\n    assert candidate(\"Complete the task quickly\") == '18-25: quickly'\n\n"}
{"task_id": "MBPP/0585", "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.", "entry_point": "expensive_items", "function_name": "def expensive_items(items, n)", "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\n"}
{"task_id": "MBPP/0586", "prompt": "Write a python function to split the array and add the first part to the end.", "entry_point": "split_Arr", "function_name": "def split_Arr(a, n, k)", "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\n    assert candidate([1,2,3,4],4,1) == [2,3,4,1]\n    assert candidate([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]\n\n"}
{"task_id": "MBPP/0587", "prompt": "Write a function to convert a list to a tuple.", "entry_point": "list_tuple", "function_name": "def list_tuple(listx)", "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert candidate([58,44,56])==(58,44,56)\n\n"}
{"task_id": "MBPP/0588", "prompt": "Write a python function to find the difference between largest and smallest value in a given array.", "entry_point": "big_diff", "function_name": "def big_diff(nums)", "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4]) == 3\n    assert candidate([4,5,12]) == 8\n    assert candidate([9,2,3]) == 7\n\n"}
{"task_id": "MBPP/0589", "prompt": "Write a function to find perfect squares between two given numbers.", "entry_point": "perfect_squares", "function_name": "def perfect_squares(a, b)", "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,30)==[1, 4, 9, 16, 25]\n    assert candidate(50,100)==[64, 81, 100]\n    assert candidate(100,200)==[100, 121, 144, 169, 196]\n\n"}
{"task_id": "MBPP/0590", "prompt": "Write a function to convert polar coordinates to rectangular coordinates.", "entry_point": "polar_rect", "function_name": "def polar_rect(x, y)", "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    assert candidate(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n    assert candidate(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n\n"}
{"task_id": "MBPP/0591", "prompt": "Write a python function to interchange the first and last elements in a list.", "entry_point": "swap_List", "function_name": "def swap_List(newList)", "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n\n"}
{"task_id": "MBPP/0592", "prompt": "Write a python function to find sum of product of binomial co-efficients.", "entry_point": "binomial_Coeff", "function_name": "def binomial_Coeff(n, k)", "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert sum_Of_product(3) == 15\n    assert sum_Of_product(4) == 56\n    assert sum_Of_product(1) == 1\n\n"}
{"task_id": "MBPP/0593", "prompt": "Write a function to remove leading zeroes from an ip address.", "entry_point": "removezero_ip", "function_name": "def removezero_ip(ip)", "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"216.08.094.196\")==('216.8.94.196') \n    assert candidate(\"12.01.024\")==('12.1.24') \n    assert candidate(\"216.08.094.0196\")==('216.8.94.196') \n\n"}
{"task_id": "MBPP/0594", "prompt": "Write a function to find the difference of first even and odd number of a given list.", "entry_point": "diff_even_odd", "function_name": "def diff_even_odd(list1)", "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==3\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==1\n    assert candidate([1,5,7,9,10])==9\n\n"}
{"task_id": "MBPP/0595", "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.", "entry_point": "min_Swaps", "function_name": "def min_Swaps(str1, str2)", "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"1101\",\"1110\") == 1\n    assert candidate(\"111\",\"000\") == \"Not Possible\"\n    assert candidate(\"111\",\"110\") == \"Not Possible\"\n\n"}
{"task_id": "MBPP/0596", "prompt": "Write a function to find the size of the given tuple.", "entry_point": "tuple_size", "function_name": "def tuple_size(tuple_list)", "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n    assert candidate((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n    assert candidate(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n\n"}
{"task_id": "MBPP/0597", "prompt": "Write a function to find kth element from the given two sorted arrays.", "entry_point": "find_kth", "function_name": "def find_kth(arr1, arr2, m, n, k)", "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\n    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\n    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8\n\n"}
{"task_id": "MBPP/0598", "prompt": "Write a function to check whether the given number is armstrong or not.", "entry_point": "armstrong_number", "function_name": "def armstrong_number(number)", "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(153)==True\n    assert candidate(259)==False\n    assert candidate(4458)==False\n\n"}
{"task_id": "MBPP/0599", "prompt": "Write a function to find sum and average of first n natural numbers.", "entry_point": "sum_average", "function_name": "def sum_average(number)", "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==(55, 5.5)\n    assert candidate(15)==(120, 8.0)\n    assert candidate(20)==(210, 10.5)\n\n"}
{"task_id": "MBPP/0600", "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.", "entry_point": "is_Even", "function_name": "def is_Even(n)", "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1) == False\n    assert candidate(2) == True\n    assert candidate(3) == False\n\n"}
{"task_id": "MBPP/0601", "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.", "entry_point": "__init__", "function_name": "def __init__(self, a, b)", "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\n    assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\n    assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5\n\n"}
{"task_id": "MBPP/0602", "prompt": "Write a python function to find the first repeated character in a given string.", "entry_point": "first_repeated_char", "function_name": "def first_repeated_char(str1)", "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abcabc\") == \"a\"\n    assert candidate(\"abc\") == \"None\"\n    assert candidate(\"123123\") == \"1\"\n\n"}
{"task_id": "MBPP/0603", "prompt": "Write a function to get a lucid number smaller than or equal to n.", "entry_point": "get_ludic", "function_name": "def get_ludic(n)", "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == [1, 2, 3, 5, 7]\n    assert candidate(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert candidate(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n\n"}
{"task_id": "MBPP/0604", "prompt": "Write a function to reverse words in a given string.", "entry_point": "reverse_words", "function_name": "def reverse_words(s)", "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python program\")==(\"program python\")\n    assert candidate(\"java language\")==(\"language java\")\n    assert candidate(\"indian man\")==(\"man indian\")\n\n"}
{"task_id": "MBPP/0605", "prompt": "Write a function to check if the given integer is a prime number.", "entry_point": "prime_num", "function_name": "def prime_num(num)", "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(13)==True\n    assert candidate(7)==True\n    assert candidate(-1010)==False\n\n"}
{"task_id": "MBPP/0606", "prompt": "Write a function to convert degrees to radians.", "entry_point": "radian_degree", "function_name": "def radian_degree(degree)", "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(90)==1.5707963267948966\n    assert candidate(60)==1.0471975511965976\n    assert candidate(120)==2.0943951023931953\n\n"}
{"task_id": "MBPP/0607", "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "entry_point": "find_literals", "function_name": "def find_literals(text, pattern)", "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert candidate('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    assert candidate('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n\n"}
{"task_id": "MBPP/0608", "prompt": "Write a python function to find nth bell number.", "entry_point": "bell_Number", "function_name": "def bell_Number(n)", "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 2\n    assert candidate(3) == 5\n    assert candidate(4) == 15\n\n"}
{"task_id": "MBPP/0609", "prompt": "Write a python function to find minimum possible value for the given periodic function.", "entry_point": "floor_Min", "function_name": "def floor_Min(A, B, N)", "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20,30) == 15\n    assert candidate(1,2,1) == 0\n    assert candidate(11,10,9) == 9\n\n"}
{"task_id": "MBPP/0610", "prompt": "Write a python function to remove the k'th element from a given list.", "entry_point": "remove_kth_element", "function_name": "def remove_kth_element(list1, L)", "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n\n"}
{"task_id": "MBPP/0611", "prompt": "Write a function to find the maximum of nth column from the given tuple list.", "entry_point": "max_of_nth", "function_name": "def max_of_nth(test_list, N)", "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\n    assert candidate([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\n    assert candidate([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11\n\n"}
{"task_id": "MBPP/0612", "prompt": "Write a python function to merge the first and last elements separately in a list of lists.", "entry_point": "merge", "function_name": "def merge(lst)", "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert candidate([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\n\n"}
{"task_id": "MBPP/0613", "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "entry_point": "maximum_value", "function_name": "def maximum_value(test_list)", "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\n    assert candidate([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\n    assert candidate([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]\n\n"}
{"task_id": "MBPP/0614", "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "entry_point": "cummulative_sum", "function_name": "def cummulative_sum(test_list)", "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30\n    assert candidate([(2, 4), (6, 7, 8), (3, 7)]) == 37\n    assert candidate([(3, 5), (7, 8, 9), (4, 8)]) == 44\n\n"}
{"task_id": "MBPP/0615", "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.", "entry_point": "average_tuple", "function_name": "def average_tuple(nums)", "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n    assert candidate(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\n    assert candidate( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n\n"}
{"task_id": "MBPP/0616", "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "entry_point": "tuple_modulo", "function_name": "def tuple_modulo(test_tup1, test_tup2)", "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n\n"}
{"task_id": "MBPP/0617", "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "entry_point": "min_Jumps", "function_name": "def min_Jumps(a, b, d)", "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3,4,11)==3.5\n    assert candidate(3,4,0)==0\n    assert candidate(11,14,11)==1\n\n"}
{"task_id": "MBPP/0618", "prompt": "Write a function to divide two lists using map and lambda function.", "entry_point": "div_list", "function_name": "def div_list(nums1, nums2)", "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n    assert candidate([3,2],[1,4])==[3.0, 0.5]\n    assert candidate([90,120],[50,70])==[1.8, 1.7142857142857142]\n\n"}
{"task_id": "MBPP/0619", "prompt": "Write a function to move all the numbers in it to the given string.", "entry_point": "move_num", "function_name": "def move_num(test_str)", "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\n"}
{"task_id": "MBPP/0620", "prompt": "Write a function to find the largest subset where each pair is divisible.", "entry_point": "largest_subset", "function_name": "def largest_subset(a, n)", "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([ 1, 3, 6, 13, 17, 18 ], 6) == 4\n    assert candidate([10, 5, 3, 15, 20], 5) == 3\n    assert candidate([18, 1, 3, 6, 13, 17], 6) == 4\n\n"}
{"task_id": "MBPP/0621", "prompt": "Write a function to increment the numeric values in the given strings by k.", "entry_point": "increment_numerics", "function_name": "def increment_numerics(test_list, K)", "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\n    assert candidate([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\n    assert candidate([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']\n\n"}
{"task_id": "MBPP/0622", "prompt": "Write a function to find the median of two sorted arrays of same size.", "entry_point": "get_median", "function_name": "def get_median(arr1, arr2, n)", "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\n"}
{"task_id": "MBPP/0623", "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.", "entry_point": "nth_nums", "function_name": "def nth_nums(nums, n)", "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30],3)==([1000, 8000, 27000])\n    assert candidate([12,15],5)==([248832, 759375])\n\n"}
{"task_id": "MBPP/0624", "prompt": "Write a python function to convert the given string to upper case.", "entry_point": "is_upper", "function_name": "def is_upper(string)", "canonical_solution": "def is_upper(string):\r\n  return (string.upper())", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"person\") ==\"PERSON\"\n    assert candidate(\"final\") == \"FINAL\"\n    assert candidate(\"Valid\") == \"VALID\"\n\n"}
{"task_id": "MBPP/0625", "prompt": "Write a python function to interchange first and last elements in a given list.", "entry_point": "swap_List", "function_name": "def swap_List(newList)", "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == [3,2,1]\n    assert candidate([1,2,3,4,4]) == [4,2,3,4,1]\n    assert candidate([4,5,6]) == [6,5,4]\n\n"}
{"task_id": "MBPP/0626", "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.", "entry_point": "triangle_area", "function_name": "def triangle_area(r)", "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == 0\n    assert candidate(-1) == -1\n    assert candidate(2) == 4\n\n"}
{"task_id": "MBPP/0627", "prompt": "Write a python function to find the smallest missing number from the given array.", "entry_point": "find_First_Missing", "function_name": "def find_First_Missing(array, start, end)", "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0,1,2,3],0,3) == 4\n    assert candidate([0,1,2,6,9],0,4) == 3\n    assert candidate([2,3,5,8,9],0,4) == 0\n\n"}
{"task_id": "MBPP/0628", "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "entry_point": "replace_spaces", "function_name": "def replace_spaces(string)", "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n    assert candidate(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\n    assert candidate(\"I love Coding\") == 'I%20love%20Coding'\n\n"}
{"task_id": "MBPP/0629", "prompt": "Write a python function to find even numbers from a mixed list.", "entry_point": "Split", "function_name": "def Split(list)", "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5]) == [2,4]\n    assert candidate([4,5,6,7,8,0,1]) == [4,6,8,0]\n    assert candidate ([8,12,15,19]) == [8,12]\n\n"}
{"task_id": "MBPP/0630", "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "entry_point": "adjac", "function_name": "def adjac(ele, sub=[])", "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n\n"}
{"task_id": "MBPP/0631", "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "entry_point": "replace_spaces", "function_name": "def replace_spaces(text)", "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    assert candidate('The Avengers') == 'The_Avengers'\n    assert candidate('Fast and Furious') == 'Fast_and_Furious'\n\n"}
{"task_id": "MBPP/0632", "prompt": "Write a python function to move all zeroes to the end of the given list.", "entry_point": "move_zero", "function_name": "def move_zero(num_list)", "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n    assert candidate([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\n    assert candidate([0,1,0,1,1]) == [1,1,1,0,0]\n\n"}
{"task_id": "MBPP/0633", "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.", "entry_point": "pair_OR_Sum", "function_name": "def pair_OR_Sum(arr, n)", "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([5,9,7,6],4) == 47\n    assert candidate([7,3,5],3) == 12\n    assert candidate([7,3],2) == 4\n\n"}
{"task_id": "MBPP/0634", "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.", "entry_point": "even_Power_Sum", "function_name": "def even_Power_Sum(n)", "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 272\n    assert candidate(3) == 1568\n    assert candidate(4) == 5664\n\n"}
{"task_id": "MBPP/0635", "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "entry_point": "heap_sort", "function_name": "def heap_sort(iterable)", "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate( [7, 1, 9, 5])==[1,5,7,9]\n\n"}
{"task_id": "MBPP/0636", "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.", "entry_point": "Check_Solution", "function_name": "def Check_Solution(a, b, c)", "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2,0,2) == \"Yes\"\n    assert candidate(2,-5,2) == \"Yes\"\n    assert candidate(1,2,3) == \"No\"\n\n"}
{"task_id": "MBPP/0637", "prompt": "Write a function to check whether the given amount has no profit and no loss", "entry_point": "noprofit_noloss", "function_name": "def noprofit_noloss(actual_cost, sale_amount)", "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1500,1200)==False\n    assert candidate(100,100)==True\n    assert candidate(2000,5000)==False\n\n"}
{"task_id": "MBPP/0638", "prompt": "Write a function to calculate wind chill index.", "entry_point": "wind_chill", "function_name": "def wind_chill(v, t)", "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(120,35)==40\n    assert candidate(40,70)==86\n    assert candidate(10,100)==116\n\n"}
{"task_id": "MBPP/0639", "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "entry_point": "sample_nam", "function_name": "def sample_nam(sample_names)", "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n    assert candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\n    assert candidate([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n\n"}
{"task_id": "MBPP/0640", "prompt": "Write a function to remove the parenthesis area in a string.", "entry_point": "remove_parenthesis", "function_name": "def remove_parenthesis(items)", "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"python (chrome)\"])==(\"python\")\n    assert candidate([\"string(.abc)\"])==(\"string\")\n    assert candidate([\"alpha(num)\"])==(\"alpha\")\n\n"}
{"task_id": "MBPP/0641", "prompt": "Write a function to find the nth nonagonal number.", "entry_point": "is_nonagonal", "function_name": "def is_nonagonal(n)", "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 325\n    assert candidate(15) == 750\n    assert candidate(18) == 1089\n\n"}
{"task_id": "MBPP/0642", "prompt": "Write a function to remove similar rows from the given tuple matrix.", "entry_point": "remove_similar_row", "function_name": "def remove_similar_row(test_list)", "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\n    assert candidate([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\n    assert candidate([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}\n\n"}
{"task_id": "MBPP/0643", "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.", "entry_point": "text_match_wordz_middle", "function_name": "def text_match_wordz_middle(text)", "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"pythonzabc.\")==('Found a match!')\n    assert candidate(\"xyzabc.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n\n"}
{"task_id": "MBPP/0644", "prompt": "Write a python function to reverse an array upto a given position.", "entry_point": "reverse_Array_Upto_K", "function_name": "def reverse_Array_Upto_K(input, k)", "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n    assert candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n    assert candidate([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n\n"}
{"task_id": "MBPP/0645", "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.", "entry_point": "get_product", "function_name": "def get_product(val)", "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n    assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\n    assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210\n\n"}
{"task_id": "MBPP/0646", "prompt": "Write a python function to count number of cubes of size k in a cube of size n.", "entry_point": "No_of_cubes", "function_name": "def No_of_cubes(N, K)", "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2,1) == 8\n    assert candidate(5,2) == 64\n    assert candidate(1,1) == 1\n\n"}
{"task_id": "MBPP/0647", "prompt": "Write a function to split a string at uppercase letters.", "entry_point": "split_upperstring", "function_name": "def split_upperstring(text)", "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"PythonProgramLanguage\")==['Python','Program','Language']\n    assert candidate(\"PythonProgram\")==['Python','Program']\n    assert candidate(\"ProgrammingLanguage\")==['Programming','Language']\n\n"}
{"task_id": "MBPP/0648", "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "entry_point": "exchange_elements", "function_name": "def exchange_elements(lst)", "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \n    assert candidate([5,6,7,8,9,10])==[6,5,8,7,10,9] \n    assert candidate([25,35,45,55,75,95])==[35,25,55,45,95,75] \n\n"}
{"task_id": "MBPP/0649", "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.", "entry_point": "sum_Range_list", "function_name": "def sum_Range_list(nums, m, n)", "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\n    assert candidate([1,2,3,4,5],1,2) == 5\n    assert candidate([1,0,1,2,5,6],4,5) == 11\n\n"}
{"task_id": "MBPP/0650", "prompt": "Write a python function to check whether the given two arrays are equal or not.", "entry_point": "are_Equal", "function_name": "def are_Equal(arr1, arr2, n, m)", "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3],[3,2,1],3,3) == True\n    assert candidate([1,1,1],[2,2,2],3,3) == False\n    assert candidate([8,9],[4,5,6],2,3) == False\n\n"}
{"task_id": "MBPP/0651", "prompt": "Write a function to check if one tuple is a subset of another tuple.", "entry_point": "check_subset", "function_name": "def check_subset(test_tup1, test_tup2)", "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 10)) == True\n    assert candidate((1, 2, 3, 4), (5, 6)) == False\n    assert candidate((7, 8, 9, 10), (10, 8)) == True\n\n"}
{"task_id": "MBPP/0652", "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "entry_point": "matrix_to_list", "function_name": "def matrix_to_list(test_list)", "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\n    assert candidate([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\n    assert candidate([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'\n\n"}
{"task_id": "MBPP/0653", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "entry_point": "grouping_dictionary", "function_name": "def grouping_dictionary(l)", "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\n    assert candidate([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\n    assert candidate([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})\n\n"}
{"task_id": "MBPP/0654", "prompt": "Write a function to find the perimeter of a rectangle.", "entry_point": "rectangle_perimeter", "function_name": "def rectangle_perimeter(l, b)", "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20)==60\n    assert candidate(10,5)==30\n    assert candidate(4,2)==12\n\n"}
{"task_id": "MBPP/0655", "prompt": "Write a python function to find the sum of fifth power of n natural numbers.", "entry_point": "fifth_Power_Sum", "function_name": "def fifth_Power_Sum(n)", "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 33\n    assert candidate(4) == 1300\n    assert candidate(3) == 276\n\n"}
{"task_id": "MBPP/0656", "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.", "entry_point": "find_Min_Sum", "function_name": "def find_Min_Sum(a, b, n)", "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([3,2,1],[2,1,3],3) == 0\n    assert candidate([1,2,3],[4,5,6],3) == 9\n    assert candidate([4,1,8,7],[2,3,6,5],4) == 6\n\n"}
{"task_id": "MBPP/0657", "prompt": "Write a python function to find the first digit in factorial of a given number.", "entry_point": "first_Digit", "function_name": "def first_Digit(n)", "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(10) == 3\n    assert candidate(7) == 5\n\n"}
{"task_id": "MBPP/0658", "prompt": "Write a function to find the item with maximum occurrences in a given list.", "entry_point": "max_occurrences", "function_name": "def max_occurrences(list1)", "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\n    assert candidate([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\n    assert candidate([1, 2, 3,2, 4, 5,1, 1, 1])==1\n\n"}
{"task_id": "MBPP/0659", "prompt": "Write a python function to print duplicants from a list of integers.", "entry_point": "Repeat", "function_name": "def Repeat(x)", "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\n    assert candidate([-1, 1, -1, 8]) == [-1]\n    assert candidate([1, 2, 3, 1, 2,]) == [1, 2]\n\n"}
{"task_id": "MBPP/0660", "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.", "entry_point": "find_Points", "function_name": "def find_Points(l1, r1, l2, r2)", "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,10,1,5) == (1,10)\n    assert candidate(3,5,7,9) == (3,9)\n    assert candidate(1,5,2,8) == (1,8)\n\n"}
{"task_id": "MBPP/0661", "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "entry_point": "max_sum_of_three_consecutive", "function_name": "def max_sum_of_three_consecutive(arr, n)", "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([100, 1000, 100, 1000, 1], 5) == 2101\n    assert candidate([3000, 2000, 1000, 3, 10], 5) == 5013\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27\n\n"}
{"task_id": "MBPP/0662", "prompt": "Write a function to sort a list in a dictionary.", "entry_point": "sorted_dict", "function_name": "def sorted_dict(dict1)", "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n    assert candidate({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\n    assert candidate({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}\n\n"}
{"task_id": "MBPP/0663", "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.", "entry_point": "find_max_val", "function_name": "def find_max_val(n, x, y)", "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(15, 10, 5) == 15\n    assert candidate(187, 10, 5) == 185\n    assert candidate(16, 11, 1) == 12\n\n"}
{"task_id": "MBPP/0664", "prompt": "Write a python function to find the average of even numbers till a given even number.", "entry_point": "average_Even", "function_name": "def average_Even(n)", "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 2\n    assert candidate(4) == 3\n    assert candidate(100) == 51\n\n"}
{"task_id": "MBPP/0665", "prompt": "Write a python function to shift first element to the end of given list.", "entry_point": "move_last", "function_name": "def move_last(num_list)", "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4]) == [2,3,4,1]\n    assert candidate([2,3,4,1,5,0]) == [3,4,1,5,0,2]\n    assert candidate([5,4,3,2,1]) == [4,3,2,1,5]\n\n"}
{"task_id": "MBPP/0666", "prompt": "Write a function to count occurrence of a character in a string.", "entry_point": "count_char", "function_name": "def count_char(string, char)", "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"Python\",'o')==1\n    assert candidate(\"little\",'t')==2\n    assert candidate(\"assert\",'s')==2\n\n"}
{"task_id": "MBPP/0667", "prompt": "Write a python function to count number of vowels in the string.", "entry_point": "Check_Vow", "function_name": "def Check_Vow(string, vowels)", "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('corner','AaEeIiOoUu') == 2\n    assert candidate('valid','AaEeIiOoUu') == 2\n    assert candidate('true','AaEeIiOoUu') ==2\n\n"}
{"task_id": "MBPP/0668", "prompt": "Write a python function to replace multiple occurence of character by single.", "entry_point": "replace", "function_name": "def replace(string, char)", "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('peep','e') == 'pep'\n    assert candidate('Greek','e') == 'Grek'\n    assert candidate('Moon','o') == 'Mon'\n\n"}
{"task_id": "MBPP/0669", "prompt": "Write a function to check whether the given ip address is valid or not using regex.", "entry_point": "check_IP", "function_name": "def check_IP(Ip)", "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"192.168.0.1\") == 'Valid IP address'\n    assert candidate(\"110.234.52.124\") == 'Valid IP address'\n    assert candidate(\"366.1.2.2\") == 'Invalid IP address'\n\n"}
{"task_id": "MBPP/0670", "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.", "entry_point": "decreasing_trend", "function_name": "def decreasing_trend(nums)", "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([-4,-3,-2,-1]) == True\n    assert candidate([1,2,3]) == True\n    assert candidate([3,2,1]) == False\n\n"}
{"task_id": "MBPP/0671", "prompt": "Write a python function to set the right most unset bit.", "entry_point": "get_Pos_Of_Right_most_Set_Bit", "function_name": "def get_Pos_Of_Right_most_Set_Bit(n)", "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert set_Right_most_Unset_Bit(21) == 23\n    assert set_Right_most_Unset_Bit(11) == 15\n    assert set_Right_most_Unset_Bit(15) == 15\n\n"}
{"task_id": "MBPP/0672", "prompt": "Write a function to find maximum of three numbers.", "entry_point": "max_of_three", "function_name": "def max_of_three(num1, num2, num3)", "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20,30)==30\n    assert candidate(55,47,39)==55\n    assert candidate(10,49,30)==49\n\n"}
{"task_id": "MBPP/0673", "prompt": "Write a python function to convert a list of multiple integers into a single integer.", "entry_point": "convert", "function_name": "def convert(list)", "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == 123\n    assert candidate([4,5,6]) == 456\n    assert candidate([7,8,9]) == 789\n\n"}
{"task_id": "MBPP/0674", "prompt": "Write a function to remove duplicate words from a given string using collections module.", "entry_point": "remove_duplicate", "function_name": "def remove_duplicate(string)", "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\n    assert candidate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\n    assert candidate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")\n\n"}
{"task_id": "MBPP/0675", "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "entry_point": "sum_nums", "function_name": "def sum_nums(x, y, m, n)", "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2,10,11,20)==20\n    assert candidate(15,17,1,10)==32\n    assert candidate(10,15,5,30)==20\n\n"}
{"task_id": "MBPP/0676", "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "entry_point": "remove_extra_char", "function_name": "def remove_extra_char(text1)", "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('**//Google Android// - 12. ') == 'GoogleAndroid12'\n    assert candidate('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\n    assert candidate('**//Google Firebase// - 478. ') == 'GoogleFirebase478'\n\n"}
{"task_id": "MBPP/0677", "prompt": "Write a function to check if the triangle is valid or not.", "entry_point": "validity_triangle", "function_name": "def validity_triangle(a, b, c)", "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(60,50,90)==False\n    assert candidate(45,75,60)==True\n    assert candidate(30,50,100)==True\n\n"}
{"task_id": "MBPP/0678", "prompt": "Write a python function to remove spaces from a given string.", "entry_point": "remove_spaces", "function_name": "def remove_spaces(str1)", "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"a b c\") == \"abc\"\n    assert candidate(\"1 2 3\") == \"123\"\n    assert candidate(\" b c\") == \"bc\"\n\n"}
{"task_id": "MBPP/0679", "prompt": "Write a function to access dictionary key\u2019s element by index.", "entry_point": "access_key", "function_name": "def access_key(ditionary, key)", "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\n    assert candidate({'python':10, 'java': 20, 'C++':30},2)== 'C++'\n    assert candidate({'program':15,'computer':45},1)== 'computer'\n\n"}
{"task_id": "MBPP/0680", "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "entry_point": "increasing_trend", "function_name": "def increasing_trend(nums)", "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4]) == True\n    assert candidate([4,3,2,1]) == False\n    assert candidate([0,1,4,9]) == True\n\n"}
{"task_id": "MBPP/0681", "prompt": "Write a python function to find the smallest prime divisor of a number.", "entry_point": "smallest_Divisor", "function_name": "def smallest_Divisor(n)", "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 2\n    assert candidate(25) == 5\n    assert candidate(31) == 31\n\n"}
{"task_id": "MBPP/0682", "prompt": "Write a function to multiply two lists using map and lambda function.", "entry_point": "mul_list", "function_name": "def mul_list(nums1, nums2)", "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3],[4,5,6])==[4,10,18]\n    assert candidate([1,2],[3,4])==[3,8]\n    assert candidate([90,120],[50,70])==[4500,8400]\n\n"}
{"task_id": "MBPP/0683", "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.", "entry_point": "sum_Square", "function_name": "def sum_Square(n)", "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(25) == True\n    assert candidate(24) == False\n    assert candidate(17) == True\n\n"}
{"task_id": "MBPP/0684", "prompt": "Write a python function to count occurences of a character in a repeated string.", "entry_point": "count_Char", "function_name": "def count_Char(str, x)", "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abcac\",'a') == 4\n    assert candidate(\"abca\",'c') == 2\n    assert candidate(\"aba\",'a') == 7\n\n"}
{"task_id": "MBPP/0685", "prompt": "Write a python function to find sum of prime numbers between 1 to n.", "entry_point": "sum_Of_Primes", "function_name": "def sum_Of_Primes(n)", "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == 17\n    assert candidate(20) == 77\n    assert candidate(5) == 10\n\n"}
{"task_id": "MBPP/0686", "prompt": "Write a function to find the frequency of each element in the given list.", "entry_point": "freq_element", "function_name": "def freq_element(test_tup)", "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\n    assert candidate((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\n    assert candidate((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'\n\n"}
{"task_id": "MBPP/0687", "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "entry_point": "recur_gcd", "function_name": "def recur_gcd(a, b)", "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12,14) == 2\n    assert candidate(13,17) == 1\n    assert candidate(9, 3) == 3\n\n"}
{"task_id": "MBPP/0688", "prompt": "Write a function to get the length of a complex number.", "entry_point": "len_complex", "function_name": "def len_complex(a, b)", "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3,4)==5.0\n    assert candidate(9,10)==13.45362404707371\n    assert candidate(7,9)==11.40175425099138\n\n"}
{"task_id": "MBPP/0689", "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "entry_point": "min_jumps", "function_name": "def min_jumps(arr, n)", "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 6, 1, 0, 9], 6) == 3\n    assert candidate([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10\n\n"}
{"task_id": "MBPP/0690", "prompt": "Write a function to multiply consecutive numbers of a given list.", "entry_point": "mul_consecutive_nums", "function_name": "def mul_consecutive_nums(nums)", "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\n    assert candidate([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]\n\n"}
{"task_id": "MBPP/0691", "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "entry_point": "group_element", "function_name": "def group_element(test_list)", "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\n    assert candidate([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\n    assert candidate([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}\n\n"}
{"task_id": "MBPP/0692", "prompt": "Write a python function to find the last two digits in factorial of a given number.", "entry_point": "last_Two_Digits", "function_name": "def last_Two_Digits(N)", "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(7) == 40\n    assert candidate(5) == 20\n    assert candidate(2) == 2\n\n"}
{"task_id": "MBPP/0693", "prompt": "Write a function to remove multiple spaces in a string by using regex.", "entry_point": "remove_multiple_spaces", "function_name": "def remove_multiple_spaces(text1)", "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('Google      Assistant') == 'Google Assistant'\n    assert candidate('Quad      Core') == 'Quad Core'\n    assert candidate('ChromeCast      Built-in') == 'ChromeCast Built-in'\n\n"}
{"task_id": "MBPP/0694", "prompt": "Write a function to extract unique values from the given dictionary values.", "entry_point": "extract_unique", "function_name": "def extract_unique(test_dict)", "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\n    assert candidate({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n    assert candidate({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\n\n"}
{"task_id": "MBPP/0695", "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "entry_point": "check_greater", "function_name": "def check_greater(test_tup1, test_tup2)", "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (13, 5, 18)) == True\n    assert candidate((1, 2, 3), (2, 1, 4)) == False\n    assert candidate((4, 5, 6), (5, 6, 7)) == True\n\n"}
{"task_id": "MBPP/0696", "prompt": "Write a function to zip two given lists of lists.", "entry_point": "zip_list", "function_name": "def zip_list(list1, list2)", "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n    assert candidate([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n    assert candidate([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]\n\n"}
{"task_id": "MBPP/0697", "prompt": "Write a function to find number of even elements in the given list using lambda function.", "entry_point": "count_even", "function_name": "def count_even(array_nums)", "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10])==3\n    assert candidate([10,15,14,13,-18,12,-20])==5\n    assert candidate([1, 2, 4, 8, 9])==3\n\n"}
{"task_id": "MBPP/0698", "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "entry_point": "sort_dict_item", "function_name": "def sort_dict_item(test_dict)", "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\n    assert candidate({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\n    assert candidate({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}\n\n"}
{"task_id": "MBPP/0699", "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.", "entry_point": "min_Swaps", "function_name": "def min_Swaps(str1, str2)", "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"1101\",\"1110\") == 1\n    assert candidate(\"1111\",\"0100\") == \"Not Possible\"\n    assert candidate(\"1110000\",\"0001101\") == 3\n\n"}
{"task_id": "MBPP/0700", "prompt": "Write a function to count the number of elements in a list which are within a specific range.", "entry_point": "count_range_in_list", "function_name": "def count_range_in_list(li, min, max)", "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10,20,30,40,40,40,70,80,99],40,100)==6\n    assert candidate(['a','b','c','d','e','f'],'a','e')==5\n    assert candidate([7,8,9,15,17,19,45],15,20)==3\n\n"}
{"task_id": "MBPP/0701", "prompt": "Write a function to find the equilibrium index of the given array.", "entry_point": "equilibrium_index", "function_name": "def equilibrium_index(arr)", "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 1, 2, 3]) == 3\n    assert candidate([-7, 1, 5, 2, -4, 3, 0]) == 3\n    assert candidate([1, 2, 3]) == -1\n\n"}
{"task_id": "MBPP/0702", "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "entry_point": "removals", "function_name": "def removals(arr, n, k)", "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\n    assert candidate([1, 5, 6, 2, 8], 5, 2) == 3\n    assert candidate([1, 2, 3 ,4, 5, 6], 6, 3) == 2\n\n"}
{"task_id": "MBPP/0703", "prompt": "Write a function to check whether the given key is present in the dictionary or not.", "entry_point": "is_key_present", "function_name": "def is_key_present(d, x)", "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False\n\n"}
{"task_id": "MBPP/0704", "prompt": "Write a function to calculate the harmonic sum of n-1.", "entry_point": "harmonic_sum", "function_name": "def harmonic_sum(n)", "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==2.9289682539682538\n    assert candidate(4)==2.083333333333333\n    assert candidate(7)==2.5928571428571425 \n\n"}
{"task_id": "MBPP/0705", "prompt": "Write a function to sort a list of lists by length and value.", "entry_point": "sort_sublists", "function_name": "def sort_sublists(list1)", "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n    assert candidate([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n    assert candidate([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]\n\n"}
{"task_id": "MBPP/0706", "prompt": "Write a function to find whether an array is subset of another array.", "entry_point": "is_subset", "function_name": "def is_subset(arr1, m, arr2, n)", "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\n    assert candidate([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\n    assert candidate([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False\n\n"}
{"task_id": "MBPP/0707", "prompt": "Write a python function to count the total set bits from 1 to n.", "entry_point": "count_Set_Bits", "function_name": "def count_Set_Bits(n)", "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(16) == 33\n    assert candidate(2) == 2\n    assert candidate(14) == 28\n\n"}
{"task_id": "MBPP/0708", "prompt": "Write a python function to convert a string to a list.", "entry_point": "Convert", "function_name": "def Convert(string)", "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('python program') == ['python','program']\n    assert candidate('Data Analysis') ==['Data','Analysis']\n    assert candidate('Hadoop Training') == ['Hadoop','Training']\n\n"}
{"task_id": "MBPP/0709", "prompt": "Write a function to count unique keys for each value present in the tuple.", "entry_point": "get_unique", "function_name": "def get_unique(test_list)", "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\n    assert candidate([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\n    assert candidate([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'\n\n"}
{"task_id": "MBPP/0710", "prompt": "Write a function to access the initial and last data of the given tuple record.", "entry_point": "front_and_rear", "function_name": "def front_and_rear(test_tup)", "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, 7)) == (10, 7)\n    assert candidate((1, 2, 3, 4, 5)) == (1, 5)\n    assert candidate((6, 7, 8, 9, 10)) == (6, 10)\n\n"}
{"task_id": "MBPP/0711", "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.", "entry_point": "product_Equal", "function_name": "def product_Equal(n)", "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2841) == True\n    assert candidate(1234) == False\n    assert candidate(1212) == False\n\n"}
{"task_id": "MBPP/0712", "prompt": "Write a function to remove duplicates from a list of lists.", "entry_point": "remove_duplicate", "function_name": "def remove_duplicate(list1)", "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \n    assert candidate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\n    assert candidate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]\n\n"}
{"task_id": "MBPP/0713", "prompt": "Write a function to check if the given tuple contains all valid values or not.", "entry_point": "check_valid", "function_name": "def check_valid(test_tup)", "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((True, True, True, True) ) == True\n    assert candidate((True, False, True, True) ) == False\n    assert candidate((True, True, True, True) ) == True\n\n"}
{"task_id": "MBPP/0714", "prompt": "Write a python function to count the number of distinct power of prime factor of given number.", "entry_point": "count_Fac", "function_name": "def count_Fac(n)", "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(24) == 3\n    assert candidate(12) == 2\n    assert candidate(4) == 1\n\n"}
{"task_id": "MBPP/0715", "prompt": "Write a function to convert the given string of integers into a tuple.", "entry_point": "str_to_tuple", "function_name": "def str_to_tuple(test_str)", "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\n    assert candidate(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\n    assert candidate(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)\n\n"}
{"task_id": "MBPP/0716", "prompt": "Write a function to find the perimeter of a rombus.", "entry_point": "rombus_perimeter", "function_name": "def rombus_perimeter(a)", "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==40\n    assert candidate(5)==20\n    assert candidate(4)==16\n\n"}
{"task_id": "MBPP/0717", "prompt": "Write a function to calculate the standard deviation.", "entry_point": "sd_calc", "function_name": "def sd_calc(data)", "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([4, 2, 5, 8, 6])== 2.23606797749979\n    assert candidate([1,2,3,4,5,6,7])==2.160246899469287\n    assert candidate([5,9,10,15,6,4])==4.070217029430577\n\n"}
{"task_id": "MBPP/0718", "prompt": "Write a function to create a list taking alternate elements from another given list.", "entry_point": "alternate_elements", "function_name": "def alternate_elements(list1)", "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\n    assert candidate([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\n"}
{"task_id": "MBPP/0719", "prompt": "Write a function that matches a string that has an a followed by zero or more b's.", "entry_point": "text_match", "function_name": "def text_match(text)", "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Found a match!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abba\")==('Found a match!')\n\n"}
{"task_id": "MBPP/0720", "prompt": "Write a function to add a dictionary to the tuple.", "entry_point": "add_dict_to_tuple", "function_name": "def add_dict_to_tuple(test_tup, test_dict)", "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    assert candidate((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n    assert candidate((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n\n"}
{"task_id": "MBPP/0721", "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "entry_point": "maxAverageOfPath", "function_name": "def maxAverageOfPath(cost, N)", "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\n    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\n    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 \n\n"}
{"task_id": "MBPP/0722", "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.", "entry_point": "filter_data", "function_name": "def filter_data(students, h, w)", "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n\n"}
{"task_id": "MBPP/0723", "prompt": "Write a function to count the same pair in two given lists using map function.", "entry_point": "count_same_pair", "function_name": "def count_same_pair(nums1, nums2)", "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\n\n"}
{"task_id": "MBPP/0724", "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.", "entry_point": "power_base_sum", "function_name": "def power_base_sum(base, power)", "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2,100)==115\n    assert candidate(8,10)==37\n    assert candidate(8,15)==62\n\n"}
{"task_id": "MBPP/0725", "prompt": "Write a function to extract values between quotation marks of the given string by using regex.", "entry_point": "extract_quotation", "function_name": "def extract_quotation(text1)", "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n    assert candidate('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n    assert candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\n\n"}
{"task_id": "MBPP/0726", "prompt": "Write a function to multiply the adjacent elements of the given tuple.", "entry_point": "multiply_elements", "function_name": "def multiply_elements(test_tup)", "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n    assert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\n    assert candidate((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\n\n"}
{"task_id": "MBPP/0727", "prompt": "Write a function to remove all characters except letters and numbers using regex", "entry_point": "remove_char", "function_name": "def remove_char(S)", "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"123abcjw:, .@! eiw\") == '123abcjweiw'\n    assert candidate(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\n    assert candidate(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' \n\n"}
{"task_id": "MBPP/0728", "prompt": "Write a function to sum elements in two lists.", "entry_point": "sum_list", "function_name": "def sum_list(lst1, lst2)", "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10,20,30],[15,25,35])==[25,45,65]\n    assert candidate([1,2,3],[5,6,7])==[6,8,10]\n    assert candidate([15,20,30],[15,45,75])==[30,65,105]\n\n"}
{"task_id": "MBPP/0729", "prompt": "Write a function to add two lists using map and lambda function.", "entry_point": "add_list", "function_name": "def add_list(nums1, nums2)", "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3],[4,5,6])==[5, 7, 9]\n    assert candidate([1,2],[3,4])==[4,6]\n    assert candidate([10,20],[50,70])==[60,90]\n\n"}
{"task_id": "MBPP/0730", "prompt": "Write a function to remove consecutive duplicates of a given list.", "entry_point": "consecutive_duplicates", "function_name": "def consecutive_duplicates(nums)", "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\n\n"}
{"task_id": "MBPP/0731", "prompt": "Write a function to find the lateral surface area of a cone.", "entry_point": "lateralsurface_cone", "function_name": "def lateralsurface_cone(r, h)", "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5,12)==204.20352248333654\n    assert candidate(10,15)==566.3586699569488\n    assert candidate(19,17)==1521.8090132193388\n\n"}
{"task_id": "MBPP/0732", "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "entry_point": "replace_specialchar", "function_name": "def replace_specialchar(text)", "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('Python language, Programming language.')==('Python:language::Programming:language:')\n    assert candidate('a b c,d e f')==('a:b:c:d:e:f')\n    assert candidate('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n\n"}
{"task_id": "MBPP/0733", "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "entry_point": "find_first_occurrence", "function_name": "def find_first_occurrence(A, x)", "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n\n"}
{"task_id": "MBPP/0734", "prompt": "Write a python function to find sum of products of all possible subarrays.", "entry_point": "sum_Of_Subarray_Prod", "function_name": "def sum_Of_Subarray_Prod(arr, n)", "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3],3) == 20\n    assert candidate([1,2],2) == 5\n    assert candidate([1,2,3,4],4) == 84\n\n"}
{"task_id": "MBPP/0735", "prompt": "Write a python function to toggle bits of the number except the first and the last bit.", "entry_point": "set_middle_bits", "function_name": "def set_middle_bits(n)", "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert toggle_middle_bits(9) == 15\n    assert toggle_middle_bits(10) == 12\n    assert toggle_middle_bits(11) == 13\n\n"}
{"task_id": "MBPP/0736", "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.", "entry_point": "left_insertion", "function_name": "def left_insertion(a, x)", "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,4,5],6)==4\n    assert candidate([1,2,4,5],3)==2\n    assert candidate([1,2,4,5],7)==4\n\n"}
{"task_id": "MBPP/0737", "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.", "entry_point": "check_str", "function_name": "def check_str(string)", "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"annie\") == 'Valid'\n    assert candidate(\"dawood\") == 'Invalid'\n    assert candidate(\"Else\") == 'Valid'\n\n"}
{"task_id": "MBPP/0738", "prompt": "Write a function to calculate the geometric sum of n-1.", "entry_point": "geometric_sum", "function_name": "def geometric_sum(n)", "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(7) == 1.9921875\n    assert candidate(4) == 1.9375\n    assert candidate(8) == 1.99609375\n\n"}
{"task_id": "MBPP/0739", "prompt": "Write a python function to find the index of smallest triangular number with n digits.", "entry_point": "find_Index", "function_name": "def find_Index(n)", "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 14\n    assert candidate(4) == 45\n\n"}
{"task_id": "MBPP/0740", "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "entry_point": "tuple_to_dict", "function_name": "def tuple_to_dict(test_tup)", "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    assert candidate((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\n    assert candidate((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n\n"}
{"task_id": "MBPP/0741", "prompt": "Write a python function to check whether all the characters are same or not.", "entry_point": "all_Characters_Same", "function_name": "def all_Characters_Same(s)", "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python\") == False\n    assert candidate(\"aaa\") == True\n    assert candidate(\"data\") == False\n\n"}
{"task_id": "MBPP/0742", "prompt": "Write a function to caluclate the area of a tetrahedron.", "entry_point": "area_tetrahedron", "function_name": "def area_tetrahedron(side)", "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3)==15.588457268119894\n    assert candidate(20)==692.8203230275509\n    assert candidate(10)==173.20508075688772\n\n"}
{"task_id": "MBPP/0743", "prompt": "Write a function to rotate a given list by specified number of items to the right direction.", "entry_point": "rotate_right", "function_name": "def rotate_right(list1, m, n)", "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n\n"}
{"task_id": "MBPP/0744", "prompt": "Write a function to check if the given tuple has any none value or not.", "entry_point": "check_none", "function_name": "def check_none(test_tup)", "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, None)) == True\n    assert candidate((7, 8, 9, 11, 14)) == False\n    assert candidate((1, 2, 3, 4, None)) == True\n\n"}
{"task_id": "MBPP/0745", "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "entry_point": "divisible_by_digits", "function_name": "def divisible_by_digits(startnum, endnum)", "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert candidate(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert candidate(20,25)==[22, 24]\n\n"}
{"task_id": "MBPP/0746", "prompt": "Write a function to find area of a sector.", "entry_point": "sector_area", "function_name": "def sector_area(r, a)", "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,45)==6.285714285714286\n    assert candidate(9,45)==31.82142857142857\n    assert candidate(9,360)==None\n\n"}
{"task_id": "MBPP/0747", "prompt": "Write a function to find the longest common subsequence for the given three string sequence.", "entry_point": "lcs_of_three", "function_name": "def lcs_of_three(X, Y, Z, m, n, o)", "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3\n\n"}
{"task_id": "MBPP/0748", "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "entry_point": "capital_words_spaces", "function_name": "def capital_words_spaces(str1)", "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"Python\") == 'Python'\n    assert candidate(\"PythonProgrammingExamples\") == 'Python Programming Examples'\n    assert candidate(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n\n"}
{"task_id": "MBPP/0749", "prompt": "Write a function to sort a given list of strings of numbers numerically.", "entry_point": "sort_numeric_strings", "function_name": "def sort_numeric_strings(nums_str)", "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert candidate(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert candidate(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n\n"}
{"task_id": "MBPP/0750", "prompt": "Write a function to add the given tuple to the given list.", "entry_point": "add_tuple", "function_name": "def add_tuple(test_list, test_tup)", "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert candidate([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n    assert candidate([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n\n"}
{"task_id": "MBPP/0751", "prompt": "Write a function to check if the given array represents min heap or not.", "entry_point": "check_min_heap", "function_name": "def check_min_heap(arr, i)", "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], 0) == True\n    assert candidate([2, 3, 4, 5, 10, 15], 0) == True\n    assert candidate([2, 10, 4, 5, 3, 15], 0) == False\n\n"}
{"task_id": "MBPP/0752", "prompt": "Write a function to find the nth jacobsthal number.", "entry_point": "jacobsthal_num", "function_name": "def jacobsthal_num(n)", "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == 11\n    assert candidate(2) == 1\n    assert candidate(4) == 5\n\n"}
{"task_id": "MBPP/0753", "prompt": "Write a function to find minimum k records from tuple list.", "entry_point": "min_k", "function_name": "def min_k(test_list, K)", "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n\n"}
{"task_id": "MBPP/0754", "prompt": "Write a function to find common index elements from three lists.", "entry_point": "extract_index_list", "function_name": "def extract_index_list(l1, l2, l3)", "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\n    assert candidate([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\n\n"}
{"task_id": "MBPP/0755", "prompt": "Write a function to find the second smallest number in a list.", "entry_point": "second_smallest", "function_name": "def second_smallest(numbers)", "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, -8, -2, 0, -2])==-2\n    assert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n    assert candidate([2,2])==None\n\n"}
{"task_id": "MBPP/0756", "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.", "entry_point": "text_match_zero_one", "function_name": "def text_match_zero_one(text)", "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Found a match!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abbbba\")==('Found a match!')\n\n"}
{"task_id": "MBPP/0757", "prompt": "Write a function to count the pairs of reverse strings in the given string list.", "entry_point": "count_reverse_pairs", "function_name": "def count_reverse_pairs(test_list)", "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\n    assert candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\n    assert candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' \n\n"}
{"task_id": "MBPP/0758", "prompt": "Write a function to count number of unique lists within a list.", "entry_point": "unique_sublists", "function_name": "def unique_sublists(list1)", "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n\n"}
{"task_id": "MBPP/0759", "prompt": "Write a function to check a decimal with a precision of 2.", "entry_point": "is_decimal", "function_name": "def is_decimal(num)", "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('123.11')==True\n    assert candidate('e666.86')==False\n    assert candidate('3.124587')==False\n\n"}
{"task_id": "MBPP/0760", "prompt": "Write a python function to check whether an array contains only one distinct element or not.", "entry_point": "unique_Element", "function_name": "def unique_Element(arr, n)", "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,1,1],3) == 'YES'\n    assert candidate([1,2,1,2],4) == 'NO'\n    assert candidate([1,2,3,4,5],5) == 'NO'\n\n"}
{"task_id": "MBPP/0761", "prompt": "Write a function to caluclate arc length of an angle.", "entry_point": "arc_length", "function_name": "def arc_length(d, a)", "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(9,45)==3.5357142857142856\n    assert candidate(9,480)==None\n    assert candidate(5,270)==11.785714285714285\n\n"}
{"task_id": "MBPP/0762", "prompt": "Write a function to check whether the given month number contains 30 days or not.", "entry_point": "check_monthnumber_number", "function_name": "def check_monthnumber_number(monthnum3)", "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(6)==True\n    assert candidate(2)==False\n    assert candidate(12)==False\n\n"}
{"task_id": "MBPP/0763", "prompt": "Write a python function to find the minimum difference between any two elements in a given array.", "entry_point": "find_Min_Diff", "function_name": "def find_Min_Diff(arr, n)", "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1,5,3,19,18,25),6) == 1\n    assert candidate((4,3,2,6),4) == 1\n    assert candidate((30,5,20,9),4) == 4\n\n"}
{"task_id": "MBPP/0764", "prompt": "Write a python function to count numeric values in a given string.", "entry_point": "number_ctr", "function_name": "def number_ctr(str)", "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('program2bedone') == 1\n    assert candidate('3wonders') ==1\n    assert candidate('123') == 3\n\n"}
{"task_id": "MBPP/0765", "prompt": "Write a function to find nth polite number.", "entry_point": "is_polite", "function_name": "def is_polite(n)", "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(7) == 11\n    assert candidate(4) == 7\n    assert candidate(9) == 13\n\n"}
{"task_id": "MBPP/0766", "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.", "entry_point": "pair_wise", "function_name": "def pair_wise(l1)", "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    assert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n\n"}
{"task_id": "MBPP/0767", "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "entry_point": "get_Pairs_Count", "function_name": "def get_Pairs_Count(arr, n, sum)", "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,1,1,1],4,2) == 6\n    assert candidate([1,5,7,-1,5],5,6) == 3\n    assert candidate([1,-2,3],3,1) == 1\n\n"}
{"task_id": "MBPP/0768", "prompt": "Write a python function to check for odd parity of a given number.", "entry_point": "check_Odd_Parity", "function_name": "def check_Odd_Parity(x)", "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(13) == True\n    assert candidate(21) == True\n    assert candidate(18) == False\n\n"}
{"task_id": "MBPP/0769", "prompt": "Write a python function to get the difference between two lists.", "entry_point": "Diff", "function_name": "def Diff(li1, li2)", "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert (candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n    assert (candidate([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\n    assert (candidate([1,2,3], [6,7,1])) == [2,3,6,7]\n\n"}
{"task_id": "MBPP/0770", "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "entry_point": "odd_Num_Sum", "function_name": "def odd_Num_Sum(n)", "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 82\n    assert candidate(3) == 707\n    assert candidate(4) == 3108\n\n"}
{"task_id": "MBPP/0771", "prompt": "Write a function to check if the given expression is balanced or not.", "entry_point": "check_expression", "function_name": "def check_expression(exp)", "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"{()}[{}]\") == True\n    assert candidate(\"{()}[{]\") == False\n    assert candidate(\"{()}[{}][]({})\") == True\n\n"}
{"task_id": "MBPP/0772", "prompt": "Write a function to remove all the words with k length in the given string.", "entry_point": "remove_length", "function_name": "def remove_length(test_str, K)", "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('The person is most value tet', 3) == 'person is most value'\n    assert candidate('If you told me about this ok', 4) == 'If you me about ok'\n    assert candidate('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n\n"}
{"task_id": "MBPP/0773", "prompt": "Write a function to find the occurrence and position of the substrings within a string.", "entry_point": "occurance_substring", "function_name": "def occurance_substring(text, pattern)", "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('python programming, python language','python')==('python', 0, 6)\n    assert candidate('python programming,programming language','programming')==('programming', 7, 18)\n    assert candidate('python programming,programming language','language')==('language', 31, 39)\n\n"}
{"task_id": "MBPP/0774", "prompt": "Write a function to check if the string is a valid email address or not using regex.", "entry_point": "check_email", "function_name": "def check_email(email)", "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"ankitrai326@gmail.com\") == 'Valid Email'\n    assert candidate(\"my.ownsite@ourearth.org\") == 'Valid Email'\n    assert candidate(\"ankitaoie326.com\") == 'Invalid Email'\n\n"}
{"task_id": "MBPP/0775", "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.", "entry_point": "odd_position", "function_name": "def odd_position(nums)", "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2,1,4,3,6,7,6,3]) == True\n    assert candidate([4,1,2]) == True\n    assert candidate([1,2,3]) == False\n\n"}
{"task_id": "MBPP/0776", "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.", "entry_point": "count_vowels", "function_name": "def count_vowels(test_str)", "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('bestinstareels') == 7\n    assert candidate('partofthejourneyistheend') == 12\n    assert candidate('amazonprime') == 5\n\n"}
{"task_id": "MBPP/0777", "prompt": "Write a python function to find the sum of non-repeated elements in a given array.", "entry_point": "find_Sum", "function_name": "def find_Sum(arr, n)", "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,1,1,4,5,6],8) == 21\n    assert candidate([1,10,9,4,2,10,10,45,4],9) == 71\n    assert candidate([12,10,9,45,2,10,10,45,10],9) == 78\n\n"}
{"task_id": "MBPP/0778", "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "entry_point": "pack_consecutive_duplicates", "function_name": "def pack_consecutive_duplicates(list1)", "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\n"}
{"task_id": "MBPP/0779", "prompt": "Write a function to count the number of unique lists within a list.", "entry_point": "unique_sublists", "function_name": "def unique_sublists(list1)", "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n\n"}
{"task_id": "MBPP/0780", "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.", "entry_point": "find_combinations", "function_name": "def find_combinations(test_list)", "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n\n"}
{"task_id": "MBPP/0781", "prompt": "Write a python function to check whether the count of divisors is even or odd.", "entry_point": "count_Divisors", "function_name": "def count_Divisors(n)", "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == \"Even\"\n    assert candidate(100) == \"Odd\"\n    assert candidate(125) == \"Even\"\n\n"}
{"task_id": "MBPP/0782", "prompt": "Write a python function to find the sum of all odd length subarrays.", "entry_point": "Odd_Length_Sum", "function_name": "def Odd_Length_Sum(arr)", "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,4]) == 14\n    assert candidate([1,2,1,2]) == 15\n    assert candidate([1,7]) == 8\n\n"}
{"task_id": "MBPP/0783", "prompt": "Write a function to convert rgb color to hsv color.", "entry_point": "rgb_to_hsv", "function_name": "def rgb_to_hsv(r, g, b)", "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(255, 255, 255)==(0, 0.0, 100.0)\n    assert candidate(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\n    assert candidate(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)\n\n"}
{"task_id": "MBPP/0784", "prompt": "Write a function to find the product of first even and odd number of a given list.", "entry_point": "mul_even_odd", "function_name": "def mul_even_odd(list1)", "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==4\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==2\n    assert candidate([1,5,7,9,10])==10\n\n"}
{"task_id": "MBPP/0785", "prompt": "Write a function to convert tuple string to integer tuple.", "entry_point": "tuple_str_int", "function_name": "def tuple_str_int(test_str)", "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"(7, 8, 9)\") == (7, 8, 9)\n    assert candidate(\"(1, 2, 3)\") == (1, 2, 3)\n    assert candidate(\"(4, 5, 6)\") == (4, 5, 6)\n\n"}
{"task_id": "MBPP/0786", "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.", "entry_point": "right_insertion", "function_name": "def right_insertion(a, x)", "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,4,5],6)==4\n    assert candidate([1,2,4,5],3)==2\n    assert candidate([1,2,4,5],7)==4\n\n"}
{"task_id": "MBPP/0787", "prompt": "Write a function that matches a string that has an a followed by three 'b'.", "entry_point": "text_match_three", "function_name": "def text_match_three(text)", "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abbbba\")==('Found a match!')\n\n"}
{"task_id": "MBPP/0788", "prompt": "Write a function to create a new tuple from the given string and list.", "entry_point": "new_tuple", "function_name": "def new_tuple(test_list, test_str)", "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n    assert candidate([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\n    assert candidate([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n\n"}
{"task_id": "MBPP/0789", "prompt": "Write a function to calculate the perimeter of a regular polygon.", "entry_point": "perimeter_polygon", "function_name": "def perimeter_polygon(s, l)", "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,20)==80\n    assert candidate(10,15)==150\n    assert candidate(9,7)==63\n\n"}
{"task_id": "MBPP/0790", "prompt": "Write a python function to check whether every even index contains even numbers of a given list.", "entry_point": "even_position", "function_name": "def even_position(nums)", "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([3,2,1]) == False\n    assert candidate([1,2,3]) == False\n    assert candidate([2,1,4]) == True\n\n"}
{"task_id": "MBPP/0791", "prompt": "Write a function to remove the nested record from the given tuple.", "entry_point": "remove_nested", "function_name": "def remove_nested(test_tup)", "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\n\n"}
{"task_id": "MBPP/0792", "prompt": "Write a python function to count the number of lists in a given number of lists.", "entry_point": "count_list", "function_name": "def count_list(input_list)", "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n    assert candidate([[1,2],[2,3],[4,5]]) == 3\n    assert candidate([[1,0],[2,0]]) == 2\n\n"}
{"task_id": "MBPP/0793", "prompt": "Write a python function to find the last position of an element in a sorted array.", "entry_point": "last", "function_name": "def last(arr, x, n)", "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3],1,3) == 0\n    assert candidate([1,1,1,2,3,4],1,6) == 2\n    assert candidate([2,3,2,3,6,8,9],3,8) == 3\n\n"}
{"task_id": "MBPP/0794", "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "entry_point": "text_starta_endb", "function_name": "def text_starta_endb(text)", "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"aabbbb\")==('Found a match!')\n    assert candidate(\"aabAbbbc\")==('Not matched!')\n    assert candidate(\"accddbbjjj\")==('Not matched!')\n\n"}
{"task_id": "MBPP/0795", "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "entry_point": "cheap_items", "function_name": "def cheap_items(items, n)", "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]\n\n"}
{"task_id": "MBPP/0796", "prompt": "Write function to find the sum of all items in the given dictionary.", "entry_point": "return_sum", "function_name": "def return_sum(dict)", "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'a': 100, 'b':200, 'c':300}) == 600\n    assert candidate({'a': 25, 'b':18, 'c':45}) == 88\n    assert candidate({'a': 36, 'b':39, 'c':49}) == 124\n\n"}
{"task_id": "MBPP/0797", "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "entry_point": "sum_Odd", "function_name": "def sum_Odd(n)", "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert sum_in_Range(2,5) == 8\n    assert sum_in_Range(5,7) == 12\n    assert sum_in_Range(7,13) == 40\n\n"}
{"task_id": "MBPP/0798", "prompt": "Write a python function to find the sum of an array.", "entry_point": "_sum", "function_name": "def _sum(arr)", "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([15, 12, 13, 10]) == 50\n    assert candidate([0, 1, 2]) == 3\n\n"}
{"task_id": "MBPP/0799", "prompt": "Write a python function to left rotate the bits of a given number.", "entry_point": "left_Rotate", "function_name": "def left_Rotate(n, d)", "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(16,2) == 64\n    assert candidate(10,2) == 40\n    assert candidate(99,3) == 792\n\n"}
{"task_id": "MBPP/0800", "prompt": "Write a function to remove all whitespaces from a string.", "entry_point": "remove_all_spaces", "function_name": "def remove_all_spaces(text)", "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('python  program')==('pythonprogram')\n    assert candidate('python   programming    language')==('pythonprogramminglanguage')\n    assert candidate('python                     program')==('pythonprogram')\n\n"}
{"task_id": "MBPP/0801", "prompt": "Write a python function to count the number of equal numbers from three given integers.", "entry_point": "test_three_equal", "function_name": "def test_three_equal(x, y, z)", "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,1,1) == 3\n    assert candidate(-1,-2,-3) == 0\n    assert candidate(1,2,2) == 2\n\n"}
{"task_id": "MBPP/0802", "prompt": "Write a python function to count the number of rotations required to generate a sorted array.", "entry_point": "count_Rotation", "function_name": "def count_Rotation(arr, n)", "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([3,2,1],3) == 1\n    assert candidate([4,5,1,2,3],5) == 2\n    assert candidate([7,8,9,1,2,3],6) == 3\n\n"}
{"task_id": "MBPP/0803", "prompt": "Write a python function to check whether the given number is a perfect square or not.", "entry_point": "is_Perfect_Square", "function_name": "def is_Perfect_Square(n)", "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == False\n    assert candidate(36) == True\n    assert candidate(14) == False\n\n"}
{"task_id": "MBPP/0804", "prompt": "Write a python function to check whether the product of numbers is even or not.", "entry_point": "is_Product_Even", "function_name": "def is_Product_Even(arr, n)", "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3],3) == True\n    assert candidate([1,2,1,4],4) == True\n    assert candidate([1,1],2) == False\n\n"}
{"task_id": "MBPP/0805", "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "entry_point": "max_sum_list", "function_name": "def max_sum_list(lists)", "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n    assert candidate([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \n    assert candidate([[2,3,1]])==[2,3,1] \n\n"}
{"task_id": "MBPP/0806", "prompt": "Write a function to find maximum run of uppercase characters in the given string.", "entry_point": "max_run_uppercase", "function_name": "def max_run_uppercase(test_str)", "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('GeMKSForGERksISBESt') == 5\n    assert candidate('PrECIOusMOVemENTSYT') == 6\n    assert candidate('GooGLEFluTTER') == 4\n\n"}
{"task_id": "MBPP/0807", "prompt": "Write a python function to find the first odd number in a given list of numbers.", "entry_point": "first_odd", "function_name": "def first_odd(nums)", "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,3,5]) == 1\n    assert candidate([2,4,1,3]) == 1\n    assert candidate ([8,9,1]) == 9\n\n"}
{"task_id": "MBPP/0808", "prompt": "Write a function to check if the given tuples contain the k or not.", "entry_point": "check_K", "function_name": "def check_K(test_tup, K)", "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, 8), 6) == True\n    assert candidate((1, 2, 3, 4, 5, 6), 7) == False\n    assert candidate((7, 8, 9, 44, 11, 12), 11) == True\n\n"}
{"task_id": "MBPP/0809", "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "entry_point": "check_smaller", "function_name": "def check_smaller(test_tup1, test_tup2)", "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 2, 3), (2, 3, 4)) == False\n    assert candidate((4, 5, 6), (3, 4, 5)) == True\n    assert candidate((11, 12, 13), (10, 11, 12)) == True\n\n"}
{"task_id": "MBPP/0810", "prompt": "Write a function to iterate over elements repeating each as many times as its count.", "entry_point": "count_variable", "function_name": "def count_variable(a, b, c, d)", "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \n    assert candidate(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \n    assert candidate(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']\n\n"}
{"task_id": "MBPP/0811", "prompt": "Write a function to check if two lists of tuples are identical or not.", "entry_point": "check_identical", "function_name": "def check_identical(test_list1, test_list2)", "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\n    assert candidate([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\n    assert candidate([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True\n\n"}
{"task_id": "MBPP/0812", "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "entry_point": "road_rd", "function_name": "def road_rd(street)", "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"ravipadu Road\")==('ravipadu Rd.')\n    assert candidate(\"palnadu Road\")==('palnadu Rd.')\n    assert candidate(\"eshwar enclave Road\")==('eshwar enclave Rd.')\n\n"}
{"task_id": "MBPP/0813", "prompt": "Write a function to find length of the string.", "entry_point": "string_length", "function_name": "def string_length(str1)", "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('python')==6\n    assert candidate('program')==7\n    assert candidate('language')==8\n\n"}
{"task_id": "MBPP/0814", "prompt": "Write a function to find the area of a rombus.", "entry_point": "rombus_area", "function_name": "def rombus_area(p, q)", "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20)==100\n    assert candidate(10,5)==25\n    assert candidate(4,2)==4\n\n"}
{"task_id": "MBPP/0815", "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "entry_point": "sort_by_dnf", "function_name": "def sort_by_dnf(arr, n)", "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\n    assert candidate([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n    assert candidate([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n\n"}
{"task_id": "MBPP/0816", "prompt": "Write a function to clear the values of the given tuples.", "entry_point": "clear_tuple", "function_name": "def clear_tuple(test_tup)", "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 3, 6, 8)) == ()\n    assert candidate((2, 1, 4 ,5 ,6)) == ()\n    assert candidate((3, 2, 5, 6, 8)) == ()\n\n"}
{"task_id": "MBPP/0817", "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "entry_point": "div_of_nums", "function_name": "def div_of_nums(nums, m, n)", "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\n    assert candidate([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\n    assert candidate([10,15,14,13,18,12,20],10,5)==[10, 15, 20]\n\n"}
{"task_id": "MBPP/0818", "prompt": "Write a python function to count lower case letters in a given string.", "entry_point": "lower_ctr", "function_name": "def lower_ctr(str)", "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('abc') == 3\n    assert candidate('string') == 6\n    assert candidate('Python') == 5\n\n"}
{"task_id": "MBPP/0819", "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "entry_point": "count_duplic", "function_name": "def count_duplic(lists)", "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\n    assert candidate([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n\n"}
{"task_id": "MBPP/0820", "prompt": "Write a function to check whether the given month number contains 28 days or not.", "entry_point": "check_monthnum_number", "function_name": "def check_monthnum_number(monthnum1)", "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2)==True\n    assert candidate(1)==False\n    assert candidate(3)==False\n\n"}
{"task_id": "MBPP/0821", "prompt": "Write a function to merge two dictionaries into a single expression.", "entry_point": "merge_dictionaries", "function_name": "def merge_dictionaries(dict1, dict2)", "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\n    assert candidate({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}\n\n"}
{"task_id": "MBPP/0822", "prompt": "Write a function to return true if the password is valid.", "entry_point": "pass_validity", "function_name": "def pass_validity(p)", "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"password\")==False\n    assert candidate(\"Password@10\")==True\n    assert candidate(\"password@10\")==False\n\n"}
{"task_id": "MBPP/0823", "prompt": "Write a function to check if the given string starts with a substring using regex.", "entry_point": "check_substring", "function_name": "def check_substring(string, sample)", "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\n    assert candidate(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\n    assert candidate(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'\n\n"}
{"task_id": "MBPP/0824", "prompt": "Write a python function to remove even numbers from a given list.", "entry_point": "remove_even", "function_name": "def remove_even(l)", "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,3,5,2]) == [1,3,5]\n    assert candidate([5,6,7]) == [5,7]\n    assert candidate([1,2,3,4]) == [1,3]\n\n"}
{"task_id": "MBPP/0825", "prompt": "Write a python function to access multiple elements of specified index from a given list.", "entry_point": "access_elements", "function_name": "def access_elements(nums, list_index)", "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\n    assert candidate([1, 2, 3, 4, 5],[1,2]) == [2,3]\n    assert candidate([1,0,2,3],[0,1]) == [1,0]\n\n"}
{"task_id": "MBPP/0826", "prompt": "Write a python function to find the type of triangle from the given sides.", "entry_point": "check_Type_Of_Triangle", "function_name": "def check_Type_Of_Triangle(a, b, c)", "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1,2,3) == \"Obtuse-angled Triangle\"\n    assert candidate(2,2,2) == \"Acute-angled Triangle\"\n    assert candidate(1,0,1) == \"Right-angled Triangle\"\n\n"}
{"task_id": "MBPP/0827", "prompt": "Write a function to sum a specific column of a list in a given list of lists.", "entry_point": "sum_column", "function_name": "def sum_column(list1, C)", "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9\n\n"}
{"task_id": "MBPP/0828", "prompt": "Write a function to count alphabets,digits and special charactes in a given string.", "entry_point": "count_alpha_dig_spl", "function_name": "def count_alpha_dig_spl(string)", "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abc!@#123\")==(3,3,3)\n    assert candidate(\"dgsuy@#$%&1255\")==(5,4,5)\n    assert candidate(\"fjdsif627348#%$^&\")==(6,6,5)\n\n"}
{"task_id": "MBPP/0829", "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "entry_point": "second_frequent", "function_name": "def second_frequent(input)", "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\n    assert candidate(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\n    assert candidate(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'\n\n"}
{"task_id": "MBPP/0830", "prompt": "Write a function to round up a number to specific digits.", "entry_point": "round_up", "function_name": "def round_up(a, digits)", "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(123.01247,0)==124\n    assert candidate(123.01247,1)==123.1\n    assert candidate(123.01247,2)==123.02\n\n"}
{"task_id": "MBPP/0831", "prompt": "Write a python function to count equal element pairs from the given array.", "entry_point": "count_Pairs", "function_name": "def count_Pairs(arr, n)", "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,1,1,1],4) == 6\n    assert candidate([1,5,1],3) == 1\n    assert candidate([3,2,1,7,8,9],6) == 0\n\n"}
{"task_id": "MBPP/0832", "prompt": "Write a function to extract the maximum numeric value from a string by using regex.", "entry_point": "extract_max", "function_name": "def extract_max(input)", "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('100klh564abc365bg') == 564\n    assert candidate('hello300how546mer231') == 546\n    assert candidate('its233beenalong343journey234') == 343\n\n"}
{"task_id": "MBPP/0833", "prompt": "Write a function to get dictionary keys as a list.", "entry_point": "get_key", "function_name": "def get_key(dict)", "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({1:'python',2:'java'})==[1,2]\n    assert candidate({10:'red',20:'blue',30:'black'})==[10,20,30]\n    assert candidate({27:'language',39:'java',44:'little'})==[27,39,44]\n\n"}
{"task_id": "MBPP/0834", "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "entry_point": "generate_matrix", "function_name": "def generate_matrix(n)", "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \n    assert candidate(2)==[[1,2],[4,3]]\n    assert candidate(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\n\n"}
{"task_id": "MBPP/0835", "prompt": "Write a python function to find the slope of a line.", "entry_point": "slope", "function_name": "def slope(x1, y1, x2, y2)", "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,2,2,5) == -1.5\n    assert candidate(2,4,4,6) == 1\n    assert candidate(1,2,4,2) == 0\n\n"}
{"task_id": "MBPP/0836", "prompt": "Write a function to find length of the subarray having maximum sum.", "entry_point": "max_sub_array_sum", "function_name": "def max_sub_array_sum(a, size)", "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\n    assert candidate([1, -2, 1, 1, -2, 1],6) == 2\n    assert candidate([-1, -2, 3, 4, 5],5) == 3\n\n"}
{"task_id": "MBPP/0837", "prompt": "Write a python function to find the cube sum of first n odd natural numbers.", "entry_point": "cube_Sum", "function_name": "def cube_Sum(n)", "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 28\n    assert candidate(3) == 153\n    assert candidate(4) == 496\n\n"}
{"task_id": "MBPP/0838", "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.", "entry_point": "min_Swaps", "function_name": "def min_Swaps(s1, s2)", "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"0011\",\"1111\") == 1\n    assert candidate(\"00011\",\"01001\") == 2\n    assert candidate(\"111\",\"111\") == 0\n\n"}
{"task_id": "MBPP/0839", "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "entry_point": "sort_tuple", "function_name": "def sort_tuple(tup)", "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n    assert candidate([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n    assert candidate([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]\n\n"}
{"task_id": "MBPP/0840", "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "entry_point": "Check_Solution", "function_name": "def Check_Solution(a, b, c)", "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2,0,-1) == \"Yes\"\n    assert candidate(1,-5,6) == \"No\"\n    assert candidate(2,0,2) == \"Yes\"\n\n"}
{"task_id": "MBPP/0841", "prompt": "Write a function to count the number of inversions in the given array.", "entry_point": "get_inv_count", "function_name": "def get_inv_count(arr, n)", "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 20, 6, 4, 5], 5) == 5\n    assert candidate([8, 4, 2, 1], 4) == 6\n    assert candidate([3, 1, 2], 3) == 2\n\n"}
{"task_id": "MBPP/0842", "prompt": "Write a function to find the number which occurs for odd number of times in the given array.", "entry_point": "get_odd_occurence", "function_name": "def get_odd_occurence(arr, arr_size)", "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\n    assert candidate([1, 2, 3, 2, 3, 1, 3], 7) == 3\n    assert candidate([5, 7, 2, 7, 5, 2, 5], 7) == 5\n\n"}
{"task_id": "MBPP/0843", "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "entry_point": "nth_super_ugly_number", "function_name": "def nth_super_ugly_number(n, primes)", "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12,[2,7,13,19])==32\n    assert candidate(10,[2,7,13,19])==26\n    assert candidate(100,[2,7,13,19])==5408\n\n"}
{"task_id": "MBPP/0844", "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "entry_point": "get_Number", "function_name": "def get_Number(n, k)", "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(8,5) == 2\n    assert candidate(7,2) == 3\n    assert candidate(5,2) == 3\n\n"}
{"task_id": "MBPP/0845", "prompt": "Write a python function to count the number of digits in factorial of a given number.", "entry_point": "find_Digits", "function_name": "def find_Digits(n)", "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(7) == 4\n    assert candidate(5) == 3\n    assert candidate(4) == 2\n\n"}
{"task_id": "MBPP/0846", "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.", "entry_point": "find_platform", "function_name": "def find_platform(arr, dep, n)", "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\n    assert candidate([100,200,300,400],[700,800,900,1000],4)==4\n    assert candidate([5,6,7,8],[4,3,2,1],4)==1\n\n"}
{"task_id": "MBPP/0847", "prompt": "Write a python function to copy a list from a singleton tuple.", "entry_point": "lcopy", "function_name": "def lcopy(xs)", "canonical_solution": "def lcopy(xs):\n  return xs[:]\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == [1, 2, 3]\n    assert candidate([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\n    assert candidate([4, 5, 6]) == [4, 5, 6]\n\n\n"}
{"task_id": "MBPP/0848", "prompt": "Write a function to find the area of a trapezium.", "entry_point": "area_trapezium", "function_name": "def area_trapezium(base1, base2, height)", "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(6,9,4)==30\n    assert candidate(10,20,30)==450\n    assert candidate(15,25,35)==700\n\n"}
{"task_id": "MBPP/0849", "prompt": "Write a python function to find sum of all prime divisors of a given number.", "entry_point": "Sum", "function_name": "def Sum(N)", "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(60) == 10\n    assert candidate(39) == 16\n    assert candidate(40) == 7\n\n"}
{"task_id": "MBPP/0850", "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.", "entry_point": "is_triangleexists", "function_name": "def is_triangleexists(a, b, c)", "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(50,60,70)==True\n    assert candidate(90,45,45)==True\n    assert candidate(150,30,70)==False\n\n"}
{"task_id": "MBPP/0851", "prompt": "Write a python function to find sum of inverse of divisors.", "entry_point": "Sum_of_Inverse_Divisors", "function_name": "def Sum_of_Inverse_Divisors(N, Sum)", "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(6,12) == 2\n    assert candidate(9,13) == 1.44\n    assert candidate(1,4) == 4\n\n"}
{"task_id": "MBPP/0852", "prompt": "Write a python function to remove negative numbers from a list.", "entry_point": "remove_negs", "function_name": "def remove_negs(num_list)", "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,-2,3,-4]) == [1,3]\n    assert candidate([1,2,3,-4]) == [1,2,3]\n    assert candidate([4,5,-6,7,-8]) == [4,5,7]\n\n"}
{"task_id": "MBPP/0853", "prompt": "Write a python function to find sum of odd factors of a number.", "entry_point": "sum_of_odd_Factors", "function_name": "def sum_of_odd_Factors(n)", "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(30) == 24\n    assert candidate(18) == 13\n    assert candidate(2) == 1\n\n"}
{"task_id": "MBPP/0854", "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "entry_point": "raw_heap", "function_name": "def raw_heap(rawheap)", "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\n    assert candidate([4, 5, 6, 2])==[2, 4, 6, 5]\n\n"}
{"task_id": "MBPP/0855", "prompt": "Write a python function to check for even parity of a given number.", "entry_point": "check_Even_Parity", "function_name": "def check_Even_Parity(x)", "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(18) == True\n\n"}
{"task_id": "MBPP/0856", "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.", "entry_point": "find_Min_Swaps", "function_name": "def find_Min_Swaps(arr, n)", "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,0,1,0],4) == 3\n    assert candidate([0,1,0],3) == 1\n    assert candidate([0,0,1,1,0],5) == 2\n\n"}
{"task_id": "MBPP/0857", "prompt": "Write a function to list out the list of given strings individually using map function.", "entry_point": "listify_list", "function_name": "def listify_list(list1)", "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n    assert candidate(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\n    assert candidate([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\n\n"}
{"task_id": "MBPP/0858", "prompt": "Write a function to count number of lists in a given list of lists and square the count.", "entry_point": "count_list", "function_name": "def count_list(input_list)", "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\n    assert candidate([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9\n\n"}
{"task_id": "MBPP/0859", "prompt": "Write a function to generate all sublists of a given list.", "entry_point": "sub_lists", "function_name": "def sub_lists(my_list)", "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n    assert candidate(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\n    assert candidate([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]\n\n"}
{"task_id": "MBPP/0860", "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "entry_point": "check_alphanumeric", "function_name": "def check_alphanumeric(string)", "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"dawood@\") == 'Discard'\n    assert candidate(\"skdmsam326\") == 'Accept'\n    assert candidate(\"cooltricks@\") == 'Discard'\n\n"}
{"task_id": "MBPP/0861", "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "entry_point": "anagram_lambda", "function_name": "def anagram_lambda(texts, str)", "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\n    assert candidate([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\n    assert candidate([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]\n\n"}
{"task_id": "MBPP/0862", "prompt": "Write a function to find the occurrences of n most common words in a given text.", "entry_point": "n_common_words", "function_name": "def n_common_words(text, n)", "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python is a programming language\",1)==[('python', 1)]\n    assert candidate(\"python is a programming language\",1)==[('python', 1)]\n    assert candidate(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]\n\n"}
{"task_id": "MBPP/0863", "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "entry_point": "find_longest_conseq_subseq", "function_name": "def find_longest_conseq_subseq(arr, n)", "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, 3], 4) == 3\n    assert candidate([1, 9, 3, 10, 4, 20, 2], 7) == 4\n    assert candidate([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5\n\n"}
{"task_id": "MBPP/0864", "prompt": "Write a function to find palindromes in a given list of strings using lambda function.", "entry_point": "palindrome_lambda", "function_name": "def palindrome_lambda(texts)", "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\n    assert candidate([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\n    assert candidate([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']\n\n"}
{"task_id": "MBPP/0865", "prompt": "Write a function to print n-times a list using map function.", "entry_point": "ntimes_list", "function_name": "def ntimes_list(nums, n)", "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]\n\n"}
{"task_id": "MBPP/0866", "prompt": "Write a function to check whether the given month name contains 31 days or not.", "entry_point": "check_monthnumb", "function_name": "def check_monthnumb(monthname2)", "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"February\")==False\n    assert candidate(\"January\")==True\n    assert candidate(\"March\")==True\n\n"}
{"task_id": "MBPP/0867", "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.", "entry_point": "min_Num", "function_name": "def min_Num(arr, n)", "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8,9],9) == 1\n    assert candidate([1,2,3,4,5,6,7,8],8) == 2\n    assert candidate([1,2,3],3) == 2\n\n"}
{"task_id": "MBPP/0868", "prompt": "Write a python function to find the length of the last word in a given string.", "entry_point": "length_Of_Last_Word", "function_name": "def length_Of_Last_Word(a)", "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python language\") == 8\n    assert candidate(\"PHP\") == 3\n    assert candidate(\"\") == 0\n\n"}
{"task_id": "MBPP/0869", "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "entry_point": "remove_list_range", "function_name": "def remove_list_range(list1, leftrange, rigthrange)", "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\n\n"}
{"task_id": "MBPP/0870", "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "entry_point": "sum_positivenum", "function_name": "def sum_positivenum(nums)", "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\n    assert candidate([10,15,-14,13,-18,12,-20])==50\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522\n\n"}
{"task_id": "MBPP/0871", "prompt": "Write a python function to check whether the given strings are rotations of each other or not.", "entry_point": "are_Rotations", "function_name": "def are_Rotations(string1, string2)", "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abc\",\"cba\") == False\n    assert candidate(\"abcd\",\"cdba\") == False\n    assert candidate(\"abacd\",\"cdaba\") == True\n\n"}
{"task_id": "MBPP/0872", "prompt": "Write a function to check if a nested list is a subset of another nested list.", "entry_point": "check_subset", "function_name": "def check_subset(list1, list2)", "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\n    assert candidate([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\n    assert candidate([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False\n\n"}
{"task_id": "MBPP/0873", "prompt": "Write a function to solve the fibonacci sequence using recursion.", "entry_point": "fibonacci", "function_name": "def fibonacci(n)", "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(7) == 13\n    assert candidate(8) == 21\n    assert candidate(9) == 34\n\n"}
{"task_id": "MBPP/0874", "prompt": "Write a python function to check if the string is a concatenation of another string.", "entry_point": "check_Concat", "function_name": "def check_Concat(str1, str2)", "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abcabcabc\",\"abc\") == True\n    assert candidate(\"abcab\",\"abc\") == False\n    assert candidate(\"aba\",\"ab\") == False\n\n"}
{"task_id": "MBPP/0875", "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "entry_point": "min_difference", "function_name": "def min_difference(test_list)", "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\n    assert candidate([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\n    assert candidate([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6\n\n"}
{"task_id": "MBPP/0876", "prompt": "Write a python function to find lcm of two positive integers.", "entry_point": "lcm", "function_name": "def lcm(x, y)", "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,6) == 12\n    assert candidate(15,17) == 255\n    assert candidate(2,6) == 6\n\n"}
{"task_id": "MBPP/0877", "prompt": "Write a python function to sort the given string.", "entry_point": "sort_String", "function_name": "def sort_String(str)", "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"cba\") == \"abc\"\n    assert candidate(\"data\") == \"aadt\"\n    assert candidate(\"zxy\") == \"xyz\"\n\n"}
{"task_id": "MBPP/0878", "prompt": "Write a function to check if the given tuple contains only k elements.", "entry_point": "check_tuples", "function_name": "def check_tuples(test_tuple, K)", "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\n    assert candidate((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\n    assert candidate((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False\n\n"}
{"task_id": "MBPP/0879", "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "entry_point": "text_match", "function_name": "def text_match(text)", "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"aabbbbd\") == 'Not matched!'\n    assert candidate(\"aabAbbbc\") == 'Not matched!'\n    assert candidate(\"accddbbjjjb\") == 'Found a match!'\n\n"}
{"task_id": "MBPP/0880", "prompt": "Write a python function to find number of solutions in quadratic equation.", "entry_point": "Check_Solution", "function_name": "def Check_Solution(a, b, c)", "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2,5,2) == \"2 solutions\"\n    assert candidate(1,1,1) == \"No solutions\"\n    assert candidate(1,2,1) == \"1 solution\"\n\n"}
{"task_id": "MBPP/0881", "prompt": "Write a function to find the sum of first even and odd number of a given list.", "entry_point": "sum_even_odd", "function_name": "def sum_even_odd(list1)", "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==5\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==3\n    assert candidate([1,5,7,9,10])==11\n\n"}
{"task_id": "MBPP/0882", "prompt": "Write a function to caluclate perimeter of a parallelogram.", "entry_point": "parallelogram_perimeter", "function_name": "def parallelogram_perimeter(b, h)", "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20)==400\n    assert candidate(15,20)==600\n    assert candidate(8,9)==144\n\n"}
{"task_id": "MBPP/0883", "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "entry_point": "div_of_nums", "function_name": "def div_of_nums(nums, m, n)", "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\n    assert candidate([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\n    assert candidate([10,15,14,13,18,12,20],10,5)==[10,20]\n\n"}
{"task_id": "MBPP/0884", "prompt": "Write a python function to check whether all the bits are within a given range or not.", "entry_point": "all_Bits_Set_In_The_Given_Range", "function_name": "def all_Bits_Set_In_The_Given_Range(n, l, r)", "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,2,1) == True \n    assert candidate(5,2,4) == False\n    assert candidate(22,2,3) == True \n\n"}
{"task_id": "MBPP/0885", "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.", "entry_point": "is_Isomorphic", "function_name": "def is_Isomorphic(str1, str2)", "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"paper\",\"title\") == True\n    assert candidate(\"ab\",\"ba\") == True\n    assert candidate(\"ab\",\"aa\") == False\n\n"}
{"task_id": "MBPP/0886", "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.", "entry_point": "sum_num", "function_name": "def sum_num(numbers)", "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((8, 2, 3, 0, 7))==4.0\n    assert candidate((-10,-20,-30))==-20.0\n    assert candidate((19,15,18))==17.333333333333332\n\n"}
{"task_id": "MBPP/0887", "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.", "entry_point": "is_odd", "function_name": "def is_odd(n)", "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == True\n    assert candidate(6) == False\n    assert candidate(7) == True\n\n"}
{"task_id": "MBPP/0888", "prompt": "Write a function to substract the elements of the given nested tuples.", "entry_point": "substract_elements", "function_name": "def substract_elements(test_tup1, test_tup2)", "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\n    assert candidate(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\n    assert candidate(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))\n\n"}
{"task_id": "MBPP/0889", "prompt": "Write a function to reverse each list in a given list of lists.", "entry_point": "reverse_list_lists", "function_name": "def reverse_list_lists(lists)", "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n    assert candidate([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\n    assert candidate([[10,20],[30,40]])==[[20,10],[40,30]]\n\n"}
{"task_id": "MBPP/0890", "prompt": "Write a python function to find the index of an extra element present in one sorted array.", "entry_point": "find_Extra", "function_name": "def find_Extra(arr1, arr2, n)", "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4],[1,2,3],3) == 3\n    assert candidate([2,4,6,8,10],[2,4,6,8],4) == 4\n    assert candidate([1,3,5,7,9,11],[1,3,5,7,9],5) == 5\n\n"}
{"task_id": "MBPP/0891", "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.", "entry_point": "same_Length", "function_name": "def same_Length(A, B)", "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12,1) == False\n    assert candidate(2,2) == True\n    assert candidate(10,20) == True\n\n"}
{"task_id": "MBPP/0892", "prompt": "Write a function to remove multiple spaces in a string.", "entry_point": "remove_spaces", "function_name": "def remove_spaces(text)", "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('python  program')==('python program')\n    assert candidate('python   programming    language')==('python programming language')\n    assert candidate('python                     program')==('python program')\n\n"}
{"task_id": "MBPP/0893", "prompt": "Write a python function to get the last element of each sublist.", "entry_point": "Extract", "function_name": "def Extract(lst)", "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\n    assert candidate([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\n    assert candidate([[1, 2, 3], [4, 5]]) == [3, 5]\n\n"}
{"task_id": "MBPP/0894", "prompt": "Write a function to convert the given string of float type into tuple.", "entry_point": "float_to_tuple", "function_name": "def float_to_tuple(test_str)", "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\n    assert candidate(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\n    assert candidate(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)\n\n"}
{"task_id": "MBPP/0895", "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "entry_point": "max_sum_subseq", "function_name": "def max_sum_subseq(A)", "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\n    assert candidate([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\n    assert candidate([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44\n\n"}
{"task_id": "MBPP/0896", "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "entry_point": "last", "function_name": "def last(n)", "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert sort_list_candidate([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \n    assert sort_list_candidate([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \n    assert sort_list_candidate([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] \n\n"}
{"task_id": "MBPP/0897", "prompt": "Write a python function to check whether the word is present in a given sentence or not.", "entry_point": "is_Word_Present", "function_name": "def is_Word_Present(sentence, word)", "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"machine learning\",\"machine\") == True\n    assert candidate(\"easy\",\"fun\") == False\n    assert candidate(\"python language\",\"code\") == False\n\n"}
{"task_id": "MBPP/0898", "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "entry_point": "extract_elements", "function_name": "def extract_elements(numbers, n)", "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\n    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\n    assert candidate([0,0,0,0,0],5)==[0]\n\n"}
{"task_id": "MBPP/0899", "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.", "entry_point": "check", "function_name": "def check(arr, n)", "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([3,2,1,2,3,4],6) == True\n    assert candidate([2,1,4,5,1],5) == True\n    assert candidate([1,2,2,1,2,3],6) == True\n\n"}
{"task_id": "MBPP/0900", "prompt": "Write a function where a string will start with a specific number.", "entry_point": "match_num", "function_name": "def match_num(string)", "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('5-2345861')==True\n    assert candidate('6-2345861')==False\n    assert candidate('78910')==False\n\n"}
{"task_id": "MBPP/0901", "prompt": "Write a function to find the smallest multiple of the first n numbers.", "entry_point": "smallest_multiple", "function_name": "def smallest_multiple(n)", "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(13)==360360\n    assert candidate(2)==2\n    assert candidate(1)==1\n\n"}
{"task_id": "MBPP/0902", "prompt": "Write a function to combine two dictionaries by adding values for common keys.", "entry_point": "add_dict", "function_name": "def add_dict(d1, d2)", "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \n    assert candidate({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \n    assert candidate({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})\n\n"}
{"task_id": "MBPP/0903", "prompt": "Write a python function to count the total unset bits from 1 to n.", "entry_point": "count_Unset_Bits", "function_name": "def count_Unset_Bits(n)", "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(5) == 4\n    assert candidate(14) == 17\n\n"}
{"task_id": "MBPP/0904", "prompt": "Write a function to return true if the given number is even else return false.", "entry_point": "even_num", "function_name": "def even_num(x)", "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(13.5)==False\n    assert candidate(0)==True\n    assert candidate(-9)==False\n\n"}
{"task_id": "MBPP/0905", "prompt": "Write a python function to find the sum of squares of binomial co-efficients.", "entry_point": "factorial", "function_name": "def factorial(start, end)", "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert sum_of_square(4) == 70\n    assert sum_of_square(5) == 252\n    assert sum_of_square(2) == 6\n\n"}
{"task_id": "MBPP/0906", "prompt": "Write a function to extract year, month and date from a url by using regex.", "entry_point": "extract_date", "function_name": "def extract_date(url)", "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\n    assert candidate(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\n    assert candidate(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]\n\n"}
{"task_id": "MBPP/0907", "prompt": "Write a function to print the first n lucky numbers.", "entry_point": "lucky_num", "function_name": "def lucky_num(n)", "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \n    assert candidate(5)==[1, 3, 7, 9, 13]\n    assert candidate(8)==[1, 3, 7, 9, 13, 15, 21, 25]\n\n"}
{"task_id": "MBPP/0908", "prompt": "Write a function to find the fixed point in the given array.", "entry_point": "find_fixed_point", "function_name": "def find_fixed_point(arr, n)", "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\n    assert candidate([0, 2, 5, 8, 17],5) == 0\n\n"}
{"task_id": "MBPP/0909", "prompt": "Write a function to find the previous palindrome of a specified number.", "entry_point": "previous_palindrome", "function_name": "def previous_palindrome(num)", "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(99)==88\n    assert candidate(1221)==1111\n    assert candidate(120)==111\n\n"}
{"task_id": "MBPP/0910", "prompt": "Write a function to validate a gregorian date.", "entry_point": "check_date", "function_name": "def check_date(m, d, y)", "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(11,11,2002)==True\n    assert candidate(13,11,2002)==False\n    assert candidate('11','11','2002')==True\n\n"}
{"task_id": "MBPP/0911", "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "entry_point": "maximum_product", "function_name": "def maximum_product(nums)", "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate( [12, 74, 9, 50, 61, 41])==225700\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520\n\n"}
{"task_id": "MBPP/0912", "prompt": "Write a function to find ln, m lobb number.", "entry_point": "binomial_coeff", "function_name": "def binomial_coeff(n, k)", "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert int(lobb_num(5, 3)) == 35\n    assert int(lobb_num(3, 2)) == 5\n    assert int(lobb_num(4, 2)) == 20\n\n"}
{"task_id": "MBPP/0913", "prompt": "Write a function to check for a number at the end of a string.", "entry_point": "end_num", "function_name": "def end_num(string)", "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('abcdef')==False\n    assert candidate('abcdef7')==True\n    assert candidate('abc')==False\n\n"}
{"task_id": "MBPP/0914", "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.", "entry_point": "is_Two_Alter", "function_name": "def is_Two_Alter(s)", "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"abab\") == True\n    assert candidate(\"aaaa\") == False\n    assert candidate(\"xyz\") == False\n\n"}
{"task_id": "MBPP/0915", "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "entry_point": "rearrange_numbs", "function_name": "def rearrange_numbs(array_nums)", "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\n    assert candidate([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\n    assert candidate([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]\n\n"}
{"task_id": "MBPP/0916", "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "entry_point": "find_triplet_array", "function_name": "def find_triplet_array(A, arr_size, sum)", "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\n    assert candidate([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\n    assert candidate([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)\n\n"}
{"task_id": "MBPP/0917", "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "entry_point": "text_uppercase_lowercase", "function_name": "def text_uppercase_lowercase(text)", "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"AaBbGg\")==('Found a match!')\n    assert candidate(\"aA\")==('Not matched!')\n    assert candidate(\"PYTHON\")==('Not matched!')\n\n"}
{"task_id": "MBPP/0918", "prompt": "Write a function to count coin change.", "entry_point": "coin_change", "function_name": "def coin_change(S, m, n)", "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3],3,4)==4\n    assert candidate([4,5,6,7,8,9],6,9)==2\n    assert candidate([4,5,6,7,8,9],6,4)==1\n\n"}
{"task_id": "MBPP/0919", "prompt": "Write a python function to multiply all items in the list.", "entry_point": "multiply_list", "function_name": "def multiply_list(items)", "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1,-2,3]) == -6\n    assert candidate([1,2,3,4]) == 24\n    assert candidate([3,1,2,3]) == 18\n\n"}
{"task_id": "MBPP/0920", "prompt": "Write a function to remove all tuples with all none values in the given tuple list.", "entry_point": "remove_tuple", "function_name": "def remove_tuple(test_list)", "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\n    assert candidate([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\n    assert candidate([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'\n\n"}
{"task_id": "MBPP/0921", "prompt": "Write a function to perform chunking of tuples each of size n.", "entry_point": "chunk_tuples", "function_name": "def chunk_tuples(test_tup, N)", "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\n    assert candidate((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\n    assert candidate((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]\n\n"}
{"task_id": "MBPP/0922", "prompt": "Write a function to find a pair with the highest product from a given array of integers.", "entry_point": "max_product", "function_name": "def max_product(arr)", "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\n    assert candidate([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\n    assert candidate([1, 3, 5, 6, 8, 9])==(8,9)\n\n"}
{"task_id": "MBPP/0923", "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "entry_point": "super_seq", "function_name": "def super_seq(X, Y, m, n)", "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\n    assert candidate(\"feek\", \"eke\", 4, 3) == 5\n    assert candidate(\"PARRT\", \"RTA\", 5, 3) == 6\n\n"}
{"task_id": "MBPP/0924", "prompt": "Write a function to find maximum of two numbers.", "entry_point": "max_of_two", "function_name": "def max_of_two(x, y)", "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20)==20\n    assert candidate(19,15)==19\n    assert candidate(-10,-20)==-10\n\n"}
{"task_id": "MBPP/0925", "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.", "entry_point": "mutiple_tuple", "function_name": "def mutiple_tuple(nums)", "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((4, 3, 2, 2, -1, 18)) == -864\n    assert candidate((1,2,3)) == 6\n    assert candidate((-2,-4,-6)) == -48\n\n"}
{"task_id": "MBPP/0926", "prompt": "Write a function to find n-th rencontres number.", "entry_point": "binomial_coeffi", "function_name": "def binomial_coeffi(n, k)", "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert rencontres_number(7, 2) == 924\n    assert rencontres_number(3, 0) == 2\n    assert rencontres_number(3, 1) == 3\n\n"}
{"task_id": "MBPP/0927", "prompt": "Write a function to calculate the height of the given binary tree.", "entry_point": "__init__", "function_name": "def __init__(self, data)", "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert (max_height(root)) == 3\n    assert (max_height(root1)) == 5 \n    assert (max_height(root2)) == 4\n\n"}
{"task_id": "MBPP/0928", "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "entry_point": "change_date_format", "function_name": "def change_date_format(dt)", "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('2026-01-02')=='02-01-2026'\n    assert candidate('2021-01-04')=='04-01-2021'\n    assert candidate('2030-06-06')=='06-06-2030'\n\n"}
{"task_id": "MBPP/0929", "prompt": "Write a function to count repeated items of a tuple.", "entry_point": "count_tuplex", "function_name": "def count_tuplex(tuplex, value)", "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\n    assert candidate((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4\n\n"}
{"task_id": "MBPP/0930", "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "entry_point": "text_match", "function_name": "def text_match(text)", "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"msb\") == 'Not matched!'\n    assert candidate(\"a0c\") == 'Found a match!'\n    assert candidate(\"abbc\") == 'Found a match!'\n\n"}
{"task_id": "MBPP/0931", "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "entry_point": "sum_series", "function_name": "def sum_series(number)", "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(7)==784\n    assert candidate(5)==225\n    assert candidate(15)==14400\n\n"}
{"task_id": "MBPP/0932", "prompt": "Write a function to remove duplicate words from a given list of strings.", "entry_point": "remove_duplic_list", "function_name": "def remove_duplic_list(l)", "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']\n\n"}
{"task_id": "MBPP/0933", "prompt": "Write a function to convert camel case string to snake case string by using regex.", "entry_point": "camel_to_snake", "function_name": "def camel_to_snake(text)", "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('GoogleAssistant') == 'google_assistant'\n    assert candidate('ChromeCast') == 'chrome_cast'\n    assert candidate('QuadCore') == 'quad_core'\n\n"}
{"task_id": "MBPP/0934", "prompt": "Write a function to find the nth delannoy number.", "entry_point": "dealnnoy_num", "function_name": "def dealnnoy_num(n, m)", "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 4) == 129\n    assert candidate(3, 3) == 63\n    assert candidate(4, 5) == 681\n\n"}
{"task_id": "MBPP/0935", "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "entry_point": "series_sum", "function_name": "def series_sum(number)", "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(6)==91\n    assert candidate(7)==140\n    assert candidate(12)==650\n\n"}
{"task_id": "MBPP/0936", "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.", "entry_point": "re_arrange_tuples", "function_name": "def re_arrange_tuples(test_list, ord_list)", "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\n    assert candidate([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\n    assert candidate([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]\n\n"}
{"task_id": "MBPP/0937", "prompt": "Write a function to count the most common character in a given string.", "entry_point": "max_char", "function_name": "def max_char(str1)", "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"hello world\")==('l')\n    assert candidate(\"hello \")==('l')\n    assert candidate(\"python pr\")==('p')\n\n"}
{"task_id": "MBPP/0938", "prompt": "Write a function to find three closest elements from three sorted arrays.", "entry_point": "find_closet", "function_name": "def find_closet(A, B, C, p, q, r)", "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\n    assert candidate([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\n    assert candidate([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)\n\n"}
{"task_id": "MBPP/0939", "prompt": "Write a function to sort a list of dictionaries using lambda function.", "entry_point": "sorted_models", "function_name": "def sorted_models(models)", "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\n    assert candidate([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n    assert candidate([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])\n\n"}
{"task_id": "MBPP/0940", "prompt": "Write a function to sort the given array by using heap sort.", "entry_point": "heap_sort", "function_name": "def heap_sort(arr)", "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\n    assert candidate([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\n    assert candidate([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]\n\n"}
{"task_id": "MBPP/0941", "prompt": "Write a function to count the elements in a list until an element is a tuple.", "entry_point": "count_elim", "function_name": "def count_elim(num)", "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([10,20,30,(10,20),40])==3\n    assert candidate([10,(20,30),(10,20),40])==1\n    assert candidate([(10,(20,30,(10,20),40))])==0\n\n"}
{"task_id": "MBPP/0942", "prompt": "Write a function to check if any list element is present in the given list.", "entry_point": "check_element", "function_name": "def check_element(test_tup, check_list)", "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\n    assert candidate((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\n    assert candidate((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False\n\n"}
{"task_id": "MBPP/0943", "prompt": "Write a function to combine two given sorted lists using heapq module.", "entry_point": "combine_lists", "function_name": "def combine_lists(num1, num2)", "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\n    assert candidate([1,3,7],[2,4,6])==[1,2,3,4,6,7]\n\n"}
{"task_id": "MBPP/0944", "prompt": "Write a function to separate and print the numbers and their position of a given string.", "entry_point": "num_position", "function_name": "def num_position(text)", "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"there are 70 flats in this apartment\")==10\n    assert candidate(\"every adult have 32 teeth\")==17\n    assert candidate(\"isha has 79 chocolates in her bag\")==9\n\n"}
{"task_id": "MBPP/0945", "prompt": "Write a function to convert the given tuples into set.", "entry_point": "tuple_to_set", "function_name": "def tuple_to_set(t)", "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(('x', 'y', 'z') ) == {'y', 'x', 'z'}\n    assert candidate(('a', 'b', 'c') ) == {'c', 'a', 'b'}\n    assert candidate(('z', 'd', 'e') ) == {'d', 'e', 'z'}\n\n"}
{"task_id": "MBPP/0946", "prompt": "Write a function to find the most common elements and their counts of a specified text.", "entry_point": "most_common_elem", "function_name": "def most_common_elem(s, a)", "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \n    assert candidate('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\n    assert candidate('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]\n\n"}
{"task_id": "MBPP/0947", "prompt": "Write a python function to find the length of the shortest word.", "entry_point": "len_log", "function_name": "def len_log(list1)", "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([\"win\",\"lose\",\"great\"]) == 3\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 1\n    assert candidate([\"12\",\"12\",\"1234\"]) == 2\n\n"}
{"task_id": "MBPP/0948", "prompt": "Write a function to get an item of a tuple.", "entry_point": "get_item", "function_name": "def get_item(tup1, index)", "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')\n\n"}
{"task_id": "MBPP/0949", "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.", "entry_point": "count_digs", "function_name": "def count_digs(tup)", "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\n    assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\n    assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'\n\n"}
{"task_id": "MBPP/0950", "prompt": "Write a function to display sign of the chinese zodiac for given year.", "entry_point": "chinese_zodiac", "function_name": "def chinese_zodiac(year)", "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1997)==('Ox')\n    assert candidate(1998)==('Tiger')\n    assert candidate(1994)==('Dog')\n\n"}
{"task_id": "MBPP/0951", "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.", "entry_point": "max_similar_indices", "function_name": "def max_similar_indices(test_list1, test_list2)", "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\n    assert candidate([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\n    assert candidate([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]\n\n"}
{"task_id": "MBPP/0952", "prompt": "Write a function to compute the value of ncr mod p.", "entry_point": "nCr_mod_p", "function_name": "def nCr_mod_p(n, r, p)", "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10, 2, 13) == 6\n    assert candidate(11, 3, 14) == 11\n    assert candidate(18, 14, 19) == 1\n\n"}
{"task_id": "MBPP/0953", "prompt": "Write a python function to find the minimun number of subsets with distinct elements.", "entry_point": "subset", "function_name": "def subset(ar, n)", "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4],4) == 1\n    assert candidate([5, 6, 9, 3, 4, 3, 4],7) == 2\n    assert candidate([1, 2, 3 ],3) == 1\n\n"}
{"task_id": "MBPP/0954", "prompt": "Write a function that gives profit amount if the given amount has profit else return none.", "entry_point": "profit_amount", "function_name": "def profit_amount(actual_cost, sale_amount)", "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1500,1200)==300\n    assert candidate(100,200)==None\n    assert candidate(2000,5000)==None\n\n"}
{"task_id": "MBPP/0955", "prompt": "Write a function to find out, if the given number is abundant.", "entry_point": "is_abundant", "function_name": "def is_abundant(n)", "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12)==True\n    assert candidate(13)==False\n    assert candidate(9)==False\n\n"}
{"task_id": "MBPP/0956", "prompt": "Write a function to split the given string at uppercase letters by using regex.", "entry_point": "split_list", "function_name": "def split_list(text)", "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n    assert candidate(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\n    assert candidate(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']\n\n"}
{"task_id": "MBPP/0957", "prompt": "Write a python function to get the position of rightmost set bit.", "entry_point": "get_First_Set_Bit_Pos", "function_name": "def get_First_Set_Bit_Pos(n)", "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(12) == 3\n    assert candidate(18) == 2\n    assert candidate(16) == 5\n\n"}
{"task_id": "MBPP/0958", "prompt": "Write a function to convert an integer into a roman numeral.", "entry_point": "int_to_roman", "function_name": "def int_to_roman(num)", "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1)==(\"I\")\n    assert candidate(50)==(\"L\")\n    assert candidate(4)==(\"IV\")\n\n"}
{"task_id": "MBPP/0959", "prompt": "Write a python function to find the average of a list.", "entry_point": "Average", "function_name": "def Average(lst)", "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\n    assert candidate([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\n    assert candidate([1,2,3]) == 2\n\n"}
{"task_id": "MBPP/0960", "prompt": "Write a function to solve tiling problem.", "entry_point": "get_noOfways", "function_name": "def get_noOfways(n)", "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4)==3\n    assert candidate(3)==2\n    assert candidate(5)==5\n\n"}
{"task_id": "MBPP/0961", "prompt": "Write a function to convert a roman numeral to an integer.", "entry_point": "roman_to_int", "function_name": "def roman_to_int(s)", "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('MMMCMLXXXVI')==3986\n    assert candidate('MMMM')==4000\n    assert candidate('C')==100\n\n"}
{"task_id": "MBPP/0962", "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.", "entry_point": "sum_Natural", "function_name": "def sum_Natural(n)", "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert sum_Even(2,5) == 6\n    assert sum_Even(3,8) == 18\n    assert sum_Even(4,6) == 10\n\n"}
{"task_id": "MBPP/0963", "prompt": "Write a function to calculate the discriminant value.", "entry_point": "discriminant_value", "function_name": "def discriminant_value(x, y, z)", "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(4,8,2)==(\"Two solutions\",32)\n    assert candidate(5,7,9)==(\"no real solution\",-131)\n    assert candidate(0,0,9)==(\"one solution\",0)\n\n"}
{"task_id": "MBPP/0964", "prompt": "Write a python function to check whether the length of the word is even or not.", "entry_point": "word_len", "function_name": "def word_len(s)", "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"program\") == False\n    assert candidate(\"solution\") == True\n    assert candidate(\"data\") == True\n\n"}
{"task_id": "MBPP/0965", "prompt": "Write a function to convert camel case string to snake case string.", "entry_point": "camel_to_snake", "function_name": "def camel_to_snake(text)", "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('PythonProgram')==('python_program')\n    assert candidate('pythonLanguage')==('python_language')\n    assert candidate('ProgrammingLanguage')==('programming_language')\n\n"}
{"task_id": "MBPP/0966", "prompt": "Write a function to remove an empty tuple from a list of tuples.", "entry_point": "remove_empty", "function_name": "def remove_empty(tuple1)", "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \n    assert candidate([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \n    assert candidate([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  \n\n"}
{"task_id": "MBPP/0967", "prompt": "Write a python function to accept the strings which contains all vowels.", "entry_point": "check", "function_name": "def check(string)", "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"SEEquoiaL\") == 'accepted'\n    assert candidate('program') == \"not accepted\"\n    assert candidate('fine') == \"not accepted\"\n\n"}
{"task_id": "MBPP/0968", "prompt": "Write a python function to find maximum possible value for the given periodic function.", "entry_point": "floor_Max", "function_name": "def floor_Max(A, B, N)", "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(11,10,9) == 9\n    assert candidate(5,7,4) == 2\n    assert candidate(2,2,1) == 1\n\n"}
{"task_id": "MBPP/0969", "prompt": "Write a function to join the tuples if they have similar initial elements.", "entry_point": "join_tuples", "function_name": "def join_tuples(test_list)", "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\n    assert candidate([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\n    assert candidate([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]\n\n"}
{"task_id": "MBPP/0970", "prompt": "Write a function to find minimum of two numbers.", "entry_point": "min_of_two", "function_name": "def min_of_two(x, y)", "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(10,20)==10\n    assert candidate(19,15)==15\n    assert candidate(-10,-20)==-20\n\n"}
{"task_id": "MBPP/0971", "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "entry_point": "maximum_segments", "function_name": "def maximum_segments(n, a, b, c)", "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(7, 5, 2, 5) == 2\n    assert candidate(17, 2, 1, 3) == 17\n    assert candidate(18, 16, 3, 6) == 6\n\n"}
{"task_id": "MBPP/0972", "prompt": "Write a function to concatenate the given two tuples to a nested tuple.", "entry_point": "concatenate_nested", "function_name": "def concatenate_nested(test_tup1, test_tup2)", "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate((3, 4), (5, 6)) == (3, 4, 5, 6)\n    assert candidate((1, 2), (3, 4)) == (1, 2, 3, 4)\n    assert candidate((4, 5), (6, 8)) == (4, 5, 6, 8)\n\n"}
{"task_id": "MBPP/0973", "prompt": "Write a python function to left rotate the string.", "entry_point": "left_rotate", "function_name": "def left_rotate(s, d)", "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(\"python\",2) == \"thonpy\"   \n    assert candidate(\"bigdata\",3 ) == \"databig\" \n    assert candidate(\"hadoop\",1 ) == \"adooph\" \n\n"}
{"task_id": "MBPP/0974", "prompt": "Write a function to find the minimum total path sum in the given triangle.", "entry_point": "min_sum_path", "function_name": "def min_sum_path(A)", "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\n    assert candidate([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \n    assert candidate([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9\n\n"}
